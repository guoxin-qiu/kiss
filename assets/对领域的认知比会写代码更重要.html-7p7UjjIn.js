import{_ as e,c as a,b as i,o as n}from"./app-C01vnHKY.js";const h={};function s(t,l){return n(),a("div",null,l[0]||(l[0]=[i('<h1 id="对领域的认知比会写代码更重要" tabindex="-1"><a class="header-anchor" href="#对领域的认知比会写代码更重要"><span>对领域的认知比会写代码更重要</span></a></h1><h2 id="很少有人从头开始构建代码" tabindex="-1"><a class="header-anchor" href="#很少有人从头开始构建代码"><span>很少有人从头开始构建代码</span></a></h2><p>专业的软件开发人员在团队中工作，一般只处理大型软件代码库的一小部分，并且通常只是修复一些东西，而不是从头开始构建。它并不像培训机构所描述的那样迷人，而且修复所付出的开销要比写代码多得多。</p><h2 id="对领域的认知比会写代码更重要-1" tabindex="-1"><a class="header-anchor" href="#对领域的认知比会写代码更重要-1"><span>对领域的认知比会写代码更重要!</span></a></h2><p>当你理解了它是如何（更重要的是为什么）工作，以及工作的基本原理后，编写代码会变得容易得多。</p><h2 id="文档编写没有得到足够重视" tabindex="-1"><a class="header-anchor" href="#文档编写没有得到足够重视"><span>文档编写没有得到足够重视</span></a></h2><p>通常，开发人员只有在处理别人编写的代码并经历了试图理解和修改它的挑战之后，才会意识到编写可维护代码的价值。通过编写文档和易于理解的代码可以节省大量时间和精力。</p><h2 id="代码是次要的-商业价值才是第一的" tabindex="-1"><a class="header-anchor" href="#代码是次要的-商业价值才是第一的"><span>代码是次要的，商业价值才是第一的</span></a></h2><p>软件工程师的主要工作重点不是编写代码，而是通过使用已编写的软件来创造价值。代码只是实现这一目标的工具。代码-&gt;软件-&gt;价值。</p><h2 id="你需要和不称职的人打交道" tabindex="-1"><a class="header-anchor" href="#你需要和不称职的人打交道"><span>你需要和不称职的人打交道</span></a></h2><p>应对不称职的最好方法是积极主动，找到绕过他们局限性的方法。这可能涉及：</p><ul><li>寻求额外的资源或支持。</li><li>想办法把任务委派给更有能力的人。</li><li>实现故障保护和回退机制，</li><li>这样事情不会卡在你这边。</li><li>以面对面的方式告诉对方，他们阻碍了这个进程。</li><li>再说一遍，没必要当混蛋。</li></ul><h2 id="大部分时间都在与不确定性打交道" tabindex="-1"><a class="header-anchor" href="#大部分时间都在与不确定性打交道"><span>大部分时间都在与不确定性打交道</span></a></h2><p>人们并不总是知道他们想要什么，有时他们没有意识到一个简单的改变可能是非常复杂的 编写第一行代码可能需要数周时间。你需要弄清楚需求，然后弄清楚它需要放在哪里，然后弄清楚它需要如何构建，然后弄清楚它可能会在哪里出错，然后才真正开始编写第一行代码。</p><h2 id="假设所有东西都有-bug" tabindex="-1"><a class="header-anchor" href="#假设所有东西都有-bug"><span>假设所有东西都有 bug</span></a></h2><p>很多开发人员对于信任的一个普遍误解：</p><ul><li>你很少充分信任你的代码，因为你知道你也是人，也会犯错误。</li><li>你使用的第三方库可能会有 bug，但它们是由比你更有能力的人编写的，对吧？</li><li>标准操作系统库不应该有任何 bug，对吧？它们是由更聪明的人写的。</li><li>CPU/硬件应该永远不会出错，对吧？他们花了好几年研发这个东西；它不应该坏。</li><li>供电是不应该中断的啊。哎。</li></ul><p>但事实是——我们永远不能完全相信我们的代码、库甚至硬件不会在某些时候中断；相反，我们需要假设它会。即使是聪明人也会犯糊涂。</p><p>通过假设一切都可能发生故障或有 bug，我们可以采取措施来预防或减轻潜在的问题，这最终有助于确保系统的可靠性和稳定性。</p><h2 id="这不是一份理想的工作" tabindex="-1"><a class="header-anchor" href="#这不是一份理想的工作"><span>这不是一份理想的工作</span></a></h2><ul><li>这是一项艰苦的工作。你一天大部分时间都坐在电脑后面。</li><li>工作和生活很难平衡。一般其他职业是，一天的工作在 18:00 结束，然后就可以完全忘记工作。但在这不是的。你很可能一直在线并查看代码，即使是在深夜。</li><li>你很少会有时间做自己喜欢的事情。而且通常情况下，这是一项需要完成的乏味工作。</li><li>职业发展机会有限。即使你是一名优秀的员工，在公司里也可能没有提升的空间。</li><li>压力的环境。最后期限、bug 和满足客户期望的压力都会导致压力倍增。</li><li>远程工作可能导致孤立。根据公司和团队结构的不同，软件工程师可能会长时间独处（不包括视频通话），导致缺乏真正的社交互动。</li><li>工作保障有限。随着技术的不断发展，软件工程师可能会面临被更新、更高效的技术取代的风险。</li></ul><h2 id="美学是教不来的" tabindex="-1"><a class="header-anchor" href="#美学是教不来的"><span>美学是教不来的</span></a></h2><p>软件开发中的美学是指代码的整体外观和感觉。关键在于它是否易于阅读、理解和维护。美观的代码是干净、有组织并遵循逻辑模式的代码。这是一种让你在看到它的时候感觉优雅的代码。或者在糟糕的时候让你畏缩。</p><h2 id="即使你不想给出估算-但还是会有人问你" tabindex="-1"><a class="header-anchor" href="#即使你不想给出估算-但还是会有人问你"><span>即使你不想给出估算，但还是会有人问你</span></a></h2><p>经理们都喜欢数字、估算，以及用写在餐巾上的想法来要求估算。这就是现实世界的运作方式——企业有一些利润目标，但在批准立项之前，他们需要了解成本。</p><h2 id="并非所有的会议都是无用的" tabindex="-1"><a class="header-anchor" href="#并非所有的会议都是无用的"><span>并非所有的会议都是无用的</span></a></h2><p>会议的目的是确保一切进展顺利，按时进行。他们让人们围绕一个共同的目标保持一致，并让每个人都走上正轨。市场营销部门知道有些东西正在开发中，他们可以为功能的最终发布做准备。项目经理了解开发人员的工作方向，并在需要时进行微小的修正。客户支持带来了最终用户的反馈。质量保证部门分享他们发现的问题。管理层分享利益相关方的最新情况。</p><p>所有这些都是相互关联的，而会议是信息共享的场所。作为一名软件工程师，需要对这种信息共享的一部分负有责任，因此阻碍它是不负责任的。虽然你可能不喜欢这样，但是必须共享信息以保持系统的效率。</p>',28)]))}const c=e(h,[["render",s]]),p=JSON.parse('{"path":"/3.tech/01.tech-arch/%E5%AF%B9%E9%A2%86%E5%9F%9F%E7%9A%84%E8%AE%A4%E7%9F%A5%E6%AF%94%E4%BC%9A%E5%86%99%E4%BB%A3%E7%A0%81%E6%9B%B4%E9%87%8D%E8%A6%81.html","title":"对领域的认知比会写代码更重要","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"很少有人从头开始构建代码","slug":"很少有人从头开始构建代码","link":"#很少有人从头开始构建代码","children":[]},{"level":2,"title":"对领域的认知比会写代码更重要!","slug":"对领域的认知比会写代码更重要-1","link":"#对领域的认知比会写代码更重要-1","children":[]},{"level":2,"title":"文档编写没有得到足够重视","slug":"文档编写没有得到足够重视","link":"#文档编写没有得到足够重视","children":[]},{"level":2,"title":"代码是次要的，商业价值才是第一的","slug":"代码是次要的-商业价值才是第一的","link":"#代码是次要的-商业价值才是第一的","children":[]},{"level":2,"title":"你需要和不称职的人打交道","slug":"你需要和不称职的人打交道","link":"#你需要和不称职的人打交道","children":[]},{"level":2,"title":"大部分时间都在与不确定性打交道","slug":"大部分时间都在与不确定性打交道","link":"#大部分时间都在与不确定性打交道","children":[]},{"level":2,"title":"假设所有东西都有 bug","slug":"假设所有东西都有-bug","link":"#假设所有东西都有-bug","children":[]},{"level":2,"title":"这不是一份理想的工作","slug":"这不是一份理想的工作","link":"#这不是一份理想的工作","children":[]},{"level":2,"title":"美学是教不来的","slug":"美学是教不来的","link":"#美学是教不来的","children":[]},{"level":2,"title":"即使你不想给出估算，但还是会有人问你","slug":"即使你不想给出估算-但还是会有人问你","link":"#即使你不想给出估算-但还是会有人问你","children":[]},{"level":2,"title":"并非所有的会议都是无用的","slug":"并非所有的会议都是无用的","link":"#并非所有的会议都是无用的","children":[]}],"git":{"updatedTime":1745043563000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"26baba58da405cc8ce226278a2d276ba14481967","time":1745043563000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update h 2"}]},"filePathRelative":"3.tech/01.tech-arch/对领域的认知比会写代码更重要.md"}');export{c as comp,p as data};
