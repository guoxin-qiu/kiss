import{_ as s,c as a,b as p,o as e}from"./app-C01vnHKY.js";const t={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="gin-client-go-构建-api-工具" tabindex="-1"><a class="header-anchor" href="#gin-client-go-构建-api-工具"><span>Gin+client-go 构建 API 工具</span></a></h1><p>在前两节课中，我们介绍了  client-go  的两种进阶使用技巧。但需要强调的是，“存在即合理”——client-go 中每种操作资源的方法都有其特定的使用场景。是否在项目中采用这些进阶技巧，最终还需要根据需求来判断。例如，如果项目中并不需要高频查询，就没有必要通过 Informer 将资源缓存到本地。分享这些技巧的目的，是为了拓宽你的知识面，让你在实际工作中多一些选择，提高应对的灵活性。</p><p>与此同时，正如我反复提到的，API 是 AI 时代的一等公民。因此本节课，我们将在前面内容的基础上，完成资源的创建、删除和查询三种操作的代码实现，并使用 Gin 框架构建一个 HTTP Server，将这些功能封装成三个独立的 API。这些 API 将为后续 Agent 的调用提供工具支持。</p><h2 id="gin-简介" tabindex="-1"><a class="header-anchor" href="#gin-简介"><span>Gin 简介</span></a></h2><p>首先，我们来简单介绍一下  Gin。Gin 是一个用 Go 语言编写的高性能、轻量级 Web 框架。它的设计灵感来自于 Python 的 Flask 框架，以简洁易用著称，非常适合构建 RESTful API。可以说 gin 已经成为了 Go 语言编写 Web 后端的最佳实践。</p><p>以下是一段最简单的 Gin 示例代码，展示如何快速搭建一个返回 &quot;Hello, Gin!&quot; 的 HTTP Server：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 创建一个默认的 Gin 路由引擎</span></span>
<span class="line">	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 定义一个简单的 GET 路由</span></span>
<span class="line">	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span></span>
<span class="line">			<span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello, Gin!&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 启动 HTTP 服务，监听 8080 端口</span></span>
<span class="line">	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 默认监听 0.0.0.0:8080</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，几行代码就可以构建出一个 HTTP Server，非常简单易懂。我们在浏览器输入 &quot;localhost:8080/hello&quot; 看一下效果：</p><p><img src="https://static001.geekbang.org/resource/image/31/df/31cbb3cc712029debe880074bcd1a3df.png?wh=429x132" alt="图片"></p><h2 id="代码讲解" tabindex="-1"><a class="header-anchor" href="#代码讲解"><span>代码讲解</span></a></h2><h3 id="api-设计" tabindex="-1"><a class="header-anchor" href="#api-设计"><span>API 设计</span></a></h3><p>了解了什么是 Gin 之后，我们进入今天的代码实践环节。首先，我们需要设计 API。这次设计的目标是实现增、删、查三种通用 API，用于通过自然语言操控 Kubernetes 服务，除此之外，我们还要设计一个验证 API，用于在创建资源时，验证用户传入的 resource 是否正确。</p><p>首先来看增删查三个 API。在实际使用场景中，对于这三种操作，用户一般会这么说：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">//创建</span>
<span class="line">帮我在 default 命名空间下创建一个名为 nginx 的 Pod。</span>
<span class="line"></span>
<span class="line">//查询</span>
<span class="line">帮我列出 default 命名空间下的 configmap 列表。</span>
<span class="line"></span>
<span class="line">//删除</span>
<span class="line">帮我删除 default 命名空间下名为 ng-svc 的 service。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这样的提问方式中可以总结出一个特点，用户通常只会明确告诉我们要操作的资源的  kind  或  resource 名称，例如 pod、service 等等，而不会提及  group  和  version。并且用户要操作的资源是随机不固定的。因此，我们可以设计成通用路由，比如：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">// 创建</span>
<span class="line">POST http://&lt;host&gt;:&lt;port&gt;/:resources?ns=&lt;资源命名空间&gt;</span>
<span class="line">Body: json格式</span>
<span class="line">数据结构: yaml string类型 存放资源 yaml 文件内容</span>
<span class="line"></span>
<span class="line">// 删除</span>
<span class="line">DELETE http://&lt;host&gt;:&lt;port&gt;/:resources?ns=&lt;资源命名空间&gt;&amp;name=&lt;资源名称&gt;</span>
<span class="line"></span>
<span class="line">// 查询</span>
<span class="line">GET http://&lt;host&gt;:&lt;port&gt;/:resources?ns=&lt;资源命名空间&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样设计的思路是，路径参数 resources 直接填入从用户那里获取的待操作资源名称，实现通用化，而不需要针对每一种资源都设计一条路由。有了这个前提，针对这三种操作所需的不同参数，就很好设计了。</p><p>针对创建 API，需要知道命名空间来创建动态客户端，也需要传输一个资源 yaml，才能做具体的创建工作。而删除需要命名空间和资源名称，查询需要命名空间。当然查询也可以做得再复杂一点，比如加上标签过滤，在这里我就不演示了。</p><p>接下来看一下验证 API。验证 API 的作用主要是验证用户输入的 resource 是否是一个 K8s 支持的 resource。例如用户说 “我要创建一个 pod ”，这是没问题的，但如果用户说“我要创建一个 abc”，那就有问题了，我们可以通过验证 API 直接验证出错误就拦截掉，无需再进行后续的步骤了。</p><p>验证的原理，实际上就是我们在[第 6 节课]讲过的通过 resource 获取 GVR 的原理，如果能获取到说明没问题，如果获取不到，则说明用户填错了。</p><p>因此 API 可以这么设计：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">// 查询</span>
<span class="line">GET http://&lt;host&gt;:&lt;port&gt;/get/gvr?resource=&lt;资源名称&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构"><span>目录结构</span></a></h3><p>设计完成后，我们来写代码，首先来看一下目录结构。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token punctuation">.</span></span>
<span class="line"><span class="token operator">|</span><span class="token operator">--</span> pkg</span>
<span class="line"><span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">--</span> config</span>
<span class="line"><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">--</span> k8sconfig<span class="token punctuation">.</span><span class="token keyword">go</span></span>
<span class="line"><span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">--</span> controllers</span>
<span class="line"><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">--</span> resourceCtl<span class="token punctuation">.</span><span class="token keyword">go</span></span>
<span class="line"><span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">--</span> services</span>
<span class="line"><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">--</span> resourceService<span class="token punctuation">.</span><span class="token keyword">go</span></span>
<span class="line"><span class="token operator">|</span><span class="token operator">--</span> <span class="token keyword">go</span><span class="token punctuation">.</span>mod</span>
<span class="line"><span class="token operator">|</span><span class="token operator">--</span> <span class="token keyword">go</span><span class="token punctuation">.</span>sum</span>
<span class="line"><span class="token operator">|</span><span class="token operator">--</span> main<span class="token punctuation">.</span><span class="token keyword">go</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根目录包含 pkg 文件夹，用于编写业务代码。pkg 下面包含了 config、controllers，以及 services 三个文件夹。config 主要是做配置相关的代码，目前包含 k8sconfig.go，做 client, restMapper 等初始化操作；controllers 主要是做路由处理相关工作，包含 resourceCtl.go，用于做创建、删除、查询资源三个 API 的路由处理；services 做具体的与底层 K8s 交互的业务，也就是 client-go 部分的代码，包含 resourceService.go。最后在 main.go 中定义路由并启动 gin 服务器。</p><p>接下来我就按照 config、services、controllers 这三层的顺序开始讲解。</p><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span>config</span></a></h3><p>k8sconfig.go 还是沿用上一节课的链式调用的代码结构，整体变动不大。只是如下所示在 K8sConfig 结构体中，增加了 clientSet、restMapper 以及 SharedInformerFactory。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">type</span> K8sConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">*</span>rest<span class="token punctuation">.</span>Config</span>
<span class="line">    <span class="token operator">*</span>kubernetes<span class="token punctuation">.</span>Clientset</span>
<span class="line">    <span class="token operator">*</span>dynamic<span class="token punctuation">.</span>DynamicClient</span>
<span class="line">    meta<span class="token punctuation">.</span>RESTMapper</span>
<span class="line">    informers<span class="token punctuation">.</span>SharedInformerFactory</span>
<span class="line">    e <span class="token builtin">error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些成员的初始化在之前的两节课中都已经讲过，在这里不做赘述。我会将本节课的代码放到 Github 上，你可以自行查看。</p><h3 id="services" tabindex="-1"><a class="header-anchor" href="#services"><span>services</span></a></h3><p>services 层的代码是具体的业务实现，需要使用 client-go 来完成增删改三种操作以及验证操作。</p><p>对于创建操作和删除操作，我们可以使用[第 6 节课]讲解的 restMapper + DynamicClient 的方式。将路由传入的 resources 利用 restMapper 映射取得 GVR，之后通过 DynamicClient 完成资源创建删除。</p><p>在 第 6 节课的课后思考题中，我曾经提到过，如果 mapping 函数传入的 resourceOrKindArg</p><p>参数不是 resource 而是 Kind，我们在代码中如何处理。实际上，非常简单，因为 schema 包不只提供了 ParseResourceArg 方法用于根据 resource 取出 groupResource，还提供了 ParseKindArg 方法用于根据 Kind 取出 groupKind。我们可以将代码这样完善一下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>ResourceService<span class="token punctuation">)</span> <span class="token function">mappingFor</span><span class="token punctuation">(</span>resourceOrKindArg <span class="token builtin">string</span><span class="token punctuation">,</span> restMapper <span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapper<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapping<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 之前的处理 resource 的代码</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//处理 Kind 的新代码</span></span>
<span class="line">    fullySpecifiedGVK<span class="token punctuation">,</span> groupKind <span class="token operator">:=</span> schema<span class="token punctuation">.</span><span class="token function">ParseKindArg</span><span class="token punctuation">(</span>resourceOrKindArg<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> fullySpecifiedGVK <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        gvk <span class="token operator">:=</span> groupKind<span class="token punctuation">.</span><span class="token function">WithVersion</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        fullySpecifiedGVK <span class="token operator">=</span> <span class="token operator">&amp;</span>gvk</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>fullySpecifiedGVK<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> mapping<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>restMapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RESTMapping</span><span class="token punctuation">(</span>fullySpecifiedGVK<span class="token punctuation">.</span><span class="token function">GroupKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fullySpecifiedGVK<span class="token punctuation">.</span>Version<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> mapping<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    mapping<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>restMapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RESTMapping</span><span class="token punctuation">(</span>groupKind<span class="token punctuation">,</span> gvk<span class="token punctuation">.</span>Version<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> meta<span class="token punctuation">.</span><span class="token function">IsNoMatchError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;the server doesn&#39;t have a resource type %q&quot;</span><span class="token punctuation">,</span> groupResource<span class="token punctuation">.</span>Resource<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> mapping<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了 mapping 之后，就可以通过 mapping.Resource 拿到 GVR。之后通过我们封装的 getResourceInterface 函数，设置好 DynamicClient。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>ResourceService<span class="token punctuation">)</span> <span class="token function">getResourceInterface</span><span class="token punctuation">(</span>resourceOrKindArg <span class="token builtin">string</span><span class="token punctuation">,</span> ns <span class="token builtin">string</span><span class="token punctuation">,</span> client dynamic<span class="token punctuation">.</span>Interface<span class="token punctuation">,</span> restMapper <span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapper<span class="token punctuation">)</span> <span class="token punctuation">(</span>dynamic<span class="token punctuation">.</span>ResourceInterface<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> ri dynamic<span class="token punctuation">.</span>ResourceInterface</span>
<span class="line"></span>
<span class="line">    restMapping<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">mappingFor</span><span class="token punctuation">(</span>resourceOrKindArg<span class="token punctuation">,</span> restMapper<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to get RESTMapping for %s: %v&quot;</span><span class="token punctuation">,</span> resourceOrKindArg<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 判断资源是命名空间级别的还是集群级别的</span></span>
<span class="line">    <span class="token keyword">if</span> restMapping<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;namespace&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        ri <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span>restMapping<span class="token punctuation">.</span>Resource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Namespace</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        ri <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span>restMapping<span class="token punctuation">.</span>Resource<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> ri<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们利用动态客户端，可以通过 Create 可以创建资源，通过 Delete 可以删除资源，这都很简单了。比如创建这样写：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>ResourceService<span class="token punctuation">)</span> <span class="token function">CreateResource</span><span class="token punctuation">(</span>resourceOrKindArg <span class="token builtin">string</span><span class="token punctuation">,</span> ns <span class="token builtin">string</span><span class="token punctuation">,</span> yaml <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    obj <span class="token operator">:=</span> <span class="token operator">&amp;</span>unstructured<span class="token punctuation">.</span>Unstructured<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> scheme<span class="token punctuation">.</span>Codecs<span class="token punctuation">.</span><span class="token function">UniversalDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>yaml<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ri<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">getResourceInterface</span><span class="token punctuation">(</span>resourceOrKindArg<span class="token punctuation">,</span> ns<span class="token punctuation">,</span> r<span class="token punctuation">.</span>client<span class="token punctuation">,</span> r<span class="token punctuation">.</span>restMapper<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> ri<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> metav1<span class="token punctuation">.</span>CreateOptions<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们唯一需要关注的是 ri.Create 需要传入一个 obj，代表待创建的资源实体，它的类型是 *unstructured.Unstructured，通过源码可以看出，其本质就是一个 map[string]interface{}。</p><p><img src="https://static001.geekbang.org/resource/image/fa/02/faafeafd0a0fa232a6fc792a86249402.png?wh=1024x165" alt="图片"></p><p>那么如何将 string 类型的 yaml 转化成这种格式呢？scheme 包中给我们封装好了 Decode 函数，即代码第三行的 scheme.Codecs.UniversalDeserializer().Decode，直接调用即可完成转换。</p><p>创建和删除都清晰后，再顺便说一下验证操作。验证是很简单的，直接利用上面的 mappingFor 函数获取 GVR 即可。</p><p>最后我们沿着上一节课的课后思考题看一下查询如何写。上一节课最后，我说你可以思考一下如何将 restMapper 和 SharedInformerFactory 结合起来，实现根据 resource 或其他 kind 从 informer 中查询资源。</p><p>现在我们来一起做一下这个功能。</p><p>首先需要在 k8sconfig.go 中初始化 SharedInformerFactory，代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>k <span class="token operator">*</span>K8sConfig<span class="token punctuation">)</span> <span class="token function">InitInformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> informers<span class="token punctuation">.</span>SharedInformerFactory <span class="token punctuation">{</span></span>
<span class="line">    fact <span class="token operator">:=</span> informers<span class="token punctuation">.</span><span class="token function">NewSharedInformerFactory</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">InitClientSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//创建通用informer工厂</span></span>
<span class="line"></span>
<span class="line">    informer <span class="token operator">:=</span> fact<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    informer<span class="token punctuation">.</span><span class="token function">Informer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddEventHandler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cache<span class="token punctuation">.</span>ResourceEventHandlerFuncs<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    fact<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span></span>
<span class="line">    fact<span class="token punctuation">.</span><span class="token function">WaitForCacheSync</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> fact</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在初始化中创建监听 pods 的 informer。之后来写查询业务代码。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>ResourceService<span class="token punctuation">)</span> <span class="token function">ListResource</span><span class="token punctuation">(</span>resourceOrKindArg <span class="token builtin">string</span><span class="token punctuation">,</span> ns <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>runtime<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    restMapping<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">mappingFor</span><span class="token punctuation">(</span>resourceOrKindArg<span class="token punctuation">,</span> r<span class="token punctuation">.</span>restMapper<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    informer<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> r<span class="token punctuation">.</span>fact<span class="token punctuation">.</span><span class="token function">ForResource</span><span class="token punctuation">(</span>restMapping<span class="token punctuation">.</span>Resource<span class="token punctuation">)</span></span>
<span class="line">    list<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> informer<span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ByNamespace</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>labels<span class="token punctuation">.</span><span class="token function">Everything</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> list<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，先使用 mappingFor，获取 restMapping，restMapping.Resource 就是 GVR。之后通过 SharedInformerFactory 的 ForResource 方法获取监听的 informer，最后通过 informer 的 Lister 就能获取资源列表。</p><p>services 部分，我们就讲到这里，有了前面两节课的基础，理解这个代码还是很简单的。</p><h3 id="controllers" tabindex="-1"><a class="header-anchor" href="#controllers"><span>controllers</span></a></h3><p>最后来看一下，路由处理部分。路由处理代码在 resourceCtl.go 中，我依然使用了面向对象思想，创建了 ResourceCtl 以及构造函数。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">type</span> ResourceCtl <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    resourceService <span class="token operator">*</span>services<span class="token punctuation">.</span>ResourceService</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewResourceCtl</span><span class="token punctuation">(</span>service <span class="token operator">*</span>services<span class="token punctuation">.</span>ResourceService<span class="token punctuation">)</span> <span class="token operator">*</span>ResourceCtl <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ResourceCtl<span class="token punctuation">{</span>resourceService<span class="token punctuation">:</span> service<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 client-go 相关的业务代码，放在了 services 中，在路由处理函数中需要调用，因此我在 ResourceCtl 结构中添加了 resourceService 作为成员。</p><p>路由处理的逻辑很简单，我们看一下相对最复杂的创建处理逻辑的实现套路，学会了套路，查询和删除就不难了。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>ResourceCtl<span class="token punctuation">)</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> resource <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;resource&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        ns <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">&quot;ns&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">type</span> ResouceParam <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">            Yaml <span class="token builtin">string</span> <span class="token string">\`json:&quot;yaml&quot;\`</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">var</span> param ResouceParam</span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;解析请求体失败: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        err <span class="token operator">:=</span> r<span class="token punctuation">.</span>resourceService<span class="token punctuation">.</span><span class="token function">CreateResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> ns<span class="token punctuation">,</span> param<span class="token punctuation">.</span>Yaml<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;创建失败：&quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;创建成功&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 gin 在定义路由时，需要填写 func(c *gin.Context) 类型的回调函数，因此这里的 Create 方法的返回值就是 func(c *gin.Context)。代码的第 3 ～ 14 行做了对 HTTP Request 请求的参数解析工作。在 gin 中，使用 c.Param() 来解析路径参数；使用 c.DefaultQuery() 与 c.Query() 来解析查询参数，不同的是 c.DefaultQuery() 可以赋默认值；使用 c.ShouldBindJSON() 来解析 json 格式的 Body。</p><p>参数解析完成后， 调用 services 包的 CreateResource 方法处理具体业务逻辑。</p><h3 id="路由定义与启动" tabindex="-1"><a class="header-anchor" href="#路由定义与启动"><span>路由定义与启动</span></a></h3><p>全部业务代码完成后，就可以在 main.go 中定义路由以及启动服务器了。代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/:resource&quot;</span><span class="token punctuation">,</span> ctl<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">r<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">&quot;/:resource&quot;</span><span class="token punctuation">,</span> ctl<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/:resource&quot;</span><span class="token punctuation">,</span> ctl<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/get/gvr&quot;</span><span class="token punctuation">,</span> resourceCtl<span class="token punctuation">.</span><span class="token function">GetGVR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><p>我们将四条路由定义好，然后启动 gin server。</p><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>使用 Apifox 工具做一下测试。首先测试 pod 创建。</p><p><img src="https://static001.geekbang.org/resource/image/56/d1/56451ebed9350828ff85e84ceef39bd1.png?wh=1439x811" alt="图片"></p><p>我们在 body 中传入了一个 名字为 foo-app 的 pod 的 yaml 内容，点击发送后，返回创建成功。</p><p>之后测试 一下 pod 查询，验证刚才创建的 pod 是否存在。</p><p><img src="https://static001.geekbang.org/resource/image/5f/67/5f71455523eb49cbe9acbb9f7fb5ce67.png?wh=1105x749" alt="图片"></p><p>可以看到返回的 body 中含有 foo-app 这个 pod。</p><p>再测试一下 pod 删除，删除刚才创建的 pod。</p><p><img src="https://static001.geekbang.org/resource/image/23/c3/2326466cfc00f008509469ee19f85ac3.png?wh=1129x817" alt="图片"></p><p>返回删除成功。</p><p>最后测试一下验证 API。先输入一个正确的 resource，结果如下：</p><p><img src="https://static001.geekbang.org/resource/image/55/e1/5564a729084a81da9b2df40923c1c5e1.png?wh=1108x697" alt="图片"></p><p>再输入一个错误的 resource，结果如下：</p><p><img src="https://static001.geekbang.org/resource/image/70/34/706c4d79c50f38ecc8e702c8ded7e834.png?wh=1279x697" alt="图片"></p><p>OK，全部测试完毕。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这节课是对前两小节 client-go 知识的一个小的应用实战。我结合着 gin 框架，沿着前两小节的课后思考题，带你完成了创建、删除、查询 Kubernetes 资源以及验证用户输入四个 API 的编写，并做了测试。</p><p>在传统应用中，将后端业务封装成 API，可以实现前后端的解耦。而在 AI 时代，则可以实现与 Agent 的解耦，也就是说，Agent 不管是用 ReAct 还是用 ReWoo，是用 Go 语言还是用 Python 与 API 工具都没关系。再进一步，Agent 将会形成一个类似“网关”的效果，“网关”的后面是各种工具 API，而前端是一个能输入自然语言的界面，这个界面具体是使用 UI 还是命令行，是使用 Python、Java，还是 Go 实现，我们并不关心，只要它能和我们的 Agent 连接即可。</p><p>这些思路，我们会在后面的课程中，为你一步步展现。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>本节课的查询代码只能够查询到 pods 资源，查询其他资源会返回空。这是什么原因呢？如果我们要查询 deployments 该如何做？</p>`,87)]))}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/3.tech/84.AIAgent/08.Gin_client-go%E6%9E%84%E5%BB%BAAPI%E5%B7%A5%E5%85%B7.html","title":"Gin+client-go 构建 API 工具","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"Gin 简介","slug":"gin-简介","link":"#gin-简介","children":[]},{"level":2,"title":"代码讲解","slug":"代码讲解","link":"#代码讲解","children":[{"level":3,"title":"API 设计","slug":"api-设计","link":"#api-设计","children":[]},{"level":3,"title":"目录结构","slug":"目录结构","link":"#目录结构","children":[]},{"level":3,"title":"config","slug":"config","link":"#config","children":[]},{"level":3,"title":"services","slug":"services","link":"#services","children":[]},{"level":3,"title":"controllers","slug":"controllers","link":"#controllers","children":[]},{"level":3,"title":"路由定义与启动","slug":"路由定义与启动","link":"#路由定义与启动","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749263338000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":2,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"54e056ca3636342c7032df8e75b641675d3a3d76","time":1749263338000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update 20250607"},{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/08.Gin+client-go构建API工具.md"}');export{i as comp,u as data};
