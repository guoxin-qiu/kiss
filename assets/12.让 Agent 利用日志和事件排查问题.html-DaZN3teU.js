import{_ as s,c as a,b as e,o as p}from"./app-C01vnHKY.js";const t={};function l(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="让-agent-利用日志和事件排查问题" tabindex="-1"><a class="header-anchor" href="#让-agent-利用日志和事件排查问题"><span>让 Agent 利用日志和事件排查问题</span></a></h1><p>在上一节课我们是直接使用了 kubectl 作为工具，让 Agent 通过执行命令行的方式，帮我们解决运维问题。这种方法对于优秀的大模型来说，问题不大，因为它们已经熟练掌握了如何使用 kubectl ，以及如何根据 kubectl 的执行结果，分析问题。</p><p>但任何事物都有其两面性，这种方法虽然简单，但缺乏了一定的灵活性。比如，如果让 Agent 帮我们排查一个 pod 为什么起不来，Agent 可能会使用 kubectl get event 或者 kubectl describe pod xxx 来获取 pod 的事件。无论使用哪条命令，其中都会夹杂着一些无用信息，因为我们想要的只有 Type 是 Warning 的 Message。</p><p>这些无用信息一方面可能会影响大模型的理解，另一方面太多的信息会占用上下文窗口以及耗费更多的 token。因此本节课我们让 Agent 帮我们分析日志和事件的项目，与上一章一样，采用自己封装 API 的手法，从而达到工具返回的信息可筛选的目的。</p><h2 id="cobra-前端" tabindex="-1"><a class="header-anchor" href="#cobra-前端"><span>Cobra 前端</span></a></h2><p>为了和上一节课的手法区分开，我们来添加一条名字叫 analyze 的命令。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">cobra-cli add analyze</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>业务代码依然是在生成的 Run 方法中完成。</p><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具"><span>工具</span></a></h2><h3 id="eventtool" tabindex="-1"><a class="header-anchor" href="#eventtool"><span>EventTool</span></a></h3><p>我们在利用 Event 事件排查问题时，通常需要指定具体的命名空间下的 pod 名字。因此如果用户要通过自然语言让 Agent 帮助排查问题，其 prompt 可能会这么写：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">我的 default 命名空间下的名叫 xxx 的 pod 一直处于 CreateContainerConfigError 状态，请帮我排查一下是什么原因。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因此获取 Event 事件这条 API，可以这么设计：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">// 获取 Event</span>
<span class="line">GET http://&lt;host&gt;:&lt;port&gt;/pods/events?ns=&lt;pod 命名空间&gt;&amp;podname=&lt;pod 名称&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们来做一下代码实现。代码我是在第 8 节课的基础上增加的接口，因此代码目录与第 8 节课的一致，仅仅是在 services 目录下新增了 podLogEventService.go，在 controllers 目录下新增了 podLogEventCtl.go，以及最后在 main.go 中增加了路由。</p><p>我们先来看一下 service 部分。service 部分的代码是使用 client-go 与 K8s 交互的代码。由于 Event 不是一个经常被查询的资源，因此在本节课，我就不使用 informer 机制了，而是直接使用 clientSet 来获取 Event，代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>PodLogEventService<span class="token punctuation">)</span> <span class="token function">GetEvents</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> podname <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    events<span class="token punctuation">,</span> err <span class="token operator">:=</span> this<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">CoreV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Events</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metav1<span class="token punctuation">.</span>ListOptions<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to list events: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> podEvents <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> event <span class="token operator">:=</span> <span class="token keyword">range</span> events<span class="token punctuation">.</span>Items <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> event<span class="token punctuation">.</span>InvolvedObject<span class="token punctuation">.</span>Kind <span class="token operator">==</span> <span class="token string">&quot;Pod&quot;</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>InvolvedObject<span class="token punctuation">.</span>Name <span class="token operator">==</span> podname <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">&quot;Warning&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">            podEvents <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>podEvents<span class="token punctuation">,</span> event<span class="token punctuation">.</span>Message<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> podEvents<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码首先在第二行使用 clientSet 获取到了日志，其效果等同于执行 kubectl get event。之后在第 8 ～ 12 行做了两件事，一是进行事件过滤，过滤出类型是 Pod，名字是传入的 podname，类型是 Warning 的日志。二是只取出 Message 字段放入到字符串数组中，这样就可以大大减少返回的 Event 数量。</p><p>之后我们来看一下 controllers 的代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>PodLogEventCtl<span class="token punctuation">)</span> <span class="token function">GetEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        ns <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">&quot;ns&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        podname <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">&quot;podname&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        e<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>podLogEventService<span class="token punctuation">.</span><span class="token function">GetEvents</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> podname<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span></span>
<span class="line">                <span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> e<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码很简单，通过 DefaultQuery 拿到 url 参数，并设置了默认值，防止用户不传，导致查询 Event 失败。最后将结果以 json 格式返回给前端。</p><p>我们做一个简单测试，看一下效果。</p><p><img src="https://static001.geekbang.org/resource/image/e1/b6/e10f5558eed811a6fbea719f3b79c9b6.png?wh=908x179" alt="图片"></p><p>结果符合预期。</p><p>最后是在 k8sCheck 项目中进行工具描述以及工具执行部分的编写。工具描述部分的代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">NewEventTool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>EventTool <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>EventTool<span class="token punctuation">{</span></span>
<span class="line">        Name<span class="token punctuation">:</span>        <span class="token string">&quot;EventTool&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Description<span class="token punctuation">:</span> <span class="token string">&quot;用于查看 k8s pod 的 event 事件&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        ArgsSchema<span class="token punctuation">:</span>  <span class="token string">\`{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;podName&quot;:{&quot;type&quot;:&quot;string&quot;, &quot;description&quot;: &quot;指定的 pod 名称&quot;}, &quot;namespace&quot;:{&quot;type&quot;:&quot;string&quot;, &quot;description&quot;: &quot;指定的 k8s 命名空间&quot;}}\`</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工具描述简单粗暴，参数也是根据 Event API 需要的参数来设计的。工具执行部分就是拼凑 url 然后使用标准 HTTP GET 来执行，与前面课程讲述的一致，不再赘述。到此就完成了 EventTool 的设计和实现。</p><h3 id="logtool" tabindex="-1"><a class="header-anchor" href="#logtool"><span>LogTool</span></a></h3><p>接下来看看日志工具的编写。我们在查询日志时，使用的命令是 <code>kubectl logs &lt;pod 名称&gt; -n &lt;命名空间&gt;</code>，当然如果在一个 pod 中有多个容器，还需要加 -c 参数执行容器名称，本节课为了演示简单，就只考虑一个 pod 只有一个容器的情况。</p><p>既然用 kubectl 需要 pod 名称和命名空间，那使用 client-go 就也需要这两个参数，因此 API 可以这么设计。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">// 获取 Log</span>
<span class="line">GET http://&lt;host&gt;:&lt;port&gt;/pods/logs?ns=&lt;pod 命名空间&gt;&amp;podname=&lt;pod 名称&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码结构在 EventTool 工具中已经介绍了，在这里直接看代码。首先是 services 部分：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>PodLogEventService<span class="token punctuation">)</span> <span class="token function">GetLogs</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> podname <span class="token builtin">string</span><span class="token punctuation">,</span> tailLine <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>rest<span class="token punctuation">.</span>Request <span class="token punctuation">{</span></span>
<span class="line">    req <span class="token operator">:=</span> this<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">CoreV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetLogs</span><span class="token punctuation">(</span>podname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">.</span>PodLogOptions<span class="token punctuation">{</span>Follow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> TailLines<span class="token punctuation">:</span> <span class="token operator">&amp;</span>tailLine<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> req</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码很好懂，使用 clientSet 获取日志，其中关键是 Follow 和 TailLines 这两个参数。</p><p>Follow 表示是否持续获取日志，如果设置为 true，效果等同于 kubectl logs 命令加 -f 参数的效果。在传统的 K8s 管理系统项目中，通常会使用 -f 的效果，配合一个 HTTP 长连接做到持续刷新日志的效果。但对于我们这个项目，Agent 获取日志是一个一次性事件，无需持续获取日志，将 Follow 置为 false 即可。</p><p>TailLines 参数表示获取近 xx 行的日志，例如 TailLines 是 100，则表示获取近 100 行的日志，这样可以控制返回的日志量，防止挤爆大模型的上下文窗口。</p><p>接下来我们来编写 controllers 部分。你可以看一下对应的代码。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>PodLogEventCtl<span class="token punctuation">)</span> <span class="token function">GetLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        ns <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">&quot;ns&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        podname <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">&quot;podname&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">var</span> tailLine <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"></span>
<span class="line">        req <span class="token operator">:=</span> p<span class="token punctuation">.</span>podLogEventService<span class="token punctuation">.</span><span class="token function">GetLogs</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> podname<span class="token punctuation">,</span> tailLine<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        rc<span class="token punctuation">,</span> err <span class="token operator">:=</span> req<span class="token punctuation">.</span><span class="token function">Stream</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span></span>
<span class="line">                <span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">defer</span> rc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        logData<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>rc<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span></span>
<span class="line">                <span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>logData<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该代码的整体效果是一次性获取 100 行日志，之后读取出来后，返回给客户端。</p><p>简单测试一下效果：</p><p><img src="https://static001.geekbang.org/resource/image/b1/a3/b15f52d062e7f6096b5530a3d5a245a3.png?wh=1891x172" alt="图片"></p><p>可以看到日志显示出来了。</p><p>最后是 LogTool 的工具描述部分，依然是简单粗暴：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">NewLogTool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>LogTool <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>LogTool<span class="token punctuation">{</span></span>
<span class="line">        Name<span class="token punctuation">:</span>        <span class="token string">&quot;LogTool&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Description<span class="token punctuation">:</span> <span class="token string">&quot;用于查看 k8s pod 的 log 日志&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        ArgsSchema<span class="token punctuation">:</span>  <span class="token string">\`{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;podName&quot;:{&quot;type&quot;:&quot;string&quot;, &quot;description&quot;: &quot;指定的 pod 名称&quot;}, &quot;namespace&quot;:{&quot;type&quot;:&quot;string&quot;, &quot;description&quot;: &quot;指定的 k8s 命名空间&quot;}}\`</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，两个工具就全做好了。接下来就可以进入到测试环节了。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><h3 id="event-测试" tabindex="-1"><a class="header-anchor" href="#event-测试"><span>Event 测试</span></a></h3><p>首先是 Event 测试，我们需要制造一个含有 Warning 类型的 Event 事件的 Pod。我使用的方法是给 Pod 挂载一个 configmap，引用一个不存在的键 non_existent_key，下面是具体的 YAML。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> complex<span class="token punctuation">-</span>faulty<span class="token punctuation">-</span>pod</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">containers</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> faulty<span class="token punctuation">-</span>container</span>
<span class="line">      <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.1ms.run/nginx<span class="token punctuation">:</span><span class="token number">1.18</span></span>
<span class="line">      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;/bin/sh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;while true; do echo &#39;Running...&#39;; sleep 10; done&quot;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FAULTY_ENV</span>
<span class="line">          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span></span>
<span class="line">              <span class="token key atrule">name</span><span class="token punctuation">:</span> faulty<span class="token punctuation">-</span>configmap</span>
<span class="line">              <span class="token key atrule">key</span><span class="token punctuation">:</span> non_existent_key</span>
<span class="line">      <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></span>
<span class="line">      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> faulty<span class="token punctuation">-</span>volume</span>
<span class="line">          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data</span>
<span class="line">  <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> faulty<span class="token punctuation">-</span>volume</span>
<span class="line">      <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">---</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> faulty<span class="token punctuation">-</span>configmap</span>
<span class="line"><span class="token key atrule">data</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">existing_key</span><span class="token punctuation">:</span> <span class="token string">&#39;value&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样这个 Pod 会一直处于 CreateContainerConfigError 状态，并且会产生 Warning 事件。</p><p><img src="https://static001.geekbang.org/resource/image/1f/ab/1fac49b26761875d549d6ff153c45dab.png?wh=908x179" alt="图片"></p><p>我们来测试一下 Agent 是如何调用 EventTool 以及给出分析的，下面是对应的 prompt。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">我的k8s集群的default NS 下的名叫complex-faulty-pod 的 pod 起不来，帮我看看是什么原因</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一轮问答结果：</p><p><img src="https://static001.geekbang.org/resource/image/f9/5f/f97fc56d3fa1ea3d4acf2f51061yy85f.png?wh=1189x483" alt="图片"></p><p>可以看到 Agent 已经拿到了 Event 日志。</p><p>第二轮问答结果：</p><p><img src="https://static001.geekbang.org/resource/image/75/18/754501e905c81c442b052c8fefba2218.png?wh=1408x503" alt="图片"></p><p>Agent 通过分析 Event，给出了问题原因和解决步骤。这个步骤是可行的。</p><h3 id="log-测试" tabindex="-1"><a class="header-anchor" href="#log-测试"><span>Log 测试</span></a></h3><p>接下来测试一下分析日志的效果。我们造一个能输出错误日志的例子。</p><p>本节课使用的 ginTools 代码，一直以来都是使用了本地的 kubeconfig 文件来访问 K8s 的。但如果将其打包成 docker 镜像，然后以 pod 形式部署到 K8s 上，就会报找不到 kubeconfig 文件的错误。通常的解决方案是，用 incluster 模式初始化客户端，然后在 pod 上设置一个 ServiceAccount 来提供账户服务。你可以看一下具体的代码。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>k <span class="token operator">*</span>K8sConfig<span class="token punctuation">)</span> <span class="token function">InitConfigInCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>K8sConfig <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 加载 in-cluster 配置</span></span>
<span class="line">    config<span class="token punctuation">,</span> err <span class="token operator">:=</span> rest<span class="token punctuation">.</span><span class="token function">InClusterConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        k<span class="token punctuation">.</span>e <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">Wrap</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;k8s config is nil&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;init k8s client failed&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    k<span class="token punctuation">.</span>Config <span class="token operator">=</span> config</span>
<span class="line">    <span class="token keyword">return</span> k</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dockerfile 文件：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">FROM golang:1.22.9-alpine AS builder</span>
<span class="line"></span>
<span class="line">WORKDIR /workspace</span>
<span class="line"></span>
<span class="line"># Copy the Go Modules manifests</span>
<span class="line">COPY go.mod go.mod</span>
<span class="line">COPY go.sum go.sum</span>
<span class="line"># Cache deps before building and copying source so that we don&#39;t need to re-download as much</span>
<span class="line"># and so that source changes don&#39;t invalidate our downloaded layer</span>
<span class="line">ENV GOPROXY=https://goproxy.cn,direct GO111MODULE=on</span>
<span class="line">RUN go mod download</span>
<span class="line"></span>
<span class="line"># Copy the go source code</span>
<span class="line">COPY main.go main.go</span>
<span class="line">COPY pkg/ pkg/</span>
<span class="line"></span>
<span class="line"># Build</span>
<span class="line">RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on go build -a -o /usr/bin/test main.go</span>
<span class="line"></span>
<span class="line">FROM scratch</span>
<span class="line">WORKDIR /</span>
<span class="line">COPY --from=builder /usr/bin/test .</span>
<span class="line"></span>
<span class="line">ENTRYPOINT [&quot;/test&quot;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pod 部署 YAML：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">apiVersion: v1</span>
<span class="line">kind: Pod</span>
<span class="line">metadata:</span>
<span class="line">  name: client-go-example</span>
<span class="line">spec:</span>
<span class="line">  serviceAccountName: default</span>
<span class="line">  containers:</span>
<span class="line">  - name: example</span>
<span class="line">    image: registry.cn-hangzhou.aliyuncs.com/aitools/client-go-example:v1.0</span>
<span class="line">    imagePullPolicy: IfNotPresent</span>
<span class="line">    ports:</span>
<span class="line">    - containerPort: 8080</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 pod 内的 ginTool 能否有权限访问 K8s，就取决于配置的 default 这个账户的具体权限了。这里我故意设置一个没有权限的 default 账户，因此当这个 pod 运行起来后，会有错误日志输出。</p><p><img src="https://static001.geekbang.org/resource/image/87/24/87a00854bb88ac96f1ff32d8a245c924.png?wh=1915x453" alt="图片"></p><p>我们用 Agent 测试一下效果。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">在default NS 下有一个名叫client-go-example 的pod 处于running状态，但程序无法运行，帮我分析一下原因</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一轮问答效果：</p><p><img src="https://static001.geekbang.org/resource/image/36/08/36048848d5bf4edd3414db1d2a6c4b08.png?wh=1382x671" alt="图片"></p><p>可以看到 Agent 调用 LogTool 拿到了日志。</p><p>第二轮问答效果：</p><p><img src="https://static001.geekbang.org/resource/image/f0/a5/f0485fa238a3a6c3bf26e76c19fb8fa5.png?wh=1404x565" alt="图片"><img src="https://static001.geekbang.org/resource/image/yy/1f/yy4f9df45049c309a616bb0bf434571f.png?wh=1398x433" alt="图片"><img src="https://static001.geekbang.org/resource/image/e3/91/e39387970df54981bb614968118d1691.png?wh=1408x457" alt="图片"></p><p>可以看到 Agent 分析出了是权限问题导致的，并给出了解决方案，方案是可行的。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在这一节课中，我向你展示了如何通过 client-go 抓取 Kubernetes 的日志和事件，并结合 Agent 进行分析，从而自动给出解决方案。相关的代码已经上传到 GitHub，由于本次修改了 ginTool 和 k8sCheck 两个工程，因此会有两个下载链接：</p><ul><li><p><a href="https://github.com/xingyunyang01/Geek/tree/main/k8sCheck" target="_blank" rel="noopener noreferrer">https://github.com/xingyunyang01/Geek/tree/main/k8sCheck</a></p></li><li><p><a href="https://github.com/xingyunyang01/Geek/tree/main/ginTools" target="_blank" rel="noopener noreferrer">https://github.com/xingyunyang01/Geek/tree/main/ginTools</a></p></li></ul><p>这节课是我们整个“Agent + K8s 运维级开发”系列课程的最后一课。在这一个大篇章中，我们从设计的角度出发，详细列出了需要掌握的关键知识点，复习和深化了云原生 Kubernetes 的相关内容，同时也补充了 AI 开发的一些实用技巧和套路。最后，我们通过几个小项目的实践，帮助你更好地理解和应用这些知识。</p><p>相信如果你从第一章的“Agent 原理”一路跟随我们的步伐，那么在这一课的学习中，应该会有一种一点就透，一通百通的感觉。其实，AI 应用开发并不复杂，更多的是套路和思维方式。尤其是在如今，国内外涌现了许多优秀的编码 Copilot 工具，比如 Cursor 和 通义灵码等，这些工具完全可以用来处理云原生领域的业务代码，开发者只需专注于架构设计和代码审核。AI 时代的“内卷”，将是一场“思维的竞赛”。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>Agent 在调用工具解决问题的过程中，会根据工具的回复结果决定要多少轮对话才能得到“Final Answer”。那如果工具不给力，导致一直得不到“Final Answer”，就会陷入到死循环中。我们该如何处理这种情况呢？</p>`,84)]))}const c=s(t,[["render",l]]),u=JSON.parse('{"path":"/3.tech/84.AIAgent/12.%E8%AE%A9%20Agent%20%E5%88%A9%E7%94%A8%E6%97%A5%E5%BF%97%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8E%92%E6%9F%A5%E9%97%AE%E9%A2%98.html","title":"让 Agent 利用日志和事件排查问题","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"Cobra 前端","slug":"cobra-前端","link":"#cobra-前端","children":[]},{"level":2,"title":"工具","slug":"工具","link":"#工具","children":[{"level":3,"title":"EventTool","slug":"eventtool","link":"#eventtool","children":[]},{"level":3,"title":"LogTool","slug":"logtool","link":"#logtool","children":[]}]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[{"level":3,"title":"Event 测试","slug":"event-测试","link":"#event-测试","children":[]},{"level":3,"title":"Log 测试","slug":"log-测试","link":"#log-测试","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/12.让 Agent 利用日志和事件排查问题.md"}');export{c as comp,u as data};
