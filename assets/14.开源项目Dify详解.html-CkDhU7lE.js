import{_ as s,c as a,b as e,o as p}from"./app-C01vnHKY.js";const i={};function t(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="开源项目-dify-详解" tabindex="-1"><a class="header-anchor" href="#开源项目-dify-详解"><span>开源项目 Dify 详解</span></a></h1><p>上节课，我为你介绍了行业龙头 OpenAI 公司为了让大模型具备与外界环境交互的能力，而发明的 Actions。并展示了如何使用内嵌了 Actions 的 GPTs 开发平台，来快速构建一个定制化的 ChatGPT 应用的过程。相信你对于其产品设计思路也有了一个清晰的认识。</p><p>那我们知道，汽车有国产品牌也有进口品牌，API Agent 也是一样。这节课我们就以国产开源项目 Dify 为例，看一下 GPTs 这种零代码实现 Agent 的思路，在 Dify 上又是如何做的。</p><h2 id="dify-是什么" tabindex="-1"><a class="header-anchor" href="#dify-是什么"><span>Dify 是什么？</span></a></h2><p>我们先来了解一下 Dify 是什么。很多公司和团队在做 AI 应用开发时，会使用纯编码的方式去做，例如使用 LangChain 等框架；但还有一些公司，会基于已有的平台，做一些配置化，二开或者插件的形式来完成 AI 应用开发，Dify 就是用来做这些事的平台。</p><p>Dify 的中文使用手册的地址在这儿——<a href="https://docs.dify.ai/zh-hans" target="_blank" rel="noopener noreferrer">欢迎使用 Dify</a>，它提供了从 Agent 构建到 AI WorkFlow 编排、RAG 检索、模型管理等能力，使用 Dify 可以轻松构建和运营生成式 AI 原生应用。</p><h2 id="dify-环境搭建" tabindex="-1"><a class="header-anchor" href="#dify-环境搭建"><span>Dify 环境搭建</span></a></h2><p>那简单了解了 Dify 是什么之后，接下来，我们需要将 Dify 环境搭建起来，试用一下，从而直观感受其功能。Dify 的安装方式有好几种，其中最快捷方便测试的，就是在 Linux 服务器上使用 docker-compose 来直接启动。</p><p>首先，我们打开 Dify 的 <a href="https://github.com/langgenius/dify" target="_blank" rel="noopener noreferrer">GitHub 地址</a>，将源码下载下来，在这里我使用的版本是 0.13.2。下载下来之后，我们进入到 dify-0.13.2 文件夹的 docker 文件夹中，启动文件 docker-compose.yaml，就在该文件夹中存放。通过查阅这个文件，可以看到它会拉起很多容器，其中就包括 Nginx。</p><p><img src="https://static001.geekbang.org/resource/image/cy/8a/cyy0e87b41ce2164c5ac81e6b97dba8a.png?wh=678x76" alt="图片"></p><p>如图所示，Nginx 的暴露端口是可以改动的，如果你的 Linux 服务器的 80 端口被占用了，可以将 EXPOSE_NGINX_PORT 后面的 80 改成其他的端口。除此之外，无需进行其他修改。</p><p>执行以下命令就可以开始自动部署：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line"> docker compose up -d</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>完成后执行以下命令查看是否容器都已成功拉起：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">docker ps</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果看到下图所示的这些容器，就代表已安装成功。</p><p><img src="https://static001.geekbang.org/resource/image/19/d5/1960fc1ab334029842f5f6f24dc47cd5.png?wh=1911x487" alt="图片"></p><p>在安装完成后，首次登陆需要设置管理员账户，可在浏览器输入 http://&lt;your_server_ip&gt;/install，进入设置页。在这里我推荐使用 360 极速浏览器 X，使用 Edge、Chrome 等浏览器可能会打不开。</p><p><img src="https://static001.geekbang.org/resource/image/fb/46/fb04dac83a729676d740603d9a6c4d46.png?wh=977x848" alt="图片"></p><p>在注册完成后，会跳转到工作室的页面，这时候就可以体验 Dify 的功能了。</p><p><img src="https://static001.geekbang.org/resource/image/80/9d/804d1f19dbb6a5cfd10be540e7fb8d9d.png?wh=1329x547" alt="图片"></p><p>Dify 作为一个 AI 应用开发平台，功能还是非常全面的。首先是涵盖了 Agent 和知识库（RAG）两大 AI 热门应用点，在此基础上还有工作流的功能，适用于复杂应用逻辑场景下的低代码编排。接下来，我们使用它的 Agent 功能构建一个地图应用，看一下它是怎么做的。</p><h2 id="使用-agent-构建地图助手" tabindex="-1"><a class="header-anchor" href="#使用-agent-构建地图助手"><span>使用 Agent 构建地图助手</span></a></h2><p>Dify 的 Agent，支持 Function Calling 与 ReAct 两种模式，这样可以做得比较通用化，使得任意大模型都可以使用 Agent 能力。在这里，我们先不用关心具体的推理方案，而是着重看一下其零代码制作 Agent 应用的产品设计思路。</p><p>在使用 Agent 服务之前，要先设置一下要使用什么大模型。设置的路径如下图所示：</p><p><img src="https://static001.geekbang.org/resource/image/27/f5/2736f5c34865bc138059381733599ff5.png?wh=454x400" alt="图片"></p><p><img src="https://static001.geekbang.org/resource/image/6d/ed/6d387f48e8297249761a4037686901ed.png?wh=1495x609" alt="图片"></p><p>点开设置-模型供应商后，可以看到 Dify 支持了非常多的模型供应商，非常方便。在这里我使用的是通义千问，你可以根据自己的情况去选择合适的模型。</p><p><img src="https://static001.geekbang.org/resource/image/be/ec/be22b9de8da769067c25bb8df787acec.png?wh=1080x733" alt="图片"></p><p>完成模型设置后，点击创建空白应用，选择 Agent，此时可以输入名称和描述，点击创建按钮，进入到 Agent 应用配置页面。</p><p><img src="https://static001.geekbang.org/resource/image/62/8b/62cd63d30d8fce40b77a0be276a6878b.png?wh=1920x814" alt="图片"></p><p>在这个页面可以填写提示词，也就是为我们的自定义应用赋一个人设。之后可以通过添加工具，为 Agent 赋予与外部环境沟通的能力。</p><p><img src="https://static001.geekbang.org/resource/image/09/b6/09c1fb716285676d26ce183dfd2fbcb6.png?wh=805x864" alt="图片"></p><p>在工具添加页面，可以看到 Dify 已经内置了非常多工具了，这些我们可以直接用，也可以创建自定义工具。我们还是以上一节课中高德地图的两个工具为例，来看一下 Dify 的工具配置页面的设计思路。</p><p><img src="https://static001.geekbang.org/resource/image/84/59/84247323db1879f682c2f373e478f559.png?wh=812x942" alt="图片"></p><p><img src="https://static001.geekbang.org/resource/image/13/6c/1326927bf5b9e7f82933b6198e135b6c.png?wh=665x660" alt="图片"></p><p>可以看到它也是通过 OpenAPI 文档来进行工具配置，在 API 的识别、测试、鉴权等方面与 GPTs 是基本一致的，这也说明了业界对于 GPTs 这种 API Agent 标准的认可。</p><p>最后我们在调试窗口测试一下效果，如下图所示，可以看到 Agent 调用了我们的两个工具，输出了正确的结果。</p><p><img src="https://static001.geekbang.org/resource/image/cd/f5/cdd119ff1cfc83449039dyy95067b8f5.png?wh=1788x617" alt="图片"></p><p>之后点击发布，这个应用就被保存了，以后可以在探索页面找到这个应用，直接进行对话。</p><p><img src="https://static001.geekbang.org/resource/image/87/25/87f1a88b2b2e46e2f2da602903d2bd25.png?wh=1019x562" alt="图片"></p><h2 id="多种发布方式" tabindex="-1"><a class="header-anchor" href="#多种发布方式"><span>多种发布方式</span></a></h2><p>除了这种发布应用的方式外，Dify 还提供了三种我认为非常有用的方式。第一种是 iframe 嵌入网站，第二种是通过 API 访问，第三种是使用 SDK。</p><h3 id="嵌入网站" tabindex="-1"><a class="header-anchor" href="#嵌入网站"><span>嵌入网站</span></a></h3><p>其中嵌入网站有三种方式，分别是全屏嵌入、气泡嵌入以及以 Chrome 浏览器插件的方式嵌入。</p><p>气泡嵌入很有意思，比如有时我们在浏览一些网页，例如极客时间的某训练营，在右边会有一个联系客服之类的气泡，点击就可以与在线客服对话。</p><p><img src="https://static001.geekbang.org/resource/image/d5/29/d52f197d60401549d1d00232884c2c29.png?wh=756x859" alt="图片"></p><p>Dify 提供了一段嵌入代码，我们只需要粘贴到前端的 HTML 中，就可以出现这样的效果。这个功能让我们能够以非常低的成本，快速为网站集成客服问答助手等智能应用，而且当后端的 AI 应用的数据、功能等发生变更时，对于前端来说，也是完全无感知的，非常方便。</p><h3 id="访问-api" tabindex="-1"><a class="header-anchor" href="#访问-api"><span>访问 API</span></a></h3><p>我们再来看一下访问 API 方式。Dify 提供了如下图所示的一系列的标准 API 文档，覆盖了与大模型应用对话的全部功能，用户只需要针对每一个应用拿到对应的 API key，就可以通过 API 与应用进行交互。</p><p><img src="https://static001.geekbang.org/resource/image/73/81/736d104a1918f559de43b41dca9bfc81.png?wh=1499x764" alt="图片"></p><p>我们以刚刚构建的地图助手为例，测试一下这种方式。首先点击右上角的 API 密钥，获取地图助手的 API Key。之后通过 curl 命令来使用对话 API 发送一条对话消息：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">curl -X POST &#39;http://&lt;your_server_ip&gt;/v1/chat-messages&#39; \\</span>
<span class="line">--header &#39;Authorization: Bearer &lt;your_api_key&gt;&#39; \\</span>
<span class="line">--header &#39;Content-Type: application/json&#39; \\</span>
<span class="line">--data-raw &#39;{</span>
<span class="line">    &quot;inputs&quot;: {},</span>
<span class="line">    &quot;query&quot;: &quot;济南市泉城广场附近有什么电影院？&quot;,</span>
<span class="line">    &quot;response_mode&quot;: &quot;streaming&quot;,</span>
<span class="line">    &quot;conversation_id&quot;: &quot;&quot;,</span>
<span class="line">    &quot;user&quot;: &quot;xingyy8&quot;</span>
<span class="line">}&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>&lt;your_server_ip&gt;</code> 就是 Dfiy nginx 组件的访问 IP，端口默认是 80，假如在最开始，你把 Nginx 的暴露端口改为了 10080，那么此时就需要写成 <code>&lt;your_server_ip&gt;:10080</code> 的形式。另外，参数 response_mode 设置成了该对话采用的是流式模式。稍等片刻后会得到一段以流式形式返回的 HTTP Response。</p><p><img src="https://static001.geekbang.org/resource/image/de/f7/de1af14ec273e4a58e51b5d18f5b61f7.png?wh=1875x436" alt="图片"></p><p>这里的 response 做了 Encode，所有的中文以及特殊字符等都被编码成了类似 \\u98ce\\ 这样的格式，因此可能肉眼看上去有点眼花看不懂。在实际业务中，通常是需要做一下 Decode 操作的。</p><h3 id="sdk" tabindex="-1"><a class="header-anchor" href="#sdk"><span>SDK</span></a></h3><p>除了直接调用 API 的方式，Dify 还提供了 SDK，可以帮我们省去写 HTTP 代码的麻烦。SDK 位于 Dify 源码的 sdks 文件夹下，目前包含 nodejs、php、python 三种语言。</p><p>我们以 python client 为例，做一下简单测试。首先安装 sdk：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">pip install dify-client</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>之后编写代码如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> json</span>
<span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">from</span> dify_client <span class="token keyword">import</span> ChatClient</span>
<span class="line"></span>
<span class="line">api_key <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&#39;dify&#39;</span><span class="token punctuation">)</span></span>
<span class="line">base_url <span class="token operator">=</span> <span class="token string">&quot;http://116.153.87.224:10080/v1&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Initialize ChatClient</span></span>
<span class="line">chat_client <span class="token operator">=</span> ChatClient<span class="token punctuation">(</span>api_key<span class="token punctuation">)</span></span>
<span class="line">chat_client<span class="token punctuation">.</span>base_url <span class="token operator">=</span> base_url</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create Chat Message using ChatClient</span></span>
<span class="line">chat_response <span class="token operator">=</span> chat_client<span class="token punctuation">.</span>create_chat_message<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                                                query<span class="token operator">=</span><span class="token string">&quot;济南市恒隆广场附近有什么电影院？&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                                user<span class="token operator">=</span><span class="token string">&quot;user_id&quot;</span><span class="token punctuation">,</span> response_mode<span class="token operator">=</span><span class="token string">&quot;streaming&quot;</span><span class="token punctuation">)</span></span>
<span class="line">chat_response<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> line <span class="token keyword">in</span> chat_response<span class="token punctuation">.</span>iter_lines<span class="token punctuation">(</span>decode_unicode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    line <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;data:&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">if</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        line <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;answer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，从环境变量中读取 API Key，这是因为我已经提前将地图助手的 API Key 放到我的环境变量中了。之后还要设置 base_url 为你的 Dify 服务地址。之后在初始化 client 后可以直接通过 create_chat_message 与地图助手对话。由于对话采用流式模式，因此最后需要循环解析返回的内容，并打印出来。注意一点，在第 18 行，设置了 decode_unicode 为 True，这就是前面我说到的需要对返回内容做 Decode 操作。</p><p>看一下效果：</p><p><img src="https://static001.geekbang.org/resource/image/29/2e/29ca721d2a39d89d11cd2192188f772e.png?wh=1260x579" alt="图片"></p><p>可以看到返回结果是以流的形式一点一点给我们的。</p><p>最后，我用一张图简化一下用 API 或 SDK 访问 Agent 应用的架构。</p><p><img src="https://static001.geekbang.org/resource/image/05/63/0533e86952dcea3b27a686a6ccff5b63.jpg?wh=1176x1228" alt="图片"></p><p>Dify 用 Nginx 反代了外部的所有 HTTP 请求，并通过 Header 中的 API Key 来决定要访问哪一个 Agent 应用。这其实是有了一点 AI 网关的味道了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>今天这节课，我们介绍了国产 GPTs —— Dify 平台，并带你一起进行了 docker compose 的环境搭建，并试用了其 Agent 功能，成功复现了上一节课地图助手的功能。</p><p>不得不说，就像同等价位的汽车，通常国产的要比进口车的内饰、功能等更加豪华一样。Dify 平台这台“国产车”也确实很豪华，其不仅对标了 GPTs 的功能，并且还提供了多种发布方式以及工作流、RAG 等功能，结合 Agent，我们可以实现更丰富的玩法。</p><p>对于许多企业来说，员工大多都是熟悉传统业务和技术的人员，对于 AI 开发可能一时难以快速上手。但如何让企业的产品快速接入 AI 能力呢？这类 API Agent 就非常合适。研发人员可以将老业务中的 API 抽离出来作为工具，通过这种零代码配置或者拖拉拽工作流的方式，快速构建 AI 应用。而 Dify 提供的嵌入网站以及 API 等发布方式，也可以方便快捷地将 AI 应用对接到企业前端门户网站或产品客户端等，同时实现对于后端基础大模型的良好封装和私有数据的保护。当后端应用有改动时，前端也可以实时生效。</p><p>那么在连续试驾了“进口车” GPTs 以及“国产车” Dify 之后，相信你对于此类产品设计思路已经有了一个很清晰的认识。那么下节课，我们就来扒一扒 Dify 的 Agent 到底是如何实现的，从而为之后我们模仿着做一个 Go 语言版本的 API Agent 打下基础。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>工具再好，也终究要落地到实际业务上，我们这个课程的业务就是云原生 K8s。因此你可以用 Dify 配一下之前我们写过的操控运维 K8s 的 Tool，来试试效果。</p>`,76)]))}const o=s(i,[["render",t]]),r=JSON.parse('{"path":"/3.tech/84.AIAgent/14.%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AEDify%E8%AF%A6%E8%A7%A3.html","title":"开源项目 Dify 详解","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"Dify 是什么？","slug":"dify-是什么","link":"#dify-是什么","children":[]},{"level":2,"title":"Dify 环境搭建","slug":"dify-环境搭建","link":"#dify-环境搭建","children":[]},{"level":2,"title":"使用 Agent 构建地图助手","slug":"使用-agent-构建地图助手","link":"#使用-agent-构建地图助手","children":[]},{"level":2,"title":"多种发布方式","slug":"多种发布方式","link":"#多种发布方式","children":[{"level":3,"title":"嵌入网站","slug":"嵌入网站","link":"#嵌入网站","children":[]},{"level":3,"title":"访问 API","slug":"访问-api","link":"#访问-api","children":[]},{"level":3,"title":"SDK","slug":"sdk","link":"#sdk","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/14.开源项目Dify详解.md"}');export{o as comp,r as data};
