import{_ as s,c as a,b as e,o as p}from"./app-C01vnHKY.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="让-agent-联网以及利用-kubectl-排查问题" tabindex="-1"><a class="header-anchor" href="#让-agent-联网以及利用-kubectl-排查问题"><span>让 Agent 联网以及利用 kubectl 排查问题</span></a></h1><p>在上一章节，我带你深入实践了 AI + 云原生的第一个实战项目，用自然语言操控 K8s。该项目相比传统的 K8s 管理系统而言，最大的变化就是前端从命令行或网页页面按钮等变成了聊天界面。而带来的好处除了显而易见的无需记忆复杂命令行或者摒弃复杂的界面操作外，还有一点就是让内容的呈现变得智能化。</p><p>在传统的 K8s 管理系统中，呈现的数据内容与格式都是固定的，例如 Pod 资源有很多字段，但在前端上，通常会选取部分字段做展示。如果某一天需求变更，需要修改格式或者变更字段，则前后端代码都得修改。而自然语言前端就不一样了，用户想要什么字段，完全是看 prompt 如何编写，非常灵活。</p><p>OK，以上是对上一章节的一个简单回顾。这一章我们将会花两个课时的时间继续沿着这个主题进行实践，会把重点放在让 AI 辅助人类解决 K8s 运维问题上。第一节课，我们先简单一点，不写任何 API，而是用 kubectl 当工具来分析问题。而第二节课，我们将尝试进行日志和事件的分析。</p><p>首先，我们先来做个测试，看看通义千问大模型到底会不会使用 kubectl。你可以看一下设计的 prompt。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">SYSTEM</span>
<span class="line">你是一个K8s运维专家，请使用kubectl工具来一步步的思考帮我解决运维问题。</span>
<span class="line"></span>
<span class="line">#Guidelines</span>
<span class="line">- 每一步都列出对应的kubectl命令</span>
<span class="line"></span>
<span class="line">HUMAN</span>
<span class="line">The user&#39;s input is: 我在default命名空间下有一个叫foo-service的service不工作，应如何排查？</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><p><img src="https://static001.geekbang.org/resource/image/23/16/23aabc7f6b225b77cbd495d080a89f16.png?wh=1119x597" alt="图片"><img src="https://static001.geekbang.org/resource/image/0d/e7/0d69a46a9cf2021694427bdcdeb09de7.png?wh=1069x532" alt="图片"><img src="https://static001.geekbang.org/resource/image/6a/92/6a2fc892103171636f036cccb4dbe692.png?wh=1089x495" alt="图片"><img src="https://static001.geekbang.org/resource/image/0c/9e/0c9c70bce775a63fd687714fd2cdd49e.png?wh=1075x378" alt="图片"></p><p>可以看到通义千问表现还不错，在没有真实集群数据的情况下，把所有可能的原因基本都分析了一遍，而且给出的 kubectl 命令都是可执行的。因此，我们完全可以把 kubectl 当作 Agent 工具，结合真实集群来辅助我们排查问题。接下来，我们还是边写代码，边讲解。</p><h2 id="cobra-前端" tabindex="-1"><a class="header-anchor" href="#cobra-前端"><span>Cobra 前端</span></a></h2><p>前端依然使用 Cobra，我们来添加一条名字叫 kubecheck 的命令。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">cobra-cli add kubechat</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>业务代码依然是在生成的 Run 方法中完成。</p><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具"><span>工具</span></a></h2><h3 id="kubetool" tabindex="-1"><a class="header-anchor" href="#kubetool"><span>kubetool</span></a></h3><p>工具依然延续上节课的面向对象的思想去构建。首先是结构体：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">type</span> KubeTool <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Name        <span class="token builtin">string</span></span>
<span class="line">    Description <span class="token builtin">string</span></span>
<span class="line">    ArgsSchema  KubeInput</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后用构造函数来赋值名称、工具描述和参数描述。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">NewKubeTool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>KubeTool <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>KubeTool<span class="token punctuation">{</span></span>
<span class="line">        Name<span class="token punctuation">:</span>        <span class="token string">&quot;KubeTool&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Description<span class="token punctuation">:</span> <span class="token string">&quot;用于在 Kubernetes 集群上运行 k8s 相关命令（kubectl、helm）的工具。&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        ArgsSchema<span class="token punctuation">:</span>  KubeInput<span class="token punctuation">{</span><span class="token string">\`description: &quot;要运行的 kubectl/helm 相关命令。&quot; example: &quot;kubectl get pods&quot;\`</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道 kubectl 是操作 K8s 资源的命令，而 helm 是 K8s 上的包管理工具。因此我在工具描述中，将这两个命令都放上了。kubetool 的参数也很简单，直接传入完整的命令行即可，例如 kubectl get pod。</p><p>工具的描述已经定义好了，接下来需要编写具体的工具执行函数，这样当 Agent 选择了工具后，程序可以调用工具得到具体的结果。</p><p>执行函数的入参我们已经知道了，就是完整的命令行，但是大模型有时会在命令行前后加引号反引号，比如：&quot;kubectl get pod&quot;，因此我们需要先做数据清洗，你可以参考我给出的代码。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>k <span class="token operator">*</span>KubeTool<span class="token punctuation">)</span> <span class="token function">parseCommands</span><span class="token punctuation">(</span>commands <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>commands<span class="token punctuation">,</span> <span class="token string">&quot;\\&quot;\`&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 strings 包中的 TrimSpace 函数来将两端的引号反引号去掉。这样就得到了一条干净的命令行。那命令行如何执行呢？我们需要使用 exec 包的 Command 方法。下面是 Command 方法的定义。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> arg <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>exec<span class="token punctuation">.</span>Cmd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其入参的第一个参数是命令名称，第二个参数是命令的参数列表。对于 kubectl get pod 这样的命令，第一个参数要填 kubectl，第二个参数要填入[get pod]。因此我们还需要用一个字符串分割函数，将 kubectl get pod 按空格分割后，放到一个字符串数组中。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>k <span class="token operator">*</span>KubeTool<span class="token punctuation">)</span> <span class="token function">splitCommands</span><span class="token punctuation">(</span>commands <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>commands<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以用 exec 包执行命令了。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span>splitedCommands<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> splitedCommands<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">output<span class="token punctuation">,</span> err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error: %s\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先用 Command 拼接出命令对象 cmd，之后调用 cmd 的 Output 方法来执行命令并得到返回结果。到这里 kubetool 就可用了。</p><h3 id="网络搜索工具-tavily" tabindex="-1"><a class="header-anchor" href="#网络搜索工具-tavily"><span>网络搜索工具--Tavily</span></a></h3><p>有时，用户问的问题并不是通过和集群资源交互就能解决的。比如用户问：我的集群目前可升级到的最新版本是多少？这时就需要让 Agent“百度一下”，才有可能得到答案。注意是有可能，因为就像我们平时自己去百度一样，也不一定每次都能得到想要的结果。</p><p>能在代码中通过 API 调用的网络搜索工具有很多，之前我比较喜欢使用 DuckDuckGo，因为它免费。但最近因为不可描述的原因，大陆用户网络不稳定了。所以今天我来介绍一个有 1000 次免费请求额度的网络搜索工具--Tavily，供你测试。Tavily 的官方文档我也放在这里了——<a href="https://docs.tavily.com/docs/welcome" target="_blank" rel="noopener noreferrer">Introduction | Tavily AI</a>，你打开链接后，需要点击右上方的 Get API Key 去注册一下，并拿到一个 API Key，之后才可以使用 REST API 的方式去调用这个工具。</p><p>执行网络搜索的 API 是 <a href="https://api.tavily.com/search" target="_blank" rel="noopener noreferrer">POST</a>，其 Request 参数主要包含 API Key，待搜索内容 query 等等；Response 参数包含很多内容，但我们只需要取标题 Title 和 链接 URL 即可。这是因为我们拿到 URL 后，还需要用网络请求工具去访问该 URL，就相当于我们点开链接查看链接内容。</p><p>接下来，我们来写代码实现一下这个工具。首先还是构造函数：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">NewTavilyTool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>TavilyTool <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>TavilyTool<span class="token punctuation">{</span></span>
<span class="line">        Name<span class="token punctuation">:</span> <span class="token string">&quot;TavilyTool&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Description<span class="token punctuation">:</span> <span class="token string">\`</span>
<span class="line">        Search the web for information on a topic</span>
<span class="line">        \`</span><span class="token punctuation">,</span></span>
<span class="line">        ArgsSchema<span class="token punctuation">:</span> <span class="token string">\`description: &quot;要搜索的内容，格式是字符串&quot; example: &quot;C罗是谁？&quot;\`</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个就很好懂了，和我们使用百度一样，需要输入待搜索内容。工具执行方法也很简单，就是用 Go 语言标准的 HTTP 包来请求搜索 API。下面是具体的代码。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>k <span class="token operator">*</span>TavilyTool<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>FinalResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    url <span class="token operator">:=</span> <span class="token string">&quot;https://api.tavily.com/search&quot;</span></span>
<span class="line">    apiKey <span class="token operator">:=</span> <span class="token string">&quot;tvly-xxxxxxxxxxxxxx&quot;</span></span>
<span class="line">    params <span class="token operator">:=</span> RequestParams<span class="token punctuation">{</span></span>
<span class="line">        APIKey<span class="token punctuation">:</span>      apiKey<span class="token punctuation">,</span></span>
<span class="line">        Query<span class="token punctuation">:</span>       query<span class="token punctuation">,</span></span>
<span class="line">        Days<span class="token punctuation">:</span>        <span class="token number">7</span><span class="token punctuation">,</span></span>
<span class="line">        MaxResults<span class="token punctuation">:</span>  <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">        SearchDepth<span class="token punctuation">:</span> <span class="token string">&quot;basic&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//初始化client</span></span>
<span class="line">    client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 将请求参数编码为JSON</span></span>
<span class="line">    jsonBody<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;error marshalling JSON: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建新的HTTP请求</span></span>
<span class="line">    req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>jsonBody<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;error creating request: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 发送请求</span></span>
<span class="line">    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;error sending request: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 解析响应</span></span>
<span class="line">    <span class="token keyword">var</span> response Response</span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;error decoding response: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    finalResult <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>FinalResult<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> result <span class="token operator">:=</span> <span class="token keyword">range</span> response<span class="token punctuation">.</span>Results <span class="token punctuation">{</span></span>
<span class="line">        finalResult <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>finalResult<span class="token punctuation">,</span> FinalResult<span class="token punctuation">{</span></span>
<span class="line">            Title<span class="token punctuation">:</span> <span class="token string">&quot;title: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>Title<span class="token punctuation">,</span></span>
<span class="line">            Link<span class="token punctuation">:</span>  <span class="token string">&quot; link: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>URL<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> finalResult<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以对照 API 文档以及我的代码，理解一下参数的含义。</p><p>最后需要注意的是，tavily 工具有一个特点，如果你输入的 query 是中文的，tavily 基本会给你返回一些中文搜索结果，比如你用中文问一个技术问题，tavily 给的网站都是 CSDN、知乎这样的中文网站。但如果你输入的 query 是英文的，tavily 则会给出一些英文搜索结果，比如 www.kubernetes.io 这样的英文网站。因此提问技术问题最好使用英文，或者在 prompt 上做一些手脚，将 query 转成英文。</p><h3 id="网络请求工具" tabindex="-1"><a class="header-anchor" href="#网络请求工具"><span>网络请求工具</span></a></h3><p>有了网站的 URL 后，我们就需要“打开”这个网站，浏览一下内容，看看有没有有用的。网络请求工具没有类似 tavily 这样封装好，我自己用 Go 语言简单写了一个，我们还是先从构造函数开始一步步看。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">NewRequestsTool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>RequestsTool <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>RequestsTool<span class="token punctuation">{</span></span>
<span class="line">        Name<span class="token punctuation">:</span> <span class="token string">&quot;RequestsTool&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Description<span class="token punctuation">:</span> <span class="token string">\`</span>
<span class="line">        A portal to the internet. Use this when you need to get specific</span>
<span class="line">    content from a website. Input should be a url (i.e. https://www.kubernetes.io/releases).</span>
<span class="line">    The output will be the text response of the GET request.</span>
<span class="line">        \`</span><span class="token punctuation">,</span></span>
<span class="line">        ArgsSchema<span class="token punctuation">:</span> <span class="token string">\`description: &quot;要访问的website，格式是字符串&quot; example: &quot;https://www.kubernetes.io/releases&quot;\`</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工具的描述是需要从网站获取特定内容，输入必须是 URL。至于我为什么要用英文，是因为通义千问大模型在处理英文 prompt 的表现上要好于中文。</p><p>接下来我们看看如何访问网页，获取内容。先使用 HTTP GET 方法，获取到网页内容，读出 Body。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RequestsTool<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;获取 URL 失败: %s&quot;</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Status<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">parseHTML</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于拿到的 Body 是 HTML 格式的，其中会夹杂很多无用的内容，干扰 Agent 理解有用的内容。因此我们可以使用 Github 上一个开源的 HTML 解析库 goquery 来进行数据清洗。下面是具体的代码。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RequestsTool<span class="token punctuation">)</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span>htmlContent <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">    doc<span class="token punctuation">,</span> err <span class="token operator">:=</span> goquery<span class="token punctuation">.</span><span class="token function">NewDocumentFromReader</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>htmlContent<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 移除不需要的标签</span></span>
<span class="line">    doc<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;header, footer, script, style&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Each</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> s <span class="token operator">*</span>goquery<span class="token punctuation">.</span>Selection<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        s<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取处理后的纯文本</span></span>
<span class="line">    <span class="token keyword">return</span> doc<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个库会将 HTML 中不需要的标签内容移除掉，然后从 Body 标签中获取内容并转成纯文本。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><p>由于 Agent 代码的套路与上一章一模一样，仅仅是工具发生了变化，因此这部分代码我就不再重复讲了，你可以在课后下载我的代码自行查看。现在我们就直接来看一下这三个工具的测试效果吧。</p><h3 id="kubetool-测试" tabindex="-1"><a class="header-anchor" href="#kubetool-测试"><span>kubetool 测试</span></a></h3><p>首先，我准备了一个 YAML 文件，用于在 K8s 上创建一个 pod 和 一个 service。下面是对应的 YAML 内容。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod</span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> foo<span class="token punctuation">-</span>app</span>
<span class="line">  <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> foo<span class="token punctuation">-</span>app</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">containers</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo<span class="token punctuation">-</span>app</span>
<span class="line">      <span class="token key atrule">image</span><span class="token punctuation">:</span> higress<span class="token punctuation">-</span>registry.cn<span class="token punctuation">-</span>hangzhou.cr.aliyuncs.com/higress/http<span class="token punctuation">-</span>echo<span class="token punctuation">:</span>0.2.4<span class="token punctuation">-</span>alpine</span>
<span class="line">      <span class="token key atrule">args</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token string">&#39;-text=foo&#39;</span></span>
<span class="line"><span class="token punctuation">---</span></span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service</span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> foo<span class="token punctuation">-</span>service</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> foo</span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Default port used by the image</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5678</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意看 pod 的标签，我设置的是 app: foo-app，而 service 的 selector，我故意写成了 app: foo，这样的话，service 无法通过标签选择器匹配到上面的 pod，也就不会起作用。接下来，我们试一下，Agent 能否借助 kubetool 帮我们解决这个问题。用户 prompt 如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">为什么我的 default NS 下的名叫foo-service的service不工作？</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一轮回答与工具调用结果：</p><p><img src="https://static001.geekbang.org/resource/image/b2/e1/b25746708ab404c5232a065cda65d6e1.png?wh=1352x574" alt="图片"></p><p>第二轮问答和工具调用结果：</p><p><img src="https://static001.geekbang.org/resource/image/0d/61/0d45e776a0aaf10847d10608ef59aa61.png?wh=1381x698" alt="图片"></p><p>第三轮问答和工具调用结果：</p><p><img src="https://static001.geekbang.org/resource/image/96/36/96ecf7da2f48d27b9447da2e68382836.png?wh=1396x455" alt="图片"></p><p>第四轮问答和工具调用结果：</p><p><img src="https://static001.geekbang.org/resource/image/19/20/19a8b0b813b21fd24bc752a673523220.png?wh=1394x480" alt="图片"></p><p>可以看到 Agent 的排查思路基本和人类一样，它在前两轮就确认了是标签不匹配的问题，之后又检查了 pod、deployment 等资源，确定没有符合标签规则的，最终建议我们要符合标签规则。这个效果还是非常惊艳的。</p><h3 id="联网搜索测试" tabindex="-1"><a class="header-anchor" href="#联网搜索测试"><span>联网搜索测试</span></a></h3><p>这个功能原本我准备的 prompt 是这样的：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">What is the latest patch version that the cluster can be upgraded to?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当前集群可升级到的 patch 版本是多少？我在 chatgpt-4o 上测试时，效果非常理想，chatgpt-4o 会先使用 kubetool 获取当前集群版本，之后通过 tavilytool 搜索可升级的版本是什么，最后用网络请求工具访问具体的网站，拿到信息。但是我使用通义千问的 qwen-max 和 qwen-max-0403 模型，效果都不稳定。因此，我稍微修改了一下 prompt：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">Please do a web search to find out what is the latest patch version that the current cluster can be upgraded to?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>加了一个请联网搜索，引导 Agent 通过网络搜索的方式解决该问题。我们来看一下效果。</p><p>第一轮回答与工具调用结果：</p><p><img src="https://static001.geekbang.org/resource/image/64/50/644a56bfdf9fefa6f2a951c688a1df50.png?wh=1386x364" alt="图片"></p><p>可以看到在搜索结果中包含了 https://kubernetes.io/releases 这个网址，这是 K8s 官方记录版本发布的网页。、</p><p>第二轮问答和工具调用结果：</p><p><img src="https://static001.geekbang.org/resource/image/e0/ba/e02f81ea20c381f7948051f1f6d02aba.png?wh=1402x697" alt="图片"></p><p>第三轮问答和工具调用结果：</p><p><img src="https://static001.geekbang.org/resource/image/c4/dc/c48561f7f45ef31fa77f58ec982b2bdc.png?wh=1396x316" alt="图片"></p><p>可以看到 Agent 通过联网搜索找到了 K8s 官网，并访问了 releases 页面，得到了可升级的版本信息。总体效果中规中矩，但也是解决了问题。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本节课我们沿着上一章用自然语言操控 K8s 的设计思维和套路，从运维解决问题的角度入手，使用了 kubectl 工具以及联网工具完成了一个简单的 AI 运维助手。效果总体来说还是很惊艳的。本节课的代码已经上传到 <a href="https://github.com/xingyunyang01/Geek/tree/main/k8sCheck" target="_blank" rel="noopener noreferrer">GitHub</a>，你可以看一下。</p><p>为什么 Agent 在遇到问题时，能给出正确的 kubectl 命令从集群获取信息呢？通过我们在文章开头的测试，可以得知用于支撑 Agent 的通义千问大模型本身对于如何使用 kubectl 命令行以及遇到 K8s 问题时如何借助 kubectl 解决问题是很有心得的，因此才能有本项目的测试效果。换句话说，如果我们的 Agent 使用的是一个只用 K8s 知识训练过，而没有用 kubectl 相关知识训练过的小模型，就可能会出现 Agent 有解决方案的思路，但就是不知道命令该怎么写的尴尬局面。</p><p>当然，通义千问模型在我们测试联网工具用例时，对于问题的思考能力就表现的中规中矩了，因此结合自身业务，选择一个合适的模型还是很重要的。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>本节课我们实现了用 kubectl 当作工具来帮我们解决运维问题。实际上在 K8s 中，可操控的工具有很多，比如 Helm、Kustomize 等等，有兴趣的话，你可以试试提问某个 chart 支持的版本有哪些，看看 Agent 能如何应对。</p>`,85)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/3.tech/84.AIAgent/11.%E8%AE%A9%20Agent%20%E8%81%94%E7%BD%91%E4%BB%A5%E5%8F%8A%E5%88%A9%E7%94%A8%20kubectl%20%E6%8E%92%E6%9F%A5%E9%97%AE%E9%A2%98.html","title":"让 Agent 联网以及利用 kubectl 排查问题","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"Cobra 前端","slug":"cobra-前端","link":"#cobra-前端","children":[]},{"level":2,"title":"工具","slug":"工具","link":"#工具","children":[{"level":3,"title":"kubetool","slug":"kubetool","link":"#kubetool","children":[]},{"level":3,"title":"网络搜索工具--Tavily","slug":"网络搜索工具-tavily","link":"#网络搜索工具-tavily","children":[]},{"level":3,"title":"网络请求工具","slug":"网络请求工具","link":"#网络请求工具","children":[]}]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[{"level":3,"title":"kubetool 测试","slug":"kubetool-测试","link":"#kubetool-测试","children":[]},{"level":3,"title":"联网搜索测试","slug":"联网搜索测试","link":"#联网搜索测试","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/11.让 Agent 联网以及利用 kubectl 排查问题.md"}');export{o as comp,u as data};
