import{_ as s,c as a,b as p,o as e}from"./app-C01vnHKY.js";const t={};function i(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="client-go-进阶玩法之-restmapper" tabindex="-1"><a class="header-anchor" href="#client-go-进阶玩法之-restmapper"><span>client-go 进阶玩法之 RestMapper</span></a></h1><p>在上一节课中，我们探讨了通过自然语言操控 Kubernetes 的基本原理，并分析了为了提升系统的可用性和安全性所需考虑的一些关键设计点，例如如何有效地使用 client-go。针对用户可能对任意 Kubernetes 资源进行操作的需求，我们引入了通用化的处理方案 RestMapper。同时，为了缓解查询操作对 apiserver 的访问压力，我们还提出了 Informer 方法。</p><p>在本节课中，我将重点介绍 RestMapper 的概念与应用。</p><p>为了照顾到对 client-go 不是太熟悉的同学，我们先从基础入手，讲解一下 client-go 四种客户端的使用手法以及 GVR、GVK 等概念。</p><h2 id="四种客户端" tabindex="-1"><a class="header-anchor" href="#四种客户端"><span>四种客户端</span></a></h2><p>在 client-go 中，有四种可以与 Kubernetes 资源进行交互的客户端，分别是 ClientSet、DynamicClient、DiscoveryClient 以及 RestClient，它们各自适用于不同的场景。下面结合代码来体会一下。</p><h3 id="clientset" tabindex="-1"><a class="header-anchor" href="#clientset"><span>ClientSet</span></a></h3><p>ClientSet 是最常用的客户端，用于与 Kubernetes 核心资源（如 Pod、Service、Deployment 等）进行交互。它封装了对各类资源的操作，提供了类型安全的接口。我们用一个列出 default 命名空间下的 pod 列表的例子，看一下代码如何实现。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;context&quot;</span></span>
<span class="line">    <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">    <span class="token string">&quot;k8s.io/client-go/kubernetes&quot;</span></span>
<span class="line">    <span class="token string">&quot;k8s.io/client-go/tools/clientcmd&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    config<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientcmd<span class="token punctuation">.</span><span class="token function">BuildConfigFromFlags</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/path/to/kubeconfig&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    clientset<span class="token punctuation">,</span> err <span class="token operator">:=</span> kubernetes<span class="token punctuation">.</span><span class="token function">NewForConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    pods<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientset<span class="token punctuation">.</span><span class="token function">CoreV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metav1<span class="token punctuation">.</span>ListOptions<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pod <span class="token operator">:=</span> <span class="token keyword">range</span> pods<span class="token punctuation">.</span>Items <span class="token punctuation">{</span></span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pod Name: %s\\n&quot;</span><span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>GVK 与 ClientSet 的关系</strong></p><p>在示例代码中，clientset.CoreV1().Pods().List() 是用于获取 Pod 列表的方法。为什么是 CoreV1()？这与 Kubernetes 资源的 GVK 密切相关。</p><p>GVK 是 Group、Version 和 Kind 的缩写。</p><ul><li><p><strong>Group</strong>：表示资源所属的 API 组，比如 apps、batch 等。</p></li><li><p><strong>Version**</strong>：**表示资源的版本，比如 v1、v1beta1 等。</p></li><li><p><strong>Kind**</strong>：**表示资源的类型，比如 Pod、Service 等，注意是大写字母开头的单数形式。</p></li></ul><p>GVK 用于标识 Kubernetes 中的每种资源，也就是描述“身份”。例如，邢云阳的 Group 是人类，Version 比如就是出生日期，Kind 是邢云阳。</p><p>在资源的 YAML 中，我们也会用到 GVK。以下是一个 pod 的 YAML：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">containers</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>container</span>
<span class="line">      <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx</span>
<span class="line">      <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>apiVersion**</strong>：**是由 Group/Version 组合而成，由于 Pod 的 Group 为 Core（核心 API 组，Group 名为空），Version 为 v1，因此只写了 v1。</p></li><li><p><strong>kind</strong>：即为 Kind。</p></li></ul><p>因此，在 ClientSet 中，Pod 的方法位于 CoreV1() 下，这是因为 Core API Group 的名称为空，直接使用 Version 表示。</p><p>我们再来看一下 deployment 的 YAML：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>apiVersion</strong>：apps/v1，表示 Group 为 apps，Version 为 v1。</p></li><li><p><strong>kind</strong>：Deployment。</p></li></ul><p>因此，若需要操作 Deployment 资源，可以通过 clientset.AppsV1().Deployments().List() 方法来获取 Deployment 列表。</p><p>**总结：**只要知道目标资源的 GVK，就可以快速定位到对应的 ClientSet 方法。例如：</p><ul><li><p>Pod 的 GVK 为 v1、Pod，对应 clientset.CoreV1().Pods()。</p></li><li><p>Deployment 的 GVK 为 apps/v1、Deployment，对应 clientset.AppsV1().Deployments()。</p></li></ul><p>这种基于 GVK 的设计，使得 ClientSet 在操作 Kubernetes 核心资源时直观、简洁且高效。</p><h3 id="dynamicclient" tabindex="-1"><a class="header-anchor" href="#dynamicclient"><span>DynamicClient</span></a></h3><p>DynamicClient 适用于操作未知类型的自定义资源（CRD）。它不需要强类型定义，是通过动态结构处理任意资源。我们还是举一个 list 的例子：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;context&quot;</span></span>
<span class="line">    <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">    <span class="token string">&quot;k8s.io/client-go/dynamic&quot;</span></span>
<span class="line">    <span class="token string">&quot;k8s.io/client-go/tools/clientcmd&quot;</span></span>
<span class="line">    <span class="token string">&quot;k8s.io/apimachinery/pkg/runtime/schema&quot;</span></span>
<span class="line">    metav1 <span class="token string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    config<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientcmd<span class="token punctuation">.</span><span class="token function">BuildConfigFromFlags</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/path/to/kubeconfig&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    dynamicClient<span class="token punctuation">,</span> err <span class="token operator">:=</span> dynamic<span class="token punctuation">.</span><span class="token function">NewForConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    gvr <span class="token operator">:=</span> schema<span class="token punctuation">.</span>GroupVersionResource<span class="token punctuation">{</span></span>
<span class="line">        Group<span class="token punctuation">:</span>    <span class="token string">&quot;example.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Version<span class="token punctuation">:</span>  <span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Resource<span class="token punctuation">:</span> <span class="token string">&quot;myresources&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    resources<span class="token punctuation">,</span> err <span class="token operator">:=</span> dynamicClient<span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span>gvr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Namespace</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metav1<span class="token punctuation">.</span>ListOptions<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> resources<span class="token punctuation">.</span>Items <span class="token punctuation">{</span></span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Resource Name: %s\\n&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 DynamicClient 的核心就是要定义好 GVR，即 Group、Version、Resource。</p><ul><li><p><strong>Group**</strong>：**同 GVK 的 Group。</p></li><li><p><strong>Version**</strong>：**同 GVK 的 Version。</p></li><li><p><strong>Resource**</strong>：**资源的复数形式，用于 HTTP 路径中的资源名称，例如 pods、services。</p></li></ul><p>在上文中，我们描述了 GVK，其偏向于表示资源类型、身份。而 GVR 则表示怎么找到某资源。例如可以在“邢府”找到邢云阳，因此邢云阳的 Resource 是“邢府”。</p><p>在上一小节中，我们使用过如下 curl 命令列出 pod list。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">curl <span class="token operator">-</span>k <span class="token operator">-</span>H <span class="token string">&quot;Authorization: Bearer xxxxxxxxxxxxxxxxxx&quot;</span> \\</span>
<span class="line"><span class="token operator">&gt;</span>      https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>your k8s server ip<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>your k8s server port<span class="token operator">&gt;</span><span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>namespaces<span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">/</span>pods</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 /api/v1/namespaces/default/pods 中，Version 是 v1，Resource 是 pods。这与 GVR 的结构完全一致，体现了动态客户端工作的基础。</p><p>DynamicClient 的灵活性在于，它不像 ClientSet 那样为每种资源类型定义固定接口，而是将资源的具体操作交由开发者定义。这种设计让我们能够更自由地操作各种资源，从而显著提升了与 Kubernetes 交互的灵活性和扩展性。</p><h3 id="restclient" tabindex="-1"><a class="header-anchor" href="#restclient"><span>RestClient</span></a></h3><p>RestClient 听这个名字就与 RestAPI “沾边”，实际上，它还真“沾边”。RestClient 是直接通过 url 来访问资源，就如同上文的 curl。我们看一下代码实现：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">    <span class="token string">&quot;k8s.io/client-go/rest&quot;</span></span>
<span class="line">    metav1 <span class="token string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    config<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientcmd<span class="token punctuation">.</span><span class="token function">BuildConfigFromFlags</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/path/to/kubeconfig&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    restClient<span class="token punctuation">,</span> err <span class="token operator">:=</span> rest<span class="token punctuation">.</span><span class="token function">RESTClientFor</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    result <span class="token operator">:=</span> restClient<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">AbsPath</span><span class="token punctuation">(</span><span class="token string">&quot;/api/v1/namespaces/default/pods&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> result<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    pods <span class="token operator">:=</span> <span class="token operator">&amp;</span>metav1<span class="token punctuation">.</span>PartialObjectMetadataList<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    err <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">Into</span><span class="token punctuation">(</span>pods<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pod <span class="token operator">:=</span> <span class="token keyword">range</span> pods<span class="token punctuation">.</span>Items <span class="token punctuation">{</span></span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pod Name: %s\\n&quot;</span><span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，RestClient 用了很 HTTP 的方法，通过 Get Method 以及 url 实现了交互。这种方法，我们用得比较少，如果要用，通常是使用了聚合 API 技术，自定义了 API（除 CRD 之外，第二种自定义资源的方式）后，通过这种方式去调用。</p><h3 id="discoveryclient" tabindex="-1"><a class="header-anchor" href="#discoveryclient"><span>DiscoveryClient</span></a></h3><p>DiscoveryClient 用于发现 Kubernetes 集群支持的 GVR，我们常用的 kubectl api-resources 命令就是使用它实现的。</p><p><img src="https://static001.geekbang.org/resource/image/0b/2f/0b1062a8408797bf46629a52e3667d2f.png?wh=1363x310" alt="图片"></p><p>看一下，在代码中是如何使用 DiscoveryClient 的。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">    <span class="token string">&quot;k8s.io/client-go/discovery&quot;</span></span>
<span class="line">    <span class="token string">&quot;k8s.io/client-go/tools/clientcmd&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    config<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientcmd<span class="token punctuation">.</span><span class="token function">BuildConfigFromFlags</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/path/to/kubeconfig&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    discoveryClient<span class="token punctuation">,</span> err <span class="token operator">:=</span> discovery<span class="token punctuation">.</span><span class="token function">NewDiscoveryClientForConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    apiGroups<span class="token punctuation">,</span> err <span class="token operator">:=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">ServerGroups</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> group <span class="token operator">:=</span> <span class="token keyword">range</span> apiGroups<span class="token punctuation">.</span>Groups <span class="token punctuation">{</span></span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;API Group: %s\\n&quot;</span><span class="token punctuation">,</span> group<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> version <span class="token operator">:=</span> <span class="token keyword">range</span> group<span class="token punctuation">.</span>Versions <span class="token punctuation">{</span></span>
<span class="line">            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;  Version: %s\\n&quot;</span><span class="token punctuation">,</span> version<span class="token punctuation">.</span>GroupVersion<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 DiscoveryClient 的用法还是很简单的，当然一般我们不这么用。我们通常会结合 RestMapper，来实现 GVR 和 GVK 的转换。</p><h2 id="restmapper" tabindex="-1"><a class="header-anchor" href="#restmapper"><span>RestMapper</span></a></h2><p>在讲完四种客户端之后，便可以来讲使用动态客户端 + RestMapper 进行所谓通用化的处理资源访问的方式了。</p><p>在上面使用客户端的过程中，我们知道使用动态客户端 DynamicClient 可以通过定义 GVR 来与 Kubernetes 资源做交互。但在用自然语言操控 Kubernetes 的场景中，用户肯定不会这样提问：“请帮我列出 default 命名空间下的 Group 是 <code>&quot;&quot;</code>，Version 是 v1，Resource 是 pods 的列表”，而是会说：“请帮我列出 default 命名空间下的 pod 列表”。因此我们只能在用户的提问中得到 GVR 的 R 这一个信息。</p><p>为了应对这种场景，我们需要一种工具来帮助我们从资源名称（Resource）推导出完整的 GVR 信息，这就是 RestMapper。</p><p>RestMapper 是一个工具，用于解析和确定 Kubernetes 资源的元数据信息。它主要解决了两个问题：</p><ul><li><p>资源类型到 API Group/Version 的映射：Kubernetes 支持多种 API 版本和组，不同的资源可能存在于不同的 API 组和版本中。RestMapper 可以帮助确定一个资源的具体 API 组和版本。</p></li><li><p>确定资源的操作方式：RestMapper 可以告诉客户端如何对资源进行增删改查等操作，例如资源的 URL 路径、是否支持命名空间等。</p></li></ul><p>RestMapper 的返回值叫做 RestMapping，它包含了资源的详细信息：</p><ul><li><p>Group：资源所属的 API 组</p></li><li><p>Version：资源的 API 版本</p></li><li><p>Kind：资源的类型</p></li><li><p>Scope：资源的作用范围（命名空间级别或集群级别）</p></li><li><p>Resource：GVR</p></li><li><p>Path：资源的 API 路径</p></li></ul><p>其实，在生活中，也有类似的场景。例如我们只需要对警察报出身份证号，警察便可以通过警务平台工具得到我们的姓名、手机号、家庭住址等等全部信息。</p><p>OK，在讲完了概念后，我们还是以列出 pod 列表为例，看一下代码如何编写。</p><p>首先先定义出一个 restMapper。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">InitRestMapper</span><span class="token punctuation">(</span>clientSet <span class="token operator">*</span>kubernetes<span class="token punctuation">.</span>Clientset<span class="token punctuation">)</span> meta<span class="token punctuation">.</span>RESTMapper <span class="token punctuation">{</span></span>
<span class="line">    gr<span class="token punctuation">,</span> err <span class="token operator">:=</span> restmapper<span class="token punctuation">.</span><span class="token function">GetAPIGroupResources</span><span class="token punctuation">(</span>clientSet<span class="token punctuation">.</span><span class="token function">Discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    mapper <span class="token operator">:=</span> restmapper<span class="token punctuation">.</span><span class="token function">NewDiscoveryRESTMapper</span><span class="token punctuation">(</span>gr<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> mapper</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在第 2 行，restmapper.GetAPIGroupResources 的入参是一个 DiscoveryClient，其作用是通过 DiscoveryClient 来获取 Kubernetes 集群中所有 API 组和资源的信息。之后在第 7 行通过 restmapper.NewDiscoveryRESTMapper 可以获取一个真正的 RestMapper 工具实例。</p><p>有了 RestMapper 工具，我们就可以来做 Resource 到 GVR 的映射了。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">mappingFor</span><span class="token punctuation">(</span>resourceOrKindArg <span class="token builtin">string</span><span class="token punctuation">,</span> restMapper <span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapper<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>meta<span class="token punctuation">.</span>RESTMapping<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    fullySpecifiedGVR<span class="token punctuation">,</span> groupResource <span class="token operator">:=</span> schema<span class="token punctuation">.</span><span class="token function">ParseResourceArg</span><span class="token punctuation">(</span>resourceOrKindArg<span class="token punctuation">)</span></span>
<span class="line">    gvk <span class="token operator">:=</span> schema<span class="token punctuation">.</span>GroupVersionKind<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> fullySpecifiedGVR <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        gvk<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>restMapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">KindFor</span><span class="token punctuation">(</span><span class="token operator">*</span>fullySpecifiedGVR<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> gvk<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        gvk<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>restMapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">KindFor</span><span class="token punctuation">(</span>groupResource<span class="token punctuation">.</span><span class="token function">WithVersion</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>gvk<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>restMapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RESTMapping</span><span class="token punctuation">(</span>gvk<span class="token punctuation">.</span><span class="token function">GroupKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gvk<span class="token punctuation">.</span>Version<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的入参是 resourceOrKindArg 和 RestMapper 工具实例。resourceOrKindArg 的值有两种情况，第一种是 GVR 都存在的情况，例如：pod.v1 或者 deployment.v1.apps；第二种情况是只有 resource，例如：pod。</p><p>如果是第一种，第 2 行代码 schema.ParseResourceArg 会进行字符串切分操作，按.切分，将 r.v.g 切分开，存入到类型为 *schema.GroupVersionResource 的 fullySpecifiedGVR。如果是第二种，则将 Resource 赋值给类型为 schema.GroupResource 的 groupResource。</p><p>之后开始做判断，如果 fullySpecifiedGVR 有值，则直接调用 RestMapper 的 kindFor 方法，将 GVR 转成 GVK 就可以了。</p><p>那接下来，如果 GVK 是空的，说明刚才那一步没做，则也需要用 kindFor 获取 GVK 。但是由于 kindFor 需要的是 schema.GroupVersionResource 类型的入参，因此需要用 groupResource.WithVersion(<code>&quot;&quot;</code>) 这种方式将 schema.GroupResource 转为 schema.GroupVersionResource。WithVersion 在这里只起到了一个占位的作用。</p><p>在 GVK 获取到之后，便可以使用第 12 行的 restMapping 方法来获取到 restMapping 了。有了 restMapping，实际上 GVR 我们就已经拿到了。</p><p>之后的操作就很简单了，我们需要用动态客户端来 list 资源。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">if</span> restMapping<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;namespace&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">    ri <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span>restMapping<span class="token punctuation">.</span>Resource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Namespace</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    ri <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span>restMapping<span class="token punctuation">.</span>Resource<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">resources<span class="token punctuation">,</span> err <span class="token operator">:=</span> ri<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metav1<span class="token punctuation">.</span>ListOptions<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> resources<span class="token punctuation">.</span>Items <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Resource Name: %s\\n&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用动态客户端 list 资源我们在上文中已经做过示例，在这里唯一要说的就是 restMapping.Scope 的用法。我们知道 Kubernetes 中的资源分为集群级别和命名空间级别两种，集群级别的相当于全局变量，不受命名空间的限制，例如 pv、clusterRole 等资源；而命名空间级别的则是用命名空间进行隔离的，例如 pod、svc 等等。restMapping.Scope 存储了资源的级别，因此此处使用它做了判断。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本节课，我们深入探讨了 client-go 四种客户端的使用场景以及原理，并为你讲述了 GVR 和 GVK 是什么。最后，我们结合用户实际使用场景，总结出用户通常只会提供 Resource 的名称，而不是 GVR 或 GVK 的全部内容，因此需要利用 RestMapper 工具，为 Resource 补全 Group 和 Version，从而实现通用化的与 Kubenetes 资源做交互的方法。</p><p>其实，通过这两节课的学习，你会发现，AI 的出现，确实革新了我们做应用开发的思路，让我们的产品能够变得更加智能，能够有更好的用户体验。但是，AI 也不是万能的，AI 自身存在的局限性以及幻觉等问题，使得现阶段，我们还是要通过编写一定量的业务代码，来配合 AI，帮助 AI，弥补 AI 的不足。因此，修炼好内功，才能让我们做出更好的 AI 产品。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>在 mappingFor 函数中，resourceOrKindArg 参数的命名说明，我们的入参不只是 resource，还有可能是 kind。那如果入参是 kind，代码该如何编写呢？</p>`,73)]))}const o=s(t,[["render",i]]),u=JSON.parse('{"path":"/3.tech/84.AIAgent/06.client-go%E8%BF%9B%E9%98%B6%E7%8E%A9%E6%B3%95%E4%B9%8BRestMapper.html","title":"client-go 进阶玩法之 RestMapper","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"四种客户端","slug":"四种客户端","link":"#四种客户端","children":[{"level":3,"title":"ClientSet","slug":"clientset","link":"#clientset","children":[]},{"level":3,"title":"DynamicClient","slug":"dynamicclient","link":"#dynamicclient","children":[]},{"level":3,"title":"RestClient","slug":"restclient","link":"#restclient","children":[]},{"level":3,"title":"DiscoveryClient","slug":"discoveryclient","link":"#discoveryclient","children":[]}]},{"level":2,"title":"RestMapper","slug":"restmapper","link":"#restmapper","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/06.client-go进阶玩法之RestMapper.md"}');export{o as comp,u as data};
