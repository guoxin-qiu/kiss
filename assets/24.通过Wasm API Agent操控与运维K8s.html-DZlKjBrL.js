import{_ as s,c as a,b as e,o as p}from"./app-C01vnHKY.js";const l={};function t(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="通过-wasm-api-agent-操控与运维-k8s" tabindex="-1"><a class="header-anchor" href="#通过-wasm-api-agent-操控与运维-k8s"><span>通过 Wasm API Agent 操控与运维 K8s</span></a></h1><p>上一节课，我们留了一个小尾巴，也就是在 Agent 插件中，如何实现 JSON Mode 输出呢？本节课，我们先来解决掉这个小尾巴。</p><h2 id="json-mode" tabindex="-1"><a class="header-anchor" href="#json-mode"><span>JSON Mode</span></a></h2><p>在[第 21 讲]中，我带你开发 JSON Mode 小插件时，详细讲解了 JSON Mode 的工作原理。其核心是通过 prompt 指示大模型按照指定的 JSON Schema 格式化输出结果。由于本插件的 JSON Schema 支持自定义，因此我对之前的 JSON Mode prompt 进行了调整，修改后的形式如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">Given the Json Schema<span class="token punctuation">:</span> <span class="token operator">%</span>s<span class="token punctuation">,</span> please help me convert the following content to a pure json<span class="token punctuation">:</span> <span class="token operator">%</span>s</span>
<span class="line">Do not respond other content except the pure json<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第一个%s 用于填充用户自定义的 JSON Schema 内容；</p></li><li><p>第二个%s 用于填充需要格式化的原始数据。</p></li></ul><p>在完成核心逻辑后，代码的实现就变得顺理成章了。具体流程如下：</p><ol><li><p>在获取到“Final Answer”时，首先判断是否开启了 JSON 输出设置。</p></li><li><p>如果开启了 JSON 格式化功能，就先将结果按照指定的 JSON Schema 进行格式化；</p></li><li><p>如果未开启，就直接返回结果，继续后续的 Body 替换操作。</p></li></ol><p>JSON 格式化的核心代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">jsonFormat</span><span class="token punctuation">(</span>llmClient wrapper<span class="token punctuation">.</span>HttpClient<span class="token punctuation">,</span> llmInfo LLMInfo<span class="token punctuation">,</span> jsonSchema <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> assistantMessage Message<span class="token punctuation">,</span> actionInput <span class="token builtin">string</span><span class="token punctuation">,</span> headers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> streamMode <span class="token builtin">bool</span><span class="token punctuation">,</span> rawResponse Response<span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">    prompt <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>prompttpl<span class="token punctuation">.</span>Json_Resp_Template<span class="token punctuation">,</span> jsonSchema<span class="token punctuation">,</span> actionInput<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    messages <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>dashscope<span class="token punctuation">.</span>Message<span class="token punctuation">{</span><span class="token punctuation">{</span>Role<span class="token punctuation">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> Content<span class="token punctuation">:</span> prompt<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    completion <span class="token operator">:=</span> dashscope<span class="token punctuation">.</span>Completion<span class="token punctuation">{</span></span>
<span class="line">        Model<span class="token punctuation">:</span>    llmInfo<span class="token punctuation">.</span>Model<span class="token punctuation">,</span></span>
<span class="line">        Messages<span class="token punctuation">:</span> messages<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    completionSerialized<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>completion<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">var</span> content <span class="token builtin">string</span></span>
<span class="line">    err <span class="token operator">:=</span> llmClient<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span></span>
<span class="line">        llmInfo<span class="token punctuation">.</span>Path<span class="token punctuation">,</span></span>
<span class="line">        headers<span class="token punctuation">,</span></span>
<span class="line">        completionSerialized<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">func</span><span class="token punctuation">(</span>statusCode <span class="token builtin">int</span><span class="token punctuation">,</span> responseHeaders http<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> responseBody <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//得到gpt的返回结果</span></span>
<span class="line"><span class="token punctuation">.</span>                       <span class="token operator">...</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span>llmInfo<span class="token punctuation">.</span>MaxExecutionTime<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;[onHttpRequestBody] completion err: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        proxywasm<span class="token punctuation">.</span><span class="token function">ResumeHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> content</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在代码实现中，我们首先拼接好了包含 JSON Schema 和待格式化数据的 prompt 模板，随后通过 HTTP 请求调用大模型，成功获取了 JSON 格式化后的结果。至此，上节课遗留的“小尾巴”问题就圆满解决了。</p><p>此外，我想补充一点关于编译命令的注意事项。之前我们使用的编译命令是：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">tinygo build <span class="token operator">-</span>o main<span class="token punctuation">.</span>wasm <span class="token operator">-</span>scheduler<span class="token operator">=</span>none <span class="token operator">-</span>target<span class="token operator">=</span>wasi <span class="token operator">-</span>gc<span class="token operator">=</span>custom <span class="token operator">-</span>tags<span class="token operator">=</span>&#39;custommalloc nottinygc_finalizer&#39; <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令仅适用于插件根目录下只有一个 main.go 文件的情况。如果根目录下还存在其他 Go 文件（例如 config.go），那么该命令会报错。为了解决这个问题，我们需要将./main.go 替换为.，表示编译当前目录下的所有 Go 文件。完整的命令如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line">tinygo build <span class="token punctuation">-</span>o agent.wasm <span class="token punctuation">-</span>scheduler=none <span class="token punctuation">-</span>target=wasi <span class="token punctuation">-</span>gc=custom</span>
<span class="line"><span class="token punctuation">-</span>tags=&#39;custommalloc nottinygc_finalizer&#39; .</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><h3 id="部署-gintools-服务" tabindex="-1"><a class="header-anchor" href="#部署-gintools-服务"><span>部署 ginTools 服务</span></a></h3><p>接下来，我们将使用前面章节中介绍的 ginTools 工具来测试本插件的效果。首先，简单回顾一下 ginTools 的功能：它是一个基于 gin 框架和 client-go 库开发的服务器，主要用于与 Kubernetes 集群进行交互。ginTools 提供了以下几个核心路由：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">GET /:resource 获取指定资源列表</span>
<span class="line">DELETE /:resource 删除指定资源</span>
<span class="line">POST /:resource 创建指定资源</span>
<span class="line">GET /pods/logs 获取指定pod的日志</span>
<span class="line">GET /pods/events 获取指定pod的事件</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了将 ginTools 工具以 Pod 形式部署到 Higress 所在的 Kubernetes 集群中，我们需要解决一个关键问题：ginTools 如何在容器内操作容器外部的 K8s 资源？</p><p>在之前讲解 client-go 时，我曾简要提到过一种方法，即使用 <strong>InCluster 模式</strong>。这种模式允许运行在 K8s 集群中的 Pod 通过集群内部的认证机制访问外部的 K8s 资源。下面，我们来详细说明具体操作步骤。</p><p>首先，我们需要创建一个 K8s 服务账户（ServiceAccount，简称 sa），作为 ginTools 访问 K8s 资源的凭证。该服务账户的权限决定了 ginTools 能够操作哪些 K8s 资源。</p><p>为了给服务账户赋予权限，通常使用 Role/RoleBinding 或 ClusterRole/ClusterRoleBinding：</p><ul><li><p>Role/RoleBinding：作用域限定在某个命名空间内。</p></li><li><p>ClusterRole/ClusterRoleBinding：作用域覆盖整个集群。</p></li></ul><p>由于 ginTools 可能需要操作集群级别的资源，我们选择使用 ClusterRole/ClusterRoleBinding 来为服务账户赋权。以下是具体的 YAML 配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> example</span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> sa<span class="token punctuation">-</span>example</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default</span>
<span class="line"><span class="token punctuation">---</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> example</span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> sa<span class="token punctuation">-</span>example</span>
<span class="line"><span class="token key atrule">roleRef</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io</span>
<span class="line">  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole</span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> sa<span class="token punctuation">-</span>example</span>
<span class="line"><span class="token key atrule">subjects</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount</span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> sa<span class="token punctuation">-</span>example</span>
<span class="line">    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default</span>
<span class="line"><span class="token punctuation">---</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> example</span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> sa<span class="token punctuation">-</span>example</span>
<span class="line"><span class="token key atrule">rules</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token key atrule">resources</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> pods</span>
<span class="line">      <span class="token punctuation">-</span> pods/log</span>
<span class="line">      <span class="token punctuation">-</span> services</span>
<span class="line">      <span class="token punctuation">-</span> events</span>
<span class="line">    <span class="token key atrule">verbs</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> get</span>
<span class="line">      <span class="token punctuation">-</span> list</span>
<span class="line">      <span class="token punctuation">-</span> delete</span>
<span class="line">      <span class="token punctuation">-</span> create</span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token key atrule">resources</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> namespaces</span>
<span class="line">    <span class="token key atrule">verbs</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> get</span>
<span class="line">      <span class="token punctuation">-</span> list</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本测试中，我们仅对 Pod、Service 以及 Pod 的日志（logs）和事件（events）进行操作测试，其他资源暂不涉及。因此，在 ClusterRole 的 resources 字段中，我们只配置了 YAML 文件中 resources 所对应的几种类型。同时，我们为这些资源设置了增（create）、删（delete）、查（get）以及列表（list）四种操作权限。</p><p>接下来是 ginTools 的部署 YAML：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token punctuation">---</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> gintools</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default <span class="token comment"># Deployment 所 在 的 命 名 空 间</span></span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">app</span><span class="token punctuation">:</span> gintools</span>
<span class="line">  <span class="token key atrule">template</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">app</span><span class="token punctuation">:</span> gintools</span>
<span class="line">    <span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> sa<span class="token punctuation">-</span>example <span class="token comment"># 使 用 指 定 的  ServiceAccount</span></span>
<span class="line">      <span class="token key atrule">containers</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> gintools</span>
<span class="line">          <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/aitools/gintools<span class="token punctuation">:</span>v1.1</span>
<span class="line">          <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span></span>
<span class="line"><span class="token punctuation">---</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> gintools<span class="token punctuation">-</span>service</span>
<span class="line">  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default <span class="token comment"># Service 所 在 的 命 名 空 间</span></span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP</span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">38880</span></span>
<span class="line">      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> gintools</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个 YAML 很简单，唯一需要注意的就是 serviceAccountName 字段，这里要填刚刚创建的 sa 的名称。部署完成后，可以在 Higress 控制台的服务列表页面查看到该服务。</p><p><img src="https://static001.geekbang.org/resource/image/3c/d7/3c6c4b7721e08b01bfa483a4a26565d7.png?wh=1456x338" alt="图片"></p><h3 id="暴露-gintools-服务" tabindex="-1"><a class="header-anchor" href="#暴露-gintools-服务"><span>暴露 ginTools 服务</span></a></h3><p>目前，我们已经接近在插件中访问 ginTools 服务的目标，但还差最后一步。由于 Kubernetes（K8s）集群中的服务数量可能非常多，如果所有服务都能被插件访问，会导致以下问题：</p><ol><li><p>xds 推送时的计算开销增加：大量服务信息需要被计算和推送，影响性能。</p></li><li><p>内存开销增加：过多的指标和服务信息会占用大量内存。</p></li></ol><p>为了解决这些问题，Higress 在设计上默认只允许插件访问与路由关联的服务。如果需要放开这一限制，有以下两种方式：</p><p><strong>方式一：修改 Helm 安装参数</strong></p><p>在安装 Higress 时，可以通过修改 Helm 的 global.onlyPushRouteCluster 参数为 false，从而允许插件访问所有 K8s 服务。具体命令如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">helm install higress ./higress-chart \\</span>
<span class="line">  --set global.onlyPushRouteCluster=false</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式虽然简单，但可能会带来额外的计算和内存开销，因此需要根据实际需求谨慎使用。</p><p><strong>方式二：使用 DNS 域名暴露服务</strong></p><p>我们可以通过 DNS 域名的方式将 K8s 服务暴露出来。该方式还是通过在 Higress 控制台的服务来源页面配置。如下图所示，服务端口需要填写服务的 service 暴露出的 pod，域名列表填写服务地址，这些信息在上文中的服务列表中都可以查到。</p><p><img src="https://static001.geekbang.org/resource/image/5c/bd/5ca67b4d1070aed6c57f1e1801318dbd.png?wh=981x814" alt="图片"></p><p>由于 ginTools 在部署时采用的是 ClusterIP 方式的服务暴露，这种方式只能在 Kubernetes 集群内部访问。为了在外部（例如浏览器）测试配置的 DNS 域名方式是否生效，我们需要为 ginTools 添加一个路由规则，将其暴露到外部网络。</p><p><img src="https://static001.geekbang.org/resource/image/65/f0/650cf2fb5b1565ee64b88394d79e7bf0.png?wh=980x536" alt="图片"></p><p><img src="https://static001.geekbang.org/resource/image/d9/24/d9659ef50b3f0a7055ace1b2b6883c24.png?wh=945x158" alt="图片"></p><p>配置完成后，在浏览器输入 URL：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line">http<span class="token punctuation">:</span>//&lt;你的网关IP<span class="token punctuation">&gt;</span>/pods/logs<span class="token punctuation">?</span>podname=&lt;你的ginTools pod名称<span class="token punctuation">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到下图效果，说明服务是可用的。</p><p><img src="https://static001.geekbang.org/resource/image/b1/df/b1b71e21174493d343382c4ffa4515df.png?wh=1910x422" alt="图片"></p><p>我们用肉眼看一下日志的最后一行，提示 watch pod 失败，这是由于上文在配置 sa 权限时，我们故意没有配置 watch 权限导致的。接下来就用该服务作为 Agent 的工具，让 agent 来分析一下这个日志。</p><h3 id="配置与测试-agent" tabindex="-1"><a class="header-anchor" href="#配置与测试-agent"><span>配置与测试 Agent</span></a></h3><p>Agent 的配置主要包含 API 和 LLM 两个部分，我先写一个示例，然后再讲解参数的含义：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">apis</span><span class="token punctuation">:</span></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">api</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span></span>
<span class="line">    openapi<span class="token punctuation">:</span> 3.1.0</span>
<span class="line">    info<span class="token punctuation">:</span></span>
<span class="line">      title<span class="token punctuation">:</span> k8s资源管理系统</span>
<span class="line">      description<span class="token punctuation">:</span> 操作 k8s 资源</span>
<span class="line">      version<span class="token punctuation">:</span> v1.0.0</span>
<span class="line">    servers<span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//gintools<span class="token punctuation">-</span>service.default.svc.cluster.local<span class="token punctuation">:</span><span class="token number">38880</span></span>
<span class="line">    paths<span class="token punctuation">:</span></span>
<span class="line">      /pods/logs<span class="token punctuation">:</span></span>
<span class="line">        get<span class="token punctuation">:</span></span>
<span class="line">          description<span class="token punctuation">:</span> 根据pod名称和命名空间获取pod的日志</span>
<span class="line">          operationId<span class="token punctuation">:</span> get_pod_log</span>
<span class="line">          parameters<span class="token punctuation">:</span></span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ns</span>
<span class="line">              in<span class="token punctuation">:</span> query</span>
<span class="line">              description<span class="token punctuation">:</span> 命名空间名称</span>
<span class="line">              required<span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">              schema<span class="token punctuation">:</span></span>
<span class="line">                type<span class="token punctuation">:</span> string</span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> podname</span>
<span class="line">              in<span class="token punctuation">:</span> query</span>
<span class="line">              description<span class="token punctuation">:</span> pod名称</span>
<span class="line">              required<span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">              schema<span class="token punctuation">:</span></span>
<span class="line">                type<span class="token punctuation">:</span> string</span>
<span class="line">          deprecated<span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">      /<span class="token punctuation">{</span>resource<span class="token punctuation">}</span><span class="token punctuation">:</span></span>
<span class="line">        get<span class="token punctuation">:</span></span>
<span class="line">          description<span class="token punctuation">:</span> 根据k8s资源名称和指定命名空间获取资源列表</span>
<span class="line">          operationId<span class="token punctuation">:</span> get_resource_list</span>
<span class="line">          parameters<span class="token punctuation">:</span></span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ns</span>
<span class="line">              in<span class="token punctuation">:</span> query</span>
<span class="line">              description<span class="token punctuation">:</span> 命名空间名称</span>
<span class="line">              required<span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">              schema<span class="token punctuation">:</span></span>
<span class="line">                type<span class="token punctuation">:</span> string</span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> resource</span>
<span class="line">              in<span class="token punctuation">:</span> path</span>
<span class="line">              description<span class="token punctuation">:</span> k8s资源名称</span>
<span class="line">              required<span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">              schema<span class="token punctuation">:</span></span>
<span class="line">                type<span class="token punctuation">:</span> string</span>
<span class="line">          deprecated<span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">    components<span class="token punctuation">:</span></span>
<span class="line">      schemas<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  apiProvider<span class="token punctuation">:</span></span>
<span class="line">    domain<span class="token punctuation">:</span> <span class="token string">&quot;gintools-service.default.svc.cluster.local&quot;</span></span>
<span class="line">    serviceName<span class="token punctuation">:</span> <span class="token string">&quot;gin.dns&quot;</span></span>
<span class="line">    servicePort<span class="token punctuation">:</span> <span class="token number">38880</span></span>
<span class="line"><span class="token key atrule">llm</span><span class="token punctuation">:</span></span>
<span class="line">  apiKey<span class="token punctuation">:</span> <span class="token string">&quot;sk-85axxxxxxxxxxxxxxxx&quot;</span></span>
<span class="line">  domain<span class="token punctuation">:</span> <span class="token string">&quot;api.deepseek.com&quot;</span></span>
<span class="line">  maxIterations<span class="token punctuation">:</span> <span class="token number">10</span></span>
<span class="line">  model<span class="token punctuation">:</span> <span class="token string">&quot;deepseek-chat&quot;</span></span>
<span class="line">  path<span class="token punctuation">:</span> <span class="token string">&quot;/v1/chat/completions&quot;</span></span>
<span class="line">  serviceName<span class="token punctuation">:</span> <span class="token string">&quot;deepseek.dns&quot;</span></span>
<span class="line">  servicePort<span class="token punctuation">:</span> <span class="token number">443</span></span>
<span class="line"><span class="token key atrule">promptTemplate</span><span class="token punctuation">:</span></span>
<span class="line">  language<span class="token punctuation">:</span> <span class="token string">&quot;CH&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 apis 部分，配置外部工具。此处可以配置多个服务商的工具，例如可以同时配置高德地图 + 心知天气的 API Tools。在这里我们就先配置本地的 ginTools 工具。在 OpenAPI 文档中，url 即为服务的 service 地址。在 apiProvider 部分，由于是本地服务，没有 APIKey，因此没有如下关于 apiKey 的配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">apiKey</span><span class="token punctuation">:</span></span>
<span class="line">  in<span class="token punctuation">:</span> query</span>
<span class="line">  name<span class="token punctuation">:</span> key</span>
<span class="line">  value<span class="token punctuation">:</span> xxxxxxxxxxxxxxx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>llm 部分就是 Agent 从第二轮对话开始所使用的大模型的服务商信息，按自己的实际情况填写即可，但是建议使用推理能力强的模型，否则可能幻觉会比较严重。</p><p>配置完成后，我们用 apifox 软件做一下测试：</p><p><img src="https://static001.geekbang.org/resource/image/9c/e7/9cf6ce78e3e74fc0e257bb2cb32c1ae7.png?wh=1489x573" alt="图片"></p><p>我让 Agent 帮我分析一下 gintools pod 的日志。得到的返回为：</p><p><img src="https://static001.geekbang.org/resource/image/64/bf/6456bb296ba5c647c116a1b873472abf.png?wh=1489x610" alt="图片"></p><p>可以看到 deepseek 模型给出了正确的分析和排查方向。接下来，我们补充给 sa 补充上 watch 权限后，再来测一个列出资源列表的用例。</p><p>补充完 watch 权限的 YAML 如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token punctuation">---</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> example</span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> sa<span class="token punctuation">-</span>example</span>
<span class="line"><span class="token key atrule">rules</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token key atrule">resources</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> pods</span>
<span class="line">      <span class="token punctuation">-</span> pods/log</span>
<span class="line">      <span class="token punctuation">-</span> services</span>
<span class="line">      <span class="token punctuation">-</span> events</span>
<span class="line">    <span class="token key atrule">verbs</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> get</span>
<span class="line">      <span class="token punctuation">-</span> list</span>
<span class="line">      <span class="token punctuation">-</span> delete</span>
<span class="line">      <span class="token punctuation">-</span> create</span>
<span class="line">      <span class="token punctuation">-</span> watch</span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token key atrule">resources</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> namespaces</span>
<span class="line">    <span class="token key atrule">verbs</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> get</span>
<span class="line">      <span class="token punctuation">-</span> list</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要重新执行以下 kubectl apply。配置完成后，我们来进行测试：</p><p><img src="https://static001.geekbang.org/resource/image/d5/be/d5e4548d39d75ff78f7eff934ba716be.png?wh=1492x572" alt="图片"></p><p>结果如下：</p><p><img src="https://static001.geekbang.org/resource/image/01/2c/015450461af591ff2132861fb1916b2c.png?wh=1494x515" alt="图片"></p><p>得到了预期的结果。</p><p>最后，我们测一下 JSON Mode 的效果，首先不自定义 JSON Schema。在 agent 配置中新增如下配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">apis</span><span class="token punctuation">:</span> <span class="token punctuation">...</span></span>
<span class="line"><span class="token key atrule">llm</span><span class="token punctuation">:</span> <span class="token punctuation">...</span></span>
<span class="line"><span class="token key atrule">jsonResp</span><span class="token punctuation">:</span></span>
<span class="line">  enable<span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开始测试：</p><p><img src="https://static001.geekbang.org/resource/image/e7/d4/e77f3a7e2d47d59f6ff65c7b6a4a0ed4.png?wh=1490x587" alt="图片"></p><p>测试结果：</p><p><img src="https://static001.geekbang.org/resource/image/18/5a/1846e7c319d6e0c73cc46844cfdeaf5a.png?wh=1497x414" alt="图片"></p><p>看起来是得到了一坨 JSON，我们让大模型给我们格式化一下，看得更清楚一点：</p><p><img src="https://static001.geekbang.org/resource/image/59/dd/59cc4e4349e1e6607943b2e540c3e4dd.png?wh=1229x294" alt="图片"></p><p><img src="https://static001.geekbang.org/resource/image/67/8c/675e416b78a0ab598ac63f0c56479f8c.png?wh=1114x581" alt="图片"></p><p>可以看到，效果非常惊艳，大模型是建立在读懂了 ginTools 返回的内容的基础上，才自动设计了 Schema，并做了 JSON 格式化。自定义 JSON Schema 的方式就留给你当作课后思考题自行测试吧。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在本节课中，我们首先回顾并解答了上节课的思考题，探讨了 JSON Mode 代码在 AI Agent 插件中的实现方法。接着，我们以第二章和第三章中使用的 ginTools 工具为例，详细介绍了将 Kubernetes 服务暴露给插件的两种方式。经过比较，我们最终选择了 DNS 方式，将 ginTools 服务配置为 Agent Tool，并进行了实际测试。测试结果令人满意，完全符合我们的预期目标。</p><p>通过本节课的学习，相信你对 AI 微服务的特点有了更加直观和清晰的理解。让我们再次总结一下这些特点：</p><ol><li><p><strong>网关具备 AI Agent 能力</strong>：能够自主调用后端 API，实现智能化服务。</p></li><li><p><strong>前端访问方式的革新</strong>：不再需要直接调用各种 API，而是通过自然语言的形式进行交互。</p></li><li><p><strong>后端输出的自然语言化</strong>：通过 JSON Mode 规范格式，使输出更加结构化和易于理解。</p></li></ol><p>你可以通过测试更好地理解这几个特点。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>在课上，我们测试了让大模型自动 JSON 格式化的效果，感兴趣的话你可以测试一下自定义 JSON Schema 又是什么效果。</p>`,85)]))}const o=s(l,[["render",t]]),u=JSON.parse('{"path":"/3.tech/84.AIAgent/24.%E9%80%9A%E8%BF%87Wasm%20API%20Agent%E6%93%8D%E6%8E%A7%E4%B8%8E%E8%BF%90%E7%BB%B4K8s.html","title":"通过 Wasm API Agent 操控与运维 K8s","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"JSON Mode","slug":"json-mode","link":"#json-mode","children":[]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[{"level":3,"title":"部署 ginTools 服务","slug":"部署-gintools-服务","link":"#部署-gintools-服务","children":[]},{"level":3,"title":"暴露 ginTools 服务","slug":"暴露-gintools-服务","link":"#暴露-gintools-服务","children":[]},{"level":3,"title":"配置与测试 Agent","slug":"配置与测试-agent","link":"#配置与测试-agent","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/24.通过Wasm API Agent操控与运维K8s.md"}');export{o as comp,u as data};
