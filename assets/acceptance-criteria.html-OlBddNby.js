import{_ as t,c as a,b as i,o as r}from"./app-C01vnHKY.js";const n={};function c(o,e){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="acceptance-criteria" tabindex="-1"><a class="header-anchor" href="#acceptance-criteria"><span>Acceptance Criteria</span></a></h1><p>In a perfect world, people would understand each other at a glance and nothing could create confusion among them. But in the real world we have to come up with ways to communicate our ideas clearly so that our peers don’t misunderstand us.</p><p>When we start to build a product, we cooperate with our clients to define user stories. User stories are written in the following format: &quot; As a (type of user), I want to (perform some action) so that I (can achieve some goal/result/value).&quot;&quot;</p><h2 id="defining-acceptance-criteria" tabindex="-1"><a class="header-anchor" href="#defining-acceptance-criteria"><span>Defining Acceptance Criteria</span></a></h2><p>So how can we make sure that user stories are completed correctly and comply with a client’s demands? This is where acceptance criteria come into play. Acceptance criteria are a formalized list of requirements that ensure that all user stories are completed and all scenarios are taken into account. Put simply, acceptance criteria specify conditions under which a user story is fulfilled. Concisely written criteria help development teams avoid ambiguity about a client’s demands and prevent miscommunication.</p><p>Writing acceptance criteria is not only important for eliciting the vision of a product from your client, but for the development process as well. It’s natural that different people see the same problem from different angles. Clearly written criteria introduce a single solution to the functionality you intend to implement.</p><h2 id="what-are-acceptance-criteria-used-for" tabindex="-1"><a class="header-anchor" href="#what-are-acceptance-criteria-used-for"><span>What are Acceptance Criteria Used For?</span></a></h2><ul><li><strong>To define boundaries.</strong> Acceptance criteria help development teams define the boundaries of a user story. In other words, acceptance criteria help you confirm when the application functions as desired, meaning that a user story is completed.</li><li><strong>To reach consensus.</strong> Having acceptance criteria synchronizes the development team with the client. The team knows exactly what conditions should be met, just as the client knows what to expect from the app.</li><li><strong>To serve as a basis for tests.</strong> Last but not least, acceptance criteria are a cornerstone of positive and negative testing aimed at checking if a system works as expected.</li><li><strong>To allow for accurate planning and estimation.</strong> Acceptance criteria scenarios allow for the correct division of user stories into tasks so user stories are correctly estimated and planned.</li></ul><h2 id="who-writes-acceptance-criteria-and-when" tabindex="-1"><a class="header-anchor" href="#who-writes-acceptance-criteria-and-when"><span>Who Writes Acceptance Criteria and When?</span></a></h2><p>Either a client or a development team writes acceptance criteria. As a rule, criteria written by a product owner (the client) are reviewed by a member of the development team to make sure that the criteria are clearly specified and that there are no technical constraints or inconsistencies from the development perspective. Such flow is an excellent way to collaborate if a product owner has some experience in software development and is aware of how to write project documentation.</p><p>Remember that acceptance criteria should be specified upfront and never after the development stage has started. Therefore, a team and a product owner should agree on minimum deliverables that will meet the product owner’s requirements.</p><h2 id="how-to-write-acceptance-criteria" tabindex="-1"><a class="header-anchor" href="#how-to-write-acceptance-criteria"><span>How to Write Acceptance Criteria</span></a></h2><p>There are several types of acceptance criteria. The most popular are rules-oriented (in the form of a list) and scenario-oriented (in the form of scenarios that illustrate each criterion). The scenario-oriented type is popular among Agile teams since it helps with getting across requirements, envisaging various use cases, and further using scenarios for manual and automated acceptance tests.</p><p>The common template for describing acceptance criteria using a scenario-oriented approach is the Given/When/Then format that is derived from behavior-driven development (BDD). The Given/When/Then format is used for writing acceptance tests that ensure that all the specification requirements are met.</p><h2 id="what-acceptance-criteria-should-be-included" tabindex="-1"><a class="header-anchor" href="#what-acceptance-criteria-should-be-included"><span>What Acceptance criteria should be included</span></a></h2><ul><li>Negative scenarios of the functionality.</li><li>The impact of a user story to other features.</li><li>UX concerns</li><li>Functional and non-functional use cases</li><li>Performance concerns and guidelines.</li><li>What system/feature intend to do</li><li>System of feature doesn’t do anything, isn’t supposed to do</li><li>End-to-end user flow</li></ul><h2 id="what-agile-acceptance-criteria-should-not-include" tabindex="-1"><a class="header-anchor" href="#what-agile-acceptance-criteria-should-not-include"><span>What Agile Acceptance Criteria Should Not Include</span></a></h2><ul><li>Code Review was done</li><li>Non-blocker or major issues</li><li>Performance testing performed</li><li>Acceptance and functional testing done</li></ul><p>Above checklist need to be included as part of DoD (definition of done), which serve as a checklist for overall sprint process, those shouldn’t be part of acceptance criteria.</p><h2 id="_7-tips-for-writing-acceptance-criteria" tabindex="-1"><a class="header-anchor" href="#_7-tips-for-writing-acceptance-criteria"><span>7 Tips for Writing Acceptance Criteria</span></a></h2><ol><li>Each product backlog item or user story should have at least one acceptance criteria. Hey, don’t take writing acceptance criteria lightly or think of skipping it.</li><li>Acceptance Criteria is written before implementation – this is obvious yet frequently missed by teams. Write acceptance criteria after the implementation and miss the benefits.</li><li>Each acceptance criterion is independently testable.</li><li>Acceptance criteria must have a clear Pass / Fail result. Write complex and long sentences at your own risk.</li><li>It focuses on the end result – What. Not the solution approach – How.</li><li>Include functional as well as non-functional criteria – when relevant.</li><li>Team members write acceptance criteria and the Product Owner verifies it. It confirms the PO and the team have shared understanding of the user story.</li></ol><h2 id="acceptance-criteria-examples" tabindex="-1"><a class="header-anchor" href="#acceptance-criteria-examples"><span>Acceptance Criteria Examples</span></a></h2><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example 1</span></a></h3><p>As a credit card holder, I want to view my statement(or account) balance, so that I can pay the balance due.</p><p><strong>The acceptance criteria for this story could be:</strong></p><ul><li>Display statement balance upon authentication. Say for example $1560.</li><li>Display total balance. For example $3560. Here the balance due from the current period is $2560 and past balance due is $2000.</li><li>Show Minimum payment due. For example $140.</li><li>Show Payment due date. For example May 16th of the current month.</li><li>Show error message if service not responding or timeout. For example ‘Sorry, something went wrong with the service. Please try again.’</li></ul><h3 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2"><span>Example 2</span></a></h3><p>As a teacher, I want to generate assessment report, so I can evaluate student performance.</p><p><strong>The acceptance criteria for this story could be:</strong></p><ul><li>Show a student’s current assessment score.</li><li>Display past assessment score of the student.</li><li>Provide an option to Print / Save / Share. (By the way, this could be split as a separate user story by itself).</li><li>Display error message if service not responding. (If a team chooses to add the Error Message as their definition of done for all stories – where ever applicable, it could be omitted from the acceptance criteria).</li></ul><h2 id="when-to-write-acceptance-criteria" tabindex="-1"><a class="header-anchor" href="#when-to-write-acceptance-criteria"><span>When to write Acceptance Criteria?</span></a></h2><p>Acceptance criteria (AC) should be written anytime before the user story is deemed ready to enter the Sprint Planning. Usually it is written during the product backlog refinement meeting. AC can be progressively developed and added to a user story during the refinement. However it should not be kept for when the development team start implementing a user story. “If we write and review the acceptance criteria before implementation begins, we’re more likely to capture the customer intent rather than the development reality”</p>',32)]))}const l=t(n,[["render",c]]),h=JSON.parse('{"path":"/1.capacity/09.scrum/acceptance-criteria.html","title":"Acceptance Criteria","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"Defining Acceptance Criteria","slug":"defining-acceptance-criteria","link":"#defining-acceptance-criteria","children":[]},{"level":2,"title":"What are Acceptance Criteria Used For?","slug":"what-are-acceptance-criteria-used-for","link":"#what-are-acceptance-criteria-used-for","children":[]},{"level":2,"title":"Who Writes Acceptance Criteria and When?","slug":"who-writes-acceptance-criteria-and-when","link":"#who-writes-acceptance-criteria-and-when","children":[]},{"level":2,"title":"How to Write Acceptance Criteria","slug":"how-to-write-acceptance-criteria","link":"#how-to-write-acceptance-criteria","children":[]},{"level":2,"title":"What Acceptance criteria should be included","slug":"what-acceptance-criteria-should-be-included","link":"#what-acceptance-criteria-should-be-included","children":[]},{"level":2,"title":"What Agile Acceptance Criteria Should Not Include","slug":"what-agile-acceptance-criteria-should-not-include","link":"#what-agile-acceptance-criteria-should-not-include","children":[]},{"level":2,"title":"7 Tips for Writing Acceptance Criteria","slug":"_7-tips-for-writing-acceptance-criteria","link":"#_7-tips-for-writing-acceptance-criteria","children":[]},{"level":2,"title":"Acceptance Criteria Examples","slug":"acceptance-criteria-examples","link":"#acceptance-criteria-examples","children":[{"level":3,"title":"Example 1","slug":"example-1","link":"#example-1","children":[]},{"level":3,"title":"Example 2","slug":"example-2","link":"#example-2","children":[]}]},{"level":2,"title":"When to write Acceptance Criteria?","slug":"when-to-write-acceptance-criteria","link":"#when-to-write-acceptance-criteria","children":[]}],"git":{"updatedTime":1745032055000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":3,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"a2b6e78156eb7f1fed6ecb0952cc98c6b90aa9d3","time":1745032055000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"change hierarchy"},{"hash":"cf1a535ce24165a7f8da8bf85c1c9f2de88d6068","time":1692634731000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: change the groups"},{"hash":"2ef20e08fd212b23fcf32fc33614285ba8331430","time":1692491740000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: 2023-08-19"}]},"filePathRelative":"1.capacity/09.scrum/acceptance-criteria.md"}');export{l as comp,h as data};
