import{_ as s,c as a,b as p,o as t}from"./app-C01vnHKY.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="用-wasm-实现-api-agent" tabindex="-1"><a class="header-anchor" href="#用-wasm-实现-api-agent"><span>用 Wasm 实现 API Agent</span></a></h1><p>上节课我们探讨了 AI Proxy 插件，该插件为网关用户提供了便捷的统一 OpenAI 协议访问各类大模型的功能，是网关 AI 应用的基石。本节课我们将在这一基础之上使用 Wasm 技术来实现上一章节中讲解的 API Agent。</p><p>网关的核心功能如图所示，它为后端 API 提供统一的访问入口和路由转发规则。外部用户通过该入口访问各个 API，而非直接暴露所有后端服务 API，从而增强了系统的安全性和可管理性。</p><p><img src="https://static001.geekbang.org/resource/image/9f/d1/9f3381213e6c629b05bb794831dc06d1.jpg?wh=1441x1017" alt="图片"></p><p>当需要请求多个服务时，通常需要发送多条 API 请求。然而，如果在网关上集成 AI Agent，相当于为网关赋予了“大脑”。该 Agent 能够统一管理后端的所有 API，用户只需通过自然语言与网关交互，网关便会自动调用相应的 API，并将结果以自然语言的形式返回。这一过程去除了技术复杂性，使交互变得流畅自然，充分展现了 AI 微服务的魅力。</p><p><img src="https://static001.geekbang.org/resource/image/e7/76/e7bc4bd230e65289a9dd0a9b9ccb5976.jpg?wh=1475x998" alt="图片"></p><p>接下来，我们将进入今天的代码实践环节。</p><h2 id="代码实践" tabindex="-1"><a class="header-anchor" href="#代码实践"><span>代码实践</span></a></h2><p>API Agent 的实现原理我们上一章节已经详细阐述过了，这节课不再重复。我将重点结合 Wasm 的相关知识，讲解如何将上一章节的代码转换为 Wasm 版本。</p><h3 id="总体架构" tabindex="-1"><a class="header-anchor" href="#总体架构"><span>总体架构</span></a></h3><p>我们先来看一下总体架构设计。</p><p>在第 0 步，用户在开启插件时，需要配置 tools 等相关参数，这个在讲配置解析时再详细说明有哪些和之前不一样的参数。</p><p>插件开启后，就是第 1 步，用户使用 OpenAI 协议向网关发送 Request 请求，此时 Agent 插件会在 RequestBody 阶段进行拦截，取出 Request Body 中的 messages，之后在第 2 步填充 ReAct 模板，组成新的 messages 替换原有的 Request Body 。</p><p>之后就是通过 AI Proxy 插件将请求发送给大模型，并得到了大模型的反馈，也就是图中的第 3、4、5 步。我们如何拦截大模型的反馈呢？没错，我们要在 ResponseBody 阶段拦截。</p><p>此时我们得到了大模型的第一次反馈，也就是是否要调用工具，还是已经得到了 Final Answer。此后就要循环思考了，如果要调用工具，就要使用同样的 HTTP 方法调用工具，并将结果反馈大模型，也就是图中的第 6、7 两步；如果得到了 Final Answer，就直接反馈给用户，也就是图中的第 8 步。</p><p>如果你已经对我们之前讲过的 ReAct Agent 的流程非常熟悉了，应该就能感受到，**Agent 的核心思考阶段，都在 ResponseBody 阶段完成了。**因此这一阶段非常重要。</p><p><img src="https://static001.geekbang.org/resource/image/89/56/893a0dbc074abed038283154a893a356.jpg?wh=1920x1034" alt="图片"></p><p>这就是我们这个插件在网关上的整体架构流程和设计思路，理清思路后，代码就好说了。</p><h3 id="配置解析" tabindex="-1"><a class="header-anchor" href="#配置解析"><span>配置解析</span></a></h3><p>首先来看配置解析。在[第 16 节课]中，我曾设计过 API Agent 的配置，当时由于默认大模型使用的是通义千问，因此设计的结构如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">instruction</span><span class="token punctuation">:</span> xxxx</span>
<span class="line"><span class="token key atrule">apis</span><span class="token punctuation">:</span></span>
<span class="line"><span class="token punctuation">-</span> apiProvider：</span>
<span class="line">    <span class="token key atrule">apikey</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">name</span><span class="token punctuation">:</span> key</span>
<span class="line">      <span class="token key atrule">value</span><span class="token punctuation">:</span> xxx</span>
<span class="line">      <span class="token key atrule">in</span><span class="token punctuation">:</span> header</span>
<span class="line">  <span class="token key atrule">api</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">    openapi: 3.1.0</span>
<span class="line">    info: xxx</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构中只包含 tools 供应商的信息以及 tools 的 OpenAPI 文档。</p><p>本次在插件中，就需要增加大模型相关的配置了，保证大模型是用户可选的。除此之外，我还增加了 JSON Mode 功能，这是为了满足部分用户希望按照规定的 JSON 格式返回内容，便于其在程序中做一些其他处理而设计的，因此也需要增加 JSON Mode 相关的配置。</p><p>配置就变成了如表格所示的样子：</p><p><img src="https://static001.geekbang.org/resource/image/0f/a0/0fcf824344d747ff6368f5a230a9e3a0.png?wh=1920x588" alt="图片"> llm 的定义如下：</p><p><img src="https://static001.geekbang.org/resource/image/de/8e/de0832f426c4f8d018be45acf8e3318e.png?wh=1920x1173" alt="图片"></p><p>jsonResp 的定义如下：</p><p><img src="https://static001.geekbang.org/resource/image/c8/b3/c8650747b15c343d45cac432177666b3.png?wh=1920x481" alt="图片"></p><p>由于本插件不涉及全局配置与路由级配置不一致的问题，因此直接使用 wrapper.ParseConfigBy 进行配置解析即可。配置解析的代码在 API Agent 章节都已经讲解过，主要复杂点在于 OpenAPI 文档的处理，其他参数直接使用 github.com/tidwall/gjson 包提供的 JSON 解析方法进行解析就好，注意参数的层级包含关系。</p><h3 id="onhttprequestbody" tabindex="-1"><a class="header-anchor" href="#onhttprequestbody"><span>onHttpRequestBody</span></a></h3><p>在总体架构小节，讲了在 RequestBody 阶段，主要用来拦截用户基于 OpenAI 协议的请求，并替换 Body 中的 messages 部分。messages 是由两部分组成的，第一部分是用户在请求中携带的历史对话，这一部分需要拆解出来放到 ReAct 模板的 historic_messages 中；另一部分是用户 query，需要放到模板的 query 部分。例如一段 messages 如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token property">&quot;messages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;济南的天气如何？&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assistant&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\&quot;目前，济南市的天气为多云，气温为24℃，数据更新时间为2024年9月12日21时50分14秒。\\&quot;&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;北京呢？&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>query 部分就是 messages[len(messages)-1] 的部分，其余部分都是历史对话。所以代码可以这么写：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">var</span> query <span class="token builtin">string</span></span>
<span class="line"><span class="token keyword">var</span> history <span class="token builtin">string</span></span>
<span class="line">messageLength <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>rawRequest<span class="token punctuation">.</span>Messages<span class="token punctuation">)</span></span>
<span class="line">log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;[onHttpRequestBody] messageLength: %s&quot;</span><span class="token punctuation">,</span> messageLength<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> messageLength <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    query <span class="token operator">=</span> rawRequest<span class="token punctuation">.</span>Messages<span class="token punctuation">[</span>messageLength<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Content</span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;[onHttpRequestBody] query: %s&quot;</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> messageLength <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> messageLength<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">{</span></span>
<span class="line">            history <span class="token operator">+=</span> <span class="token string">&quot;human: &quot;</span> <span class="token operator">+</span> rawRequest<span class="token punctuation">.</span>Messages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Content <span class="token operator">+</span> <span class="token string">&quot;\\nAI: &quot;</span> <span class="token operator">+</span> rawRequest<span class="token punctuation">.</span>Messages<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Content</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        history <span class="token operator">=</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，便是组装 ReAct 模板的过程，代码就不再展示。组装完成后，可以替换原始的 body，并恢复被拦截的请求。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">newbody<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>rawRequest<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue</span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;[onHttpRequestBody] newRequestBody: %s&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>newbody<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    err <span class="token operator">:=</span> proxywasm<span class="token punctuation">.</span><span class="token function">ReplaceHttpRequestBody</span><span class="token punctuation">(</span>newbody<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;failed replace err: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        proxywasm<span class="token punctuation">.</span><span class="token function">SendHttpResponse</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json; charset=utf-8&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ReturnResponseTemplate<span class="token punctuation">,</span> <span class="token string">&quot;替换失败&quot;</span><span class="token operator">+</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;[onHttpRequestBody] replace request success&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onhttpresponsebody" tabindex="-1"><a class="header-anchor" href="#onhttpresponsebody"><span>onHttpResponseBody</span></a></h3><p>Agent 多轮对话循环调用工具的代码就是在这一部分了。在之前的 Agent 代码中，我们一直都是通过一个 for{} 死循环来进行控制。但在 Wasm 中，所有的 HTTP 的外部调用，都是采用的回调的方式，因此应采用递归调用的方式来替代 for{} 死循环。</p><p>我设计了两个函数来实现递归，第一个函数是 toolsCall 函数，第二个是 toolsCallResult 函数。</p><p>toolsCall 的核心代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">toolsCall</span><span class="token punctuation">(</span>ctx wrapper<span class="token punctuation">.</span>HttpContext<span class="token punctuation">,</span> llmClient wrapper<span class="token punctuation">.</span>HttpClient<span class="token punctuation">,</span> llmInfo LLMInfo<span class="token punctuation">,</span> jsonResp JsonResp<span class="token punctuation">,</span> aPIsParam <span class="token punctuation">[</span><span class="token punctuation">]</span>APIsParam<span class="token punctuation">,</span> aPIClient <span class="token punctuation">[</span><span class="token punctuation">]</span>wrapper<span class="token punctuation">.</span>HttpClient<span class="token punctuation">,</span> content <span class="token builtin">string</span><span class="token punctuation">,</span> rawResponse Response<span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span>Action<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    dashscope<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">AddForAssistant</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    action<span class="token punctuation">,</span> actionInput <span class="token operator">:=</span> <span class="token function">outputParser</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> log<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//得到最终答案</span></span>
<span class="line">    <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token string">&quot;Final Answer&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> actionInput</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    count <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">GetContext</span><span class="token punctuation">(</span>ToolCallsCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span></span>
<span class="line">    count<span class="token operator">++</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;toolCallsCount:%d, config.LLMInfo.MaxIterations=%d&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> llmInfo<span class="token punctuation">.</span>MaxIterations<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">//函数递归调用次数，达到了预设的循环次数，强制结束</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token function">int64</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">&gt;</span> llmInfo<span class="token punctuation">.</span>MaxIterations <span class="token punctuation">{</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">SetContext</span><span class="token punctuation">(</span>ToolCallsCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        ctx<span class="token punctuation">.</span><span class="token function">SetContext</span><span class="token punctuation">(</span>ToolCallsCount<span class="token punctuation">,</span> count<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> apiClient <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        err <span class="token operator">:=</span> apiClient<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span></span>
<span class="line">            method<span class="token punctuation">,</span></span>
<span class="line">            urlStr<span class="token punctuation">,</span></span>
<span class="line">            headers<span class="token punctuation">,</span></span>
<span class="line">            reqBody<span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">func</span><span class="token punctuation">(</span>statusCode <span class="token builtin">int</span><span class="token punctuation">,</span> responseHeaders http<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> responseBody <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">toolsCallResult</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> llmClient<span class="token punctuation">,</span> llmInfo<span class="token punctuation">,</span> jsonResp<span class="token punctuation">,</span> aPIsParam<span class="token punctuation">,</span> aPIClient<span class="token punctuation">,</span> content<span class="token punctuation">,</span> rawResponse<span class="token punctuation">,</span> log<span class="token punctuation">,</span> statusCode<span class="token punctuation">,</span> responseBody<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span>maxExecutionTime<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;tool calls error: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            proxywasm<span class="token punctuation">.</span><span class="token function">ResumeHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionPause<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先通过 outputParser 函数解析出大模型的返回，得到 Action 与 Action Input。然后判断 Action 是否是 &quot;Final Answer&quot;，如果是，则直接返回 types.ActionContinue 以及 Action Input 即可，代码会解析出 Action Input 的内容，替换原始 Body，返回给用户。如果不是，则开启组装 URL 和参数，调用工具的过程。调用工具是通过 apiClient.Call 实现的。调用工具的结果会通过回调函数得到，并进入 toolsCallResult 函数对结果进行处理。</p><p>toolsCallResult 的代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">toolsCallResult</span><span class="token punctuation">(</span>ctx wrapper<span class="token punctuation">.</span>HttpContext<span class="token punctuation">,</span> llmClient wrapper<span class="token punctuation">.</span>HttpClient<span class="token punctuation">,</span> llmInfo LLMInfo<span class="token punctuation">,</span> jsonResp JsonResp<span class="token punctuation">,</span> aPIsParam <span class="token punctuation">[</span><span class="token punctuation">]</span>APIsParam<span class="token punctuation">,</span> aPIClient <span class="token punctuation">[</span><span class="token punctuation">]</span>wrapper<span class="token punctuation">.</span>HttpClient<span class="token punctuation">,</span> content <span class="token builtin">string</span><span class="token punctuation">,</span> rawResponse Response<span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">,</span> statusCode <span class="token builtin">int</span><span class="token punctuation">,</span> responseBody <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> statusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;statusCode: %d&quot;</span><span class="token punctuation">,</span> statusCode<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;========function result========&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    observation <span class="token operator">:=</span> <span class="token string">&quot;Observation: &quot;</span> <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    dashscope<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">AddForUser</span><span class="token punctuation">(</span>observation<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    completion <span class="token operator">:=</span> dashscope<span class="token punctuation">.</span>Completion<span class="token punctuation">{</span></span>
<span class="line">        Model<span class="token punctuation">:</span>     llmInfo<span class="token punctuation">.</span>Model<span class="token punctuation">,</span></span>
<span class="line">        Messages<span class="token punctuation">:</span>  dashscope<span class="token punctuation">.</span>MessageStore<span class="token punctuation">,</span></span>
<span class="line">        MaxTokens<span class="token punctuation">:</span> llmInfo<span class="token punctuation">.</span>MaxTokens<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    headers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bearer &quot;</span> <span class="token operator">+</span> llmInfo<span class="token punctuation">.</span>APIKey<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    completionSerialized<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>completion<span class="token punctuation">)</span></span>
<span class="line">    err <span class="token operator">:=</span> llmClient<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span></span>
<span class="line">        llmInfo<span class="token punctuation">.</span>Path<span class="token punctuation">,</span></span>
<span class="line">        headers<span class="token punctuation">,</span></span>
<span class="line">        completionSerialized<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">func</span><span class="token punctuation">(</span>statusCode <span class="token builtin">int</span><span class="token punctuation">,</span> responseHeaders http<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> responseBody <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//得到gpt的返回结果</span></span>
<span class="line">            <span class="token keyword">var</span> responseCompletion dashscope<span class="token punctuation">.</span>CompletionResponse</span>
<span class="line">            <span class="token boolean">_</span> <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">,</span> <span class="token operator">&amp;</span>responseCompletion<span class="token punctuation">)</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;[toolsCall] content: %s&quot;</span><span class="token punctuation">,</span> responseCompletion<span class="token punctuation">.</span>Choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> responseCompletion<span class="token punctuation">.</span>Choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Content <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">                retType<span class="token punctuation">,</span> actionInput <span class="token operator">:=</span> <span class="token function">toolsCall</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> llmClient<span class="token punctuation">,</span> llmInfo<span class="token punctuation">,</span> jsonResp<span class="token punctuation">,</span> aPIsParam<span class="token punctuation">,</span> aPIClient<span class="token punctuation">,</span> responseCompletion<span class="token punctuation">.</span>Choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Content<span class="token punctuation">,</span> rawResponse<span class="token punctuation">,</span> log<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">if</span> retType <span class="token operator">==</span> types<span class="token punctuation">.</span>ActionContinue <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">//得到了Final Answer</span></span>
<span class="line">                    <span class="token keyword">var</span> assistantMessage Message</span>
<span class="line">                    <span class="token keyword">var</span> streamMode <span class="token builtin">bool</span></span>
<span class="line">                    <span class="token keyword">if</span> ctx<span class="token punctuation">.</span><span class="token function">GetContext</span><span class="token punctuation">(</span>StreamContextKey<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                        streamMode <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">                        <span class="token keyword">if</span> jsonResp<span class="token punctuation">.</span>Enable <span class="token punctuation">{</span></span>
<span class="line">                            <span class="token function">jsonFormat</span><span class="token punctuation">(</span>llmClient<span class="token punctuation">,</span> llmInfo<span class="token punctuation">,</span> jsonResp<span class="token punctuation">.</span>JsonSchema<span class="token punctuation">,</span> assistantMessage<span class="token punctuation">,</span> actionInput<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> streamMode<span class="token punctuation">,</span> rawResponse<span class="token punctuation">,</span> log<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                            <span class="token function">noneStream</span><span class="token punctuation">(</span>assistantMessage<span class="token punctuation">,</span> actionInput<span class="token punctuation">,</span> rawResponse<span class="token punctuation">,</span> log<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        streamMode <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">                        <span class="token keyword">if</span> jsonResp<span class="token punctuation">.</span>Enable <span class="token punctuation">{</span></span>
<span class="line">                            <span class="token function">jsonFormat</span><span class="token punctuation">(</span>llmClient<span class="token punctuation">,</span> llmInfo<span class="token punctuation">,</span> jsonResp<span class="token punctuation">.</span>JsonSchema<span class="token punctuation">,</span> assistantMessage<span class="token punctuation">,</span> actionInput<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> streamMode<span class="token punctuation">,</span> rawResponse<span class="token punctuation">,</span> log<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                            <span class="token function">stream</span><span class="token punctuation">(</span>actionInput<span class="token punctuation">,</span> rawResponse<span class="token punctuation">,</span> log<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                proxywasm<span class="token punctuation">.</span><span class="token function">ResumeHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span>llmInfo<span class="token punctuation">.</span>MaxExecutionTime<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;[onHttpRequestBody] completion err: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        proxywasm<span class="token punctuation">.</span><span class="token function">ResumeHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码拼接了 Obervation，然后对大模型进行了请求，这个过程相信你已经很熟悉了。在得到大模型的回复后，又会继续调用 toolsCall 函数，这样无限递归。总之退出条件只有两个，要么遇到 &quot;Final Answer&quot;，要么迭代次数达到上限。</p><p>至此，代码的核心功能已经完成。在掌握了 Agent 和 Wasm 的编程方法后，编写本节课的插件相对轻松。这也正是我一直强调要重点学习编程套路的原因。本节课我们暂不进行测试，下一节课我们将结合之前开发的 K8s 运维助手工具，配合本插件，再进行全面的测试。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本节课是对过去所学知识点的复习与进阶实战。在之前的章节中，我们从最简陋的 Agent 开始，逐步深入，最终学习了标准 API Agent 的实现方式。结合本章节前面几课时的 Wasm 理论与实践，我们在本节课中使用 Wasm 完成了 Agent 功能的实现。这一功能也是我今年参加阿里云天池云原生编程挑战赛附加题的作品，最终获得了 18 分（满分 20 分）的成绩，位列第一名。</p><p>本节课的代码已合并到 Higress 源码中，你可以点击<a href="https://github.com/alibaba/higress/tree/main/plugins/wasm-go/extensions/ai-agent" target="_blank" rel="noopener noreferrer">链接</a>查看源码详情。至此，编码实践环节即将告一段落。本章节的最后几课时我将以测试和方案介绍为主，和你一起开开思路，讨论应用落地方向等等。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>我在配置解析模块，讲到该插件还支持 JSOM Mode 功能，你认为该功能应该如何实现呢？在下一节课，我会花一点小篇幅补充上这个知识点。</p>`,51)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/3.tech/84.AIAgent/23.%E7%94%A8Wasm%E5%AE%9E%E7%8E%B0API%20Agent.html","title":"用 Wasm 实现 API Agent","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"代码实践","slug":"代码实践","link":"#代码实践","children":[{"level":3,"title":"总体架构","slug":"总体架构","link":"#总体架构","children":[]},{"level":3,"title":"配置解析","slug":"配置解析","link":"#配置解析","children":[]},{"level":3,"title":"onHttpRequestBody","slug":"onhttprequestbody","link":"#onhttprequestbody","children":[]},{"level":3,"title":"onHttpResponseBody","slug":"onhttpresponsebody","link":"#onhttpresponsebody","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/23.用Wasm实现API Agent.md"}');export{i as comp,u as data};
