import{_ as n,c as s,b as e,o as i}from"./app-C01vnHKY.js";const l={};function p(r,a){return i(),s("div",null,a[0]||(a[0]=[e(`<h1 id="基础篇-numpy-上-核心数据结构详解" tabindex="-1"><a class="header-anchor" href="#基础篇-numpy-上-核心数据结构详解"><span>基础篇 NumPy（上）核心数据结构详解</span></a></h1><p>通过前面两节课，我们已经对 PyTorch 有了初步的了解，你是不是迫不及待想要动手玩转 PyTorch 了？先别着急，我们有必要先品尝一道“前菜”，它就是 NumPy。</p><p>为什么我们要先拿下 NumPy 呢？我相信，无论你正在从事或打算入门机器学习，不接触 NumPy 几乎不可能。现在的主流深度学习框架 PyTorch 与 TensorFlow 中最基本的计算单元 Tensor，都与 NumPy 数组有着类似的计算逻辑，可以说掌握了 NumPy 对学习这两种框架都有很大帮助。</p><p>另外，NumPy 还被广泛用在 Pandas，SciPy 等其他数据科学与科学计算的 Python 模块中。而我们日常用得越来越多的人脸识别技术（属于计算机视觉领域），其原理本质上就是先把图片转换成 NumPy 的数组，然后再进行一系列处理。</p><p>为了让你真正吃透 NumPy，我会用两节课的内容讲解 NumPy。这节课，我们先介绍 NumPy 的数组、数组的关键属性以及非常重要的轴的概念。</p><h2 id="什么是-numpy" tabindex="-1"><a class="header-anchor" href="#什么是-numpy"><span>什么是 NumPy</span></a></h2><p>NumPy 是用于 Python 中科学计算的一个基础包。它提供了一个多维度的数组对象（稍后展开），以及针对数组对象的各种快速操作，例如排序、变换，选择等。NumPy 的安装方式非常简单，可以使用 Conda 安装，命令如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">conda install numpy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或使用 pip 进行安装，命令如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">pip install numpy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="numpy-数组" tabindex="-1"><a class="header-anchor" href="#numpy-数组"><span>NumPy 数组</span></a></h2><p>刚才所说的数组对象是 NumPy 中最核心的组成部分，这个数组叫做 ndarray，是“N-dimensional array”的缩写。其中的 N 是一个数字，指代维度，例如你常常能听到的 1-D 数组、2-D 数组或者更高维度的数组。</p><p>在 NumPy 中，数组是由 numpy.ndarray 类来实现的，它是 NumPy 的核心数据结构。我们今天的内容就是围绕它进行展开的。</p><p>学习一个新知识，我们常用的方法就是跟熟悉的东西做对比。NumPy 数组从逻辑上来看，与其他编程语言中的数组是一样的，索引也是从 0 开始。而 Python 中的列表，其实也可以达到与 NumPy 数组相同的功能，但它们又有差异，做个对比你就能体会到 NumPy 数组的特点了。</p><p>1.Python 中的列表可以动态地改变，而 NumPy 数组是不可以的，它在创建时就有固定大小了。改变 Numpy 数组长度的话，会新创建一个新的数组并且删除原数组。 2.NumPy 数组中的数据类型必须是一样的，而列表中的元素可以是多样的。 3.NumPy 针对 NumPy 数组一系列的运算进行了优化，使得其速度特别快，并且相对于 Python 中的列表，同等操作只需使用更少的内存。</p><h2 id="创建数组" tabindex="-1"><a class="header-anchor" href="#创建数组"><span>创建数组</span></a></h2><p>好，那就让我们来看看 NumPy 数组是怎么创建的吧？</p><p>最简单的方法就是把一个列表传入到 np.array()或 np.asarray()中，这个列表可以是任意维度的。np.array()属于深拷贝，np.asarray()则是浅拷贝，它们的区别我们下节课再细讲，这里你有个印象就行。</p><p>我们可以先试着创建一个一维的数组，代码如下。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;import numpy as np</span>
<span class="line">&gt;&gt;&gt;#引入一次即可</span>
<span class="line"></span>
<span class="line">&gt;&gt;&gt;arr_1_d = np.asarray([1])</span>
<span class="line">&gt;&gt;&gt;print(arr_1_d)</span>
<span class="line">[1]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再创建一个二维数组：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;arr_2_d = np.asarray([[1, 2], [3, 4]])</span>
<span class="line">&gt;&gt;&gt;print(arr_2_d)</span>
<span class="line">[[1 2]</span>
<span class="line"> [3 4]]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以试试自己创建更高维度的数组。</p><h3 id="数组的属性" tabindex="-1"><a class="header-anchor" href="#数组的属性"><span>数组的属性</span></a></h3><p>作为一个数组，NumPy 有一些固有的属性，我们今天来介绍非常常用且关键的数组维度、形状、size 与数据类型。</p><h4 id="ndim" tabindex="-1"><a class="header-anchor" href="#ndim"><span>ndim</span></a></h4><p>ndim 表示数组维度（或轴）的个数。刚才创建的数组 arr_1_d 的轴的个数就是 1，arr_2_d 的轴的个数就是 2。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;arr_1_d.ndim</span>
<span class="line">1</span>
<span class="line">&gt;&gt;&gt;arr_2_d.ndim</span>
<span class="line">2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="shape" tabindex="-1"><a class="header-anchor" href="#shape"><span>shape</span></a></h4><p>shape 表示数组的维度或形状， 是一个整数的元组，元组的长度等于 ndim。</p><p>arr_1_d 的形状就是（1，）（一个向量）， arr_2_d 的形状就是(2, 2)（一个矩阵）。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;arr_1_d.shape</span>
<span class="line">(1,)</span>
<span class="line">&gt;&gt;&gt;arr_2_d.shape</span>
<span class="line">(2, 2)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shape 这个属性在实际中用途还是非常广的。比如说，我们现在有这样的数据(B, W, H, C)，熟悉深度学习的同学肯定会知道，这代表一个 batch size 为 B 的（W，H，C）数据。</p><p>现在我们需要根据（W，H，C）对数据进行变形或者其他处理，这时我们可以直接使用 input_data.shape[1:3]获取到数据的形状，而不需要直接在程序中硬编程、直接写好输入数据的宽高以及通道数。</p><p>在实际的工作当中，我们经常需要对数组的形状进行变换，就可以使用 arr.reshape()函数，在不改变数组元素内容的情况下变换数组的形状。但是你需要注意的是，<strong>变换前与变换后数组的元素个数需要是一样的</strong>，请看下面的代码。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;arr_2_d.shape</span>
<span class="line">(2, 2)</span>
<span class="line">&gt;&gt;&gt;arr_2_d</span>
<span class="line">[[1 2]</span>
<span class="line"> [3 4]]</span>
<span class="line"># 将arr_2_d reshape为(4，1)的数组</span>
<span class="line">&gt;&gt;&gt;arr_2_d.reshape((4，1))</span>
<span class="line">array([[1],</span>
<span class="line">       [2],</span>
<span class="line">       [3],</span>
<span class="line">       [4]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以使用 np.reshape(a, newshape, order)对数组 a 进行 reshape，新的形状在 newshape 中指定。</p><p>这里需要注意的是，reshape 函数有个<strong>order 参数</strong>，它是指以什么样的顺序读写元素，其中有这样几个参数。</p><ul><li>&#39;C&#39;：默认参数，使用类似 C-like 语言（行优先）中的索引方式进行读写。</li><li>&#39;F&#39;：使用类似 Fortran-like 语言（列优先）中的索引方式进行读写。</li><li>&#39;A&#39;：原数组如果是按照‘C’的方式存储数组，则用‘C’的索引对数组进行 reshape，否则使用&#39;F&#39;的索引方式。</li></ul><p>reshape 的过程你可以这样理解，首先需要根据指定的方式(&#39;C&#39;或&#39;F&#39;)将原数组展开，然后再根据指定的方式写入到新的数组中。</p><p>这是什么意思呢？先看一个简单的 2 维数组的例子。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;a = np.arange(6).reshape(2,3)</span>
<span class="line">array([[0, 1, 2],</span>
<span class="line">       [3, 4, 5]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们要将数组 a，按照&#39;C&#39;的方式 reshape 成(3,2)，可以这样操作。首先将原数组展开，对于‘C’的方式来说是行优先，最后一个维度最优先改变，所以展开结果如下，序号那一列代表展开顺序。 <img src="https://static001.geekbang.org/resource/image/46/e1/46dc5efc0fc1ff8yya419d459349cde1.jpg?wh=1185x621" alt="图片"></p><p>所以，reshape 后的数组，是按照 0，1，2，3，4，5 这个序列进行写入数据的。reshape 后的数组如下表所示，序号代表写入顺序。</p><p><img src="https://static001.geekbang.org/resource/image/a2/1e/a2e4259d27eae29196616dece4b46d1e.jpg?wh=1240x615" alt="图片"></p><p>接下来，再看看将数组 a，按照&#39;F&#39;的方式 reshape 成(3,2)要如何处理。</p><p>对于行优先的方式，我们应该是比较熟悉的，而‘F’方式是列优先的方式，这一点对于没有使用过列优先的同学来说，可能比较难理解一点。</p><p>首先是按列优先展开原数组，列优先意味着最先变化的是数组的第一个维度。下表是展开后的结果，序号是展开顺序，这里请注意下<strong>坐标的变换方式</strong>（第一个维度最先变化）。</p><p><img src="https://static001.geekbang.org/resource/image/fe/72/fe21a81ab58523edc0d1a84f15yyf372.jpg?wh=1185x621" alt=""></p><p>所以，reshape 后的数组，是按照 0，3，1，4，2，5 这个序列进行写入数据的。reshape 后的数组如下表所示，序号代表写入顺序，为了显示直观，我将相同行以同样颜色显示了。</p><p><img src="https://static001.geekbang.org/resource/image/26/6b/26dbe3e14fded552bd8a0515858a476b.jpg?wh=1227x606" alt="图片"></p><p>这里我给你留一个小练习，你可以试试对多维数组的 reshape 吗？</p><p>不过，大部分时候还是使用&#39;C&#39;的方式比较多，也就是行优先的形式。至少目前为止我还没有使用过&#39;F&#39;与&#39;A&#39;的方式。</p><h4 id="size" tabindex="-1"><a class="header-anchor" href="#size"><span>size</span></a></h4><p>size，也就是数组元素的总数，它就等于 shape 属性中元素的乘积。</p><p>请看下面的代码，arr_2_d 的 size 是 4。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;arr_2_d.size</span>
<span class="line">4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dtype" tabindex="-1"><a class="header-anchor" href="#dtype"><span>dtype</span></a></h4><p>最后要说的是 dtype，它是一个描述数组中元素类型的对象。使用 dtype 属性可以查看数组所属的数据类型。</p><p>NumPy 中大部分常见的数据类型都是支持的，例如 int8、int16、int32、float32、float64 等。dtype 是一个常见的属性，在创建数组，数据类型转换时都可以看到它。</p><p>首先我们看看 arr_2_d 的数据类型：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;arr_2_d.dtype</span>
<span class="line">dtype(&#39;int64&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以回头看一下刚才创建 arr_2_d 的时候，我们并没有指定数据类型，如果没有指定数据类型，NumPy 会自动进行判断，然后给一个默认的数据类型。</p><p>我们再看下面的代码，我们在创建 arr_2_d 时，对数据类型进行了指定。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;arr_2_d = np.asarray([[1, 2], [3, 4]], dtype=&#39;float&#39;)</span>
<span class="line">&gt;&gt;&gt;arr_2_d.dtype</span>
<span class="line">dtype(&#39;float64&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的数据类型当然也可以改变，我们可以使用 astype()改变数组的数据类型，不过改变数据类型会创建一个新的数组，而不是改变原数组的数据类型。</p><p>请看后面的代码。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;arr_2_d.dtype</span>
<span class="line">dtype(&#39;float64&#39;)</span>
<span class="line">&gt;&gt;&gt;arr_2_d.astype(&#39;int32&#39;)</span>
<span class="line">array([[1, 2],</span>
<span class="line">       [3, 4]], dtype=int32)</span>
<span class="line">&gt;&gt;&gt;arr_2_d.dtype</span>
<span class="line">dtype(&#39;float64&#39;)</span>
<span class="line"># 原数组的数据类型并没有改变</span>
<span class="line">&gt;&gt;&gt;arr_2_d_int = arr_2_d.astype(&#39;int32&#39;)</span>
<span class="line">&gt;&gt;&gt;arr_2_d_int.dtype</span>
<span class="line">dtype(&#39;int32&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，我想提醒你，<strong>不能通过直接修改数据类型来修改数组的数据类型</strong>，这样代码虽然不会报错，但是数据会发生改变，请看下面的代码：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;arr_2_d.dtype</span>
<span class="line">dtype(&#39;float64&#39;)</span>
<span class="line">&gt;&gt;&gt;arr_2_d.size</span>
<span class="line">4</span>
<span class="line">&gt;&gt;&gt;arr_2_d.dtype=&#39;int32&#39;</span>
<span class="line">&gt;&gt;&gt;arr_2_d</span>
<span class="line">array([[         0, 1072693248,          0, 1073741824],</span>
<span class="line">       [         0, 1074266112,          0, 1074790400]], dtype=int32)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1 个 float64 相当于 2 个 int32，所以原有的 4 个 float32，会变为 8 个 int32，然后直接输出这个 8 个 int32。</p><h3 id="其他创建数组的方式" tabindex="-1"><a class="header-anchor" href="#其他创建数组的方式"><span>其他创建数组的方式</span></a></h3><p>除了使用 np.asarray 或 np.array 来创建一个数组之外，NumPy 还提供了一些按照既定方式来创建数组的方法，我们只需按照要求，提供一些必要的参数即可。</p><h4 id="np-ones-与-np-zeros" tabindex="-1"><a class="header-anchor" href="#np-ones-与-np-zeros"><span>np.ones() 与 np.zeros()</span></a></h4><p>np.ones()用来创建一个全 1 的数组，必须参数是指定数组的形状，可选参数是数组的数据类型，你可以结合下面的代码进行理解。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;np.ones()</span>
<span class="line">Traceback (most recent call last):</span>
<span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span>
<span class="line">TypeError: ones() takes at least 1 argument (0 given)</span>
<span class="line"># 报错原因是没有给定形状的参数</span>
<span class="line">&gt;&gt;&gt;np.ones(shape=(2,3))</span>
<span class="line">array([[1., 1., 1.],</span>
<span class="line">       [1., 1., 1.]])</span>
<span class="line">&gt;&gt;&gt;np.ones(shape=(2,3), dtype=&#39;int32&#39;)</span>
<span class="line">array([[1, 1, 1],</span>
<span class="line">       [1, 1, 1]], dtype=int32)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建全 0 的数组是 np.zeros()，用法与 np.ones()类似，我们就不举例了。</p><p>那这两个函数一般什么时候用呢？例如，如果需要初始化一些权重的时候就可以用上，比如说生成一个 2x3 维的数组，每个数值都是 0.5，可以这样做。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;np.ones((2, 3)) * 0.5</span>
<span class="line">array([[0.5, 0.5, 0.5],</span>
<span class="line">       [0.5, 0.5, 0.5]]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="np-arange" tabindex="-1"><a class="header-anchor" href="#np-arange"><span>np.arange()</span></a></h4><p>我们还可以使用 np.arange([start, ]stop, [step, ]dtype=None)创建一个在[start, stop)区间的数组，元素之间的跨度是 step。</p><p>start 是可选参数，默认为 0。stop 是必须参数，区间的终点，请注意，刚才说的区间是一个<strong>左闭右开区间</strong>，所以数组并不包含 stop。step 是可选参数，默认是 1。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line"># 创建从0到4的数组</span>
<span class="line">&gt;&gt;&gt;np.arange(5)</span>
<span class="line">array([0, 1, 2, 3, 4])</span>
<span class="line"># 从2开始到4的数组</span>
<span class="line">&gt;&gt;&gt;np.arange(2, 5)</span>
<span class="line">array([2, 3, 4])</span>
<span class="line"># 从2开始，到8的数组，跨度是3</span>
<span class="line">&gt;&gt;&gt;np.arange(2, 9, 3)</span>
<span class="line">array([2, 5, 8])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="np-linspace" tabindex="-1"><a class="header-anchor" href="#np-linspace"><span>np.linspace()</span></a></h4><p>最后，我们也可以用 np.linspace（start, stop, num=50, endpoint=True, retstep=False, dtype=None）创建一个数组，具体就是创建一个从开始数值到结束数值的等差数列。</p><ul><li>start：必须参数，序列的起始值。</li><li>stop：必须参数，序列的终点。</li><li>num：序列中元素的个数，默认是 50。</li><li>endpoint：默认为 True，如果为 True，则数组最后一个元素是 stop。</li><li>retstep：默认为 False，如果为 True，则返回数组与公差。</li></ul><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line"># 从2到10，有3个元素的等差数列</span>
<span class="line">&gt;&gt;&gt;np.linspace(start=2, stop=10, num=3)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>np.arange 与 np.linspace 也是比较常见的函数，比如你要作图的时候，可以用它们生成 x 轴的坐标。例如，我要生成一个$y=x^{2}$的图片，x 轴可以用 np.linespace()来生成。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">import numpy as np</span>
<span class="line">import matplotlib.pyplot as plt</span>
<span class="line"></span>
<span class="line">X = np.arange(-50, 51, 2)</span>
<span class="line">Y = X ** 2</span>
<span class="line"></span>
<span class="line">plt.plot(X, Y, color=&#39;blue&#39;)</span>
<span class="line">plt.legend()</span>
<span class="line">plt.show()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://static001.geekbang.org/resource/image/0c/b4/0c752f2b6777a95d8a373649e4a3a2b4.jpg?wh=1800x1146" alt="图片"></p><h2 id="数组的轴" tabindex="-1"><a class="header-anchor" href="#数组的轴"><span>数组的轴</span></a></h2><p>这是一个非常重要的概念，也是 NumPy 数组中最不好理解的一个概念。它经常出现在 np.sum()、np.max()这样关键的聚合函数中。</p><p>我们用这样一个问题引出，同一个函数如何根据轴的不同来获得不同的计算结果呢？比如现在有一个(4,3)的矩阵，存放着 4 名同学关于 3 款游戏的评分数据。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt;interest_score = np.random.randint(10, size=(4, 3))</span>
<span class="line">&gt;&gt;&gt;interest_score</span>
<span class="line">array([[4, 7, 5],</span>
<span class="line">       [4, 2, 5],</span>
<span class="line">       [7, 2, 4],</span>
<span class="line">       [1, 2, 4]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个需求是，计算每一款游戏的评分总和。这个问题如何解决呢，我们一起分析一下。 数组的轴即数组的维度，它是从 0 开始的。对于我们这个二维数组来说，有两个轴，分别是代表行的 0 轴与代表列的 1 轴。如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/e1/de/e14a4f5d6ba946665b7ccf01c58a2dde.jpg?wh=1233x790" alt="图片"></p><p>我们的问题是要计算每一款游戏的评分总和，也就是沿着 0 轴的方向进行求和。所以，我们只需要在求和函数中指定沿着 0 轴的方向求和即可。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt; np.sum(interest_score, axis=0)</span>
<span class="line">array([16, 13, 18])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>计算方向如绿色箭头所示： <img src="https://static001.geekbang.org/resource/image/3a/80/3a6bd04c4708d3635e9c92092612e380.jpg?wh=1207x812" alt="图片"></p><p>第二个问题是要计算每名同学的评分总和，也就是要沿着 1 轴方向对二维数组进行操作。所以，我们只需要将 axis 参数设定为 1 即可。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt; np.sum(interest_score, axis=1)</span>
<span class="line">array([16, 11, 13,  7])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>计算方向如绿色箭头所示。 <img src="https://static001.geekbang.org/resource/image/d6/b4/d60ed120c370e376253bee7b362590b4.jpg?wh=1196x790" alt="图片"></p><p>二维数组还是比较好理解的，那多维数据该怎么办呢？你有没有发现，其实当 axis=i 时，就是按照第 i 个轴的方向进行计算的，或者可以理解为第 i 个轴的数据将会被折叠或聚合到一起。</p><p>形状为(a, b, c)的数组，沿着 0 轴聚合后，形状变为(b, c)；沿着 1 轴聚合后，形状变为(a, c)；</p><p>沿着 2 轴聚合后，形状变为(a, b)；更高维数组以此类推。</p><p>接下来，我们再看一个多维数组的例子。对数组 a，求不同维度上的最大值。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt; a = np.arange(18).reshape(3,2,3)</span>
<span class="line">&gt;&gt;&gt; a</span>
<span class="line">array([[[ 0,  1,  2],</span>
<span class="line">        [ 3,  4,  5]],</span>
<span class="line"></span>
<span class="line">       [[ 6,  7,  8],</span>
<span class="line">        [ 9, 10, 11]],</span>
<span class="line"></span>
<span class="line">       [[12, 13, 14],</span>
<span class="line">        [15, 16, 17]]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将同一个轴上的数据看做同一个单位，那聚合的时候，我们只需要在同级别的单位上进行聚合就可以了。 如下图所示，绿框代表沿着 0 轴方向的单位，蓝框代表着沿着 1 轴方向的单位，红框代表着 2 轴方向的单位。</p><p><img src="https://static001.geekbang.org/resource/image/0a/b9/0af604dc4661e5512515781bbd7be3b9.jpg?wh=977x838" alt="图片"></p><p>当 axis=0 时，就意味着将三个绿框的数据聚合在一起，结果是一个（2，3）的数组，数组内容为：$$\\begin{matrix} [ \\ [(max(a_{000},a_{100},a_{200}), max(a_{001},a_{101},a_{201}), max(a_{002},a_{102},a_{202}))], \\\\\\ [(max(a_{010},a_{110},a_{210}), max(a_{011},a_{111},a_{211}), max(a_{012},a_{112},a_{212}))] \\ ] \\ \\end{matrix}$$</p><p>代码如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt; a.max(axis=0)</span>
<span class="line">array([[12, 13, 14],</span>
<span class="line">       [15, 16, 17]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 axis=1 时，就意味着每个绿框内的蓝框聚合在一起，结果是一个（3，3）的数组，数组内容为：</p><p>$$ \\begin{matrix} [ \\ [(max(a_{000},a_{010}), max(a_{001},a_{011}), max(a_{002},a_{012}))], \\\\\\ [(max(a_{100},a_{110}), max(a_{101},a_{111}), max(a_{102},a_{112}))], \\\\\\ [(max(a_{200},a_{210}), max(a_{201},a_{211}), max(a_{202},a_{212}))], \\ ] \\ \\end{matrix} $$</p><p>代码如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt; a.max(axis=1)</span>
<span class="line">array([[ 3,  4,  5],</span>
<span class="line">       [ 9, 10, 11],</span>
<span class="line">       [15, 16, 17]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 axis=2 时，就意味着每个蓝框中的红框聚合在一起，结果是一个（3，2）的数组，数组内容如下所示：</p><p>$$ \\begin{matrix} [ \\ [(max(a_{000},a_{001},a_{002}), max(a_{010},a_{011},a_{012}))], \\\\\\ [(max(a_{100},a_{101},a_{102}), max(a_{110},a_{111},a_{112}))], \\\\\\ [(max(a_{200},a_{201},a_{202}), max(a_{210},a_{211},a_{212}))], \\ ] \\\\\\ \\end{matrix} $$</p><p>代码如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">&gt;&gt;&gt; a.max(axis=2)</span>
<span class="line">array([[ 2,  5],</span>
<span class="line">       [ 8, 11],</span>
<span class="line">       [14, 17]])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>axis 参数非常常见，不光光出现在刚才介绍的 sum 与 max，还有很多其他的聚合函数也会用到，例如 min、mean、argmin（求最小值下标）、argmax（求最大值下标）等。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>恭喜你完成了这节课的学习。其实你只要有一些其他语言的编程基础，学 Numpy 还是非常容易的。这里我想再次强调一下为什么 NumPy 这道前菜必不可少。</p><p>其实 Numpy 的很多知识点是与 PyTorch 融会贯通的，例如 PyTorch 中的 Tensor。而且 Numpy 在机器学习中常常被用到，很多模块都要基于 NumPy 展开，尤其是在数据的预处理和膜后处理中。</p><p>NumPy 是用于 Python 中科学计算的一个基础包。它提供了一个多维度的数组对象，以及针对数组对象的各种快速操作。为了让你有更直观的体验，我们学习了创建数组的四种方式。</p><p>其中你重点要掌握的方法，就是如何使用<strong>np.asarray</strong>创建一个数组。这里涉及数组属性（ndim、shape、dtype、size）的灵活使用，特别是数组的形状变化与数据类型转换。</p><p>最后，我为你介绍了数组轴的概念，我们需要在数组的聚合函数中灵活运用它。虽然这个概念十分常用，但却不好理解，建议你根据我课程里的例子仔细揣摩一下，从 2 维数组一步步推理到多维数组，根据轴的不同，数组聚合的方向是如何变化的。</p><p>下一节课，我们要继续学习 NumPy 中常用且重要的功能。</p><h2 id="每课一练" tabindex="-1"><a class="header-anchor" href="#每课一练"><span>每课一练</span></a></h2><p>在刚才用户对游戏评分的那个问题中，你能计算一下每位用户对三款游戏的打分的平均分吗？</p><p>欢迎你在留言区记录你的疑问或者收获，也推荐你把这节课分享给你的朋友。</p>`,131)]))}const t=n(l,[["render",p]]),c=JSON.parse('{"path":"/3.tech/83.PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/02_%E5%9F%BA%E7%A1%80%E7%AF%87-NumPy%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3.html","title":"基础篇 NumPy（上）核心数据结构详解","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"什么是 NumPy","slug":"什么是-numpy","link":"#什么是-numpy","children":[]},{"level":2,"title":"NumPy 数组","slug":"numpy-数组","link":"#numpy-数组","children":[]},{"level":2,"title":"创建数组","slug":"创建数组","link":"#创建数组","children":[{"level":3,"title":"数组的属性","slug":"数组的属性","link":"#数组的属性","children":[]},{"level":3,"title":"其他创建数组的方式","slug":"其他创建数组的方式","link":"#其他创建数组的方式","children":[]}]},{"level":2,"title":"数组的轴","slug":"数组的轴","link":"#数组的轴","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"每课一练","slug":"每课一练","link":"#每课一练","children":[]}],"git":{"updatedTime":1746672966000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":2,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"873191059aa4709eddd6184a409223b5054edb2a","time":1746672966000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: pytorch fixed"},{"hash":"b44b80ec6b8c2ebffa55c7b2b54259609c76baed","time":1745668690000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add pytorch course"}]},"filePathRelative":"3.tech/83.PyTorch深度学习实战/02_基础篇-NumPy（上）：核心数据结构详解.md"}');export{t as comp,c as data};
