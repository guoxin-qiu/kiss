import{_ as s,c as a,b as p,o as e}from"./app-C01vnHKY.js";const t={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="模型训练篇-可视化工具-如何实现训练的可视化监控" tabindex="-1"><a class="header-anchor" href="#模型训练篇-可视化工具-如何实现训练的可视化监控"><span>模型训练篇-可视化工具：如何实现训练的可视化监控</span></a></h1><p>上节课中，我们以线性回归模型为例，学习了模型从搭建到训练的全部过程。在深度学习领域，模型训练是一个必须的环节，而在训练过程中，我们常常需要对模型的参数、评价指标等信息进行可视化监控。</p><p>今天我们主要会学习两种可视化工具，并利用它们实现训练过程的可视化监控。</p><p>在 TensorFlow 中，最常使用的可视化工具非 Tensorboard 莫属，而 TensorboardX 工具使得 PyTorch 也享受到 Tensorboard 的便捷功能。另外，FaceBook 也为 PyTorch 开发了一款交互式可视化工具 Visdom，它可以对实时数据进行丰富的可视化，帮助我们实时监控实验过程。</p><p>让我们先从 TensorboardX 说起。</p><h2 id="tensorboardx" tabindex="-1"><a class="header-anchor" href="#tensorboardx"><span>TensorboardX</span></a></h2><p>Tensorboard 是 TensorFlow 的一个附加工具，用于记录训练过程的模型的参数、评价指标与图像等细节内容，并通过 Web 页面提供查看细节与过程的功能，用浏览器可视化的形式展现，帮助我们在实验时观察神经网络的训练过程，把握训练趋势。</p><p>既然 Tensorboard 工具这么方便，TensorFlow 外的其它深度学习框架自然也想获取 Tensorboard 的便捷功能，于是，TensorboardX 应运而生。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>安装 Tensorboard 很容易，我们可以使用 pip 进行安装，命令如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">pip install tensorboard</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果你已经安装过 TensorFlow，那么就无需额外安装 Tensorboard 了。</p><p>接下来，我们需要安装 TensorboardX。这里需要注意的是，PyTorch 1.8 之后的版本自带 TensorboardX，它被放在<code>torch.utils.tensorboard</code>中，因此无需多余配置。</p><p>如果你用的是 PyTorch 1.8 之前的版本，TensorboardX 安装起来也非常简单。我们依然使用 pip 命令安装：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">pip install tensorboardX</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="使用与启动" tabindex="-1"><a class="header-anchor" href="#使用与启动"><span>使用与启动</span></a></h3><p>为了使用 TensorboardX，我们首先需要创建一个 SummaryWriter 的实例，然后再使用<code>add_scalar</code>方法或<code>add_image</code>方法，将数字或图片记录到 SummaryWriter 实例中。</p><p>SummaryWriter 类的定义如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard<span class="token punctuation">.</span>writer<span class="token punctuation">.</span>SummaryWriter<span class="token punctuation">(</span>log_dir<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中的 log<em>dir 表示保存日志的路径，默认会保存在“runs/当前时间</em>主机名”文件夹中。</p><p>实例创建好之后，我们来看<code>add_scalar</code>方法，这个方法用来记录<strong>数字常量</strong>，它的定义如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">add_scalar<span class="token punctuation">(</span>tag<span class="token punctuation">,</span> scalar_value<span class="token punctuation">,</span> global_step<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> walltime<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>根据定义，我们依次说说其中的参数：</p><ul><li>tag：字符串类型，表示数据的名称，不同名称的数据会使用不同曲线展示；</li><li>scalar_value：浮点型，表示要保存的数值；</li><li>global_step：整型，表示训练的 step 数；</li><li>walltime：浮点型，表示记录发生的时间，默认为 time.time()。</li></ul><p>我们一般会使用<code>add_scalar</code>方法来记录训练过程的 loss、accuracy、learning rate 等数值的变化，这样就能直观地监控训练过程。</p><p><code>add_image</code>方法用来记录单个图像数据（需要 Pillow 库的支持），它的定义如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">add_image<span class="token punctuation">(</span>tag<span class="token punctuation">,</span> img_tensor<span class="token punctuation">,</span> global_step<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> walltime<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dataformats<span class="token operator">=</span><span class="token string">&#39;CHW&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>tag、global_step 和 walltime 的含义跟<code>add_scalar</code>方法里一样，所以不再赘述，我们看看其他新增的参数都是什么含义。</p><ul><li>img_tensor：PyTorch 的 Tensor 类型或 NumPy 的 array 类型，表示图像数据；</li><li>dataformats：字符串类型，表示图像数据的格式，默认为“CHW”，即 Channel x Height x Width，还可以是“CHW”、“HWC”或“HW”等。</li></ul><p>我们来看一个例子加深理解，具体代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter</span>
<span class="line"><span class="token comment"># PyTorch 1.8之前的版本请使用：</span></span>
<span class="line"><span class="token comment"># from tensorboardX import SummaryWriter</span></span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建一个SummaryWriter的实例</span></span>
<span class="line">writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> n_iter <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">&#39;Loss/train&#39;</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span></span>
<span class="line">    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">&#39;Loss/test&#39;</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span></span>
<span class="line">    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">&#39;Accuracy/train&#39;</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span></span>
<span class="line">    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">&#39;Accuracy/test&#39;</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">img <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span></span>
<span class="line">img<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span></span>
<span class="line"></span>
<span class="line">writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">&#39;my_image&#39;</span><span class="token punctuation">,</span> img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我给你梳理一下这段代码都做了什么。</p><p>首先创建一个 SummaryWriter 的实例，这里注意，PyTorch 1.8 之前的版本请使用“from tensorboardX import SummaryWriter”，PyTorch 1.8 之后的版本请使用“from torch.utils.tensorboard import SummaryWriter”。</p><p>然后，我们随机生成一些随机数，用来模拟训练与预测过程中的 Loss 和 Accuracy，并且用<code>add_scalar</code>方法进行记录。最后生成了一个图像，用<code>add_image</code>方法来记录。</p><p>上述代码运行后，会在当前目录下生成一个“runs”文件夹，里面存储了我们需要记录的数据。</p><p>然后，我们在当前目录下执行下面的命令，即可启动 Tensoboard。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">tensorboard <span class="token operator">-</span><span class="token operator">-</span>logdir<span class="token operator">=</span>runs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动后，在浏览器中输入“<a href="http://127.0.0.1:6006/" target="_blank" rel="noopener noreferrer">http://127.0.0.1:6006/</a>”（Tensorboard 的默认端口为 6006），即可对刚才我们记录的数据进行可视化。</p><p>Tensorboard 的界面如下图所示。图片中右侧部分就是刚刚用<code>add_scalar</code>方法记录的 Loss 和 Accuracy。你看，Tensorboard 已经帮我们按照迭代 step 绘制成了曲线图，可以非常直观地监控训练过程。</p><p><img src="https://static001.geekbang.org/resource/image/33/e8/3393e81d9a34c51cdecd4a99e460dde8.png?wh=1920x1360" alt="图片"></p><p>在“IMAGES”的标签页中，可以显示刚刚用<code>add_image</code>方法记录的图像数据，如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/86/3a/86bcefa7e732ccceef230a888b3f3a3a.png?wh=1432x1114" alt="图片"></p><h3 id="训练过程可视化" tabindex="-1"><a class="header-anchor" href="#训练过程可视化"><span>训练过程可视化</span></a></h3><p>好，进行到这里，我们已经装好了 TensorboardX 并启动，还演示了这个工具如何使用。</p><p>那么如何在我们实际的训练过程中来进行可视化监控呢？我们用上节课构建并训练的线性回归模型为例，来进行实践。</p><p>下面的代码上节课讲过，作用是定义一个线性回归模型，并随机生成训练集 X 与对应的标签 Y。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> random</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 模型定义</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">LinearModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    self<span class="token punctuation">.</span>weight <span class="token operator">=</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    self<span class="token punctuation">.</span>bias <span class="token operator">=</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">input</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>bias</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 数据</span></span>
<span class="line">w <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line">xlim <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span></span>
<span class="line">x_train <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token operator">=</span>xlim<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> high<span class="token operator">=</span>xlim<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line">y_train <span class="token operator">=</span> <span class="token punctuation">[</span>w <span class="token operator">*</span> x <span class="token operator">+</span> b <span class="token operator">+</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> x_train<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们在训练的过程中，加入刚才讲过的 SummaryWriter 实例与<code>add_scalar</code>方法，具体的代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># Tensorboard</span></span>
<span class="line"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 训练</span></span>
<span class="line">model <span class="token operator">=</span> LinearModel<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-4</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">1e-2</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span></span>
<span class="line">y_train <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> n_iter <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span></span>
<span class="line">    output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span></span>
<span class="line">    loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">    model<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">&#39;Loss/train&#39;</span><span class="token punctuation">,</span> loss<span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面这段代码，我们记录了训练过程中的 Loss 的变换过程。具体的趋势如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/df/48/df021d742b09180fb267652fca440d48.png?wh=750x656" alt="图片"></p><p>可以看到 Loss 是一个下降的趋势，说明随着训练过程，模型越来越拟合我们的训练数据了。进行到这里，我们已经走完了利用 TensorboardX 工具，实现训练可视化监控的整个过程。</p><p>TensorboardX 除了包括上述的常用方法之外，还有许多其他方法如<code>add_histogram</code>、<code>add_graph</code>、<code>add_embedding</code>、<code>add_audio</code> 等，感兴趣的同学可以参考<a href="https://pytorch.org/docs/stable/tensorboard.html" target="_blank" rel="noopener noreferrer">[官方文档]</a>。相信参考已经学习过的两个add方法，你一定能够举一反三，很快熟练调用其它的方法。</p><h2 id="visdom" tabindex="-1"><a class="header-anchor" href="#visdom"><span>Visdom</span></a></h2><p>Visdom 是 Facebook 开源的一个专门用于 PyTorch 的交互式可视化工具。它为实时数据提供了丰富的可视化种类，可以在浏览器中进行查看，并且可以很容易地与其他人共享可视化结果，帮助我们实时监控在远程服务器上进行的科学实验。</p><h3 id="安装与启动" tabindex="-1"><a class="header-anchor" href="#安装与启动"><span>安装与启动</span></a></h3><p>Visdom 的安装非常简单，可直接使用 pip 进行安装，具体的命令如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">pip install visdom</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行安装命令后，我们可以执行以下命令启动 Visdom：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">python <span class="token operator">-</span>m visdom<span class="token punctuation">.</span>server</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Visdom 的默认端口是 8097，如果需要修改，可以使用-p 选项。</p><p>启动成功后，在浏览器中输入“<a href="http://127.0.0.1:8097/" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8097/</a>”，进入 Visdom 的主界面。</p><p>Visdom 的主界面如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/99/a8/99d3a7d1ayya17cb625a6f8a567e2aa8.jpg?wh=1920x460" alt="图片"></p><p>请你注意，Visdom 的使用与 Tensorboard 稍有不同。Tensorboard 是在生成记录文件后，启动可视化界面。而 Visdom 是先启动可视化界面，当有数据进入 Visdom 的窗口时，会实时动态地更新并绘制数据。</p><h3 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h3><p>下面我们就来动手试一下，看看 Visdom 如何绘制数据。</p><p>具体过程分四步走：首先，我们需要将窗口类 Visdom 实例化；然后，利用 line()方法创建一个线图窗口并初始化；接着，利用生成的一组随机数数据来更新线图窗口。最后，通过 image()方法来绘制一张图片。</p><p>上述过程的具体代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> visdom <span class="token keyword">import</span> Visdom</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> time</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 将窗口类实例化</span></span>
<span class="line">viz <span class="token operator">=</span> Visdom<span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token comment"># 创建窗口并初始化</span></span>
<span class="line">viz<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">&#39;train_loss&#39;</span><span class="token punctuation">,</span> opts<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;train_loss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> n_iter <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 随机获取loss值</span></span>
<span class="line">    loss <span class="token operator">=</span> <span class="token number">0.2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">    <span class="token comment"># 更新窗口图像</span></span>
<span class="line">    viz<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">[</span>loss<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>n_iter<span class="token punctuation">]</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">&#39;train_loss&#39;</span><span class="token punctuation">,</span> update<span class="token operator">=</span><span class="token string">&#39;append&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">img <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span></span>
<span class="line">img<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span></span>
<span class="line"><span class="token comment"># 可视化图像</span></span>
<span class="line">viz<span class="token punctuation">.</span>image<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，使用过程与 Tensorboard 基本一致，只是函数调用上的不同。 绘制线图的结果如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/c0/13/c0057dd5935b0ed2f6606a8c148f4f13.gif?wh=368x336" alt="图片"></p><p>对应的绘制图片结果如下。可以看出，Visodm 绘制数据时，是动态更新的。</p><p><img src="https://static001.geekbang.org/resource/image/a6/88/a66f16a1be56456c009da3873c949888.jpg?wh=676x482" alt="图片"></p><h3 id="训练可视化监控" tabindex="-1"><a class="header-anchor" href="#训练可视化监控"><span>训练可视化监控</span></a></h3><p>同样地，我们学习可视化工具的使用主要是为了监控我们的训练过程。我们还是以构建并训练的线性回归模型为例，来进行实践。</p><p>Visdom 监控训练过程大致分为三步：</p><ul><li>实例化一个窗口；</li><li>初始化窗口的信息；</li><li>更新监听的信息。</li></ul><p>定义模型与生成训练数据的过程跟前面一样，我就不再重复了。在训练过程中实例化并初始化 Visdom 窗口、实时记录 Loss 的代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># Visdom</span></span>
<span class="line"><span class="token keyword">from</span> visdom <span class="token keyword">import</span> Visdom</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 训练</span></span>
<span class="line">model <span class="token operator">=</span> LinearModel<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e-4</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">1e-2</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span></span>
<span class="line">y_train <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 实例化一个窗口</span></span>
<span class="line">viz <span class="token operator">=</span> Visdom<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">8097</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 初始化窗口的信息</span></span>
<span class="line">viz<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">&#39;train_loss&#39;</span><span class="token punctuation">,</span> opts<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;train loss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> n_iter <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span></span>
<span class="line">    output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span></span>
<span class="line">    loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">    model<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 更新监听的信息</span></span>
<span class="line">    viz<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">[</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>n_iter<span class="token punctuation">]</span><span class="token punctuation">,</span> win<span class="token operator">=</span><span class="token string">&#39;train_loss&#39;</span><span class="token punctuation">,</span> update<span class="token operator">=</span><span class="token string">&#39;append&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Visdom 的界面中，我们可以看到 Loss 的变化趋势如下图所示。Visdom 不会像 Tensorboard 自动对曲线进行缩放或平滑，因此可以看到 50 轮之后，由于 Loss 值变化范围比较小，图像的抖动趋势被压缩得非常不明显。</p><p><img src="https://static001.geekbang.org/resource/image/54/e0/54665114801a49e36a0211b5b3dbdce0.jpg?wh=1007x763" alt="图片"></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>这节课我带你学习了两种可视化工具：TensorboardX 和 Visdom。</p><p>相信通过一节课的讲解和练习，这两种可视化工具如何安装、启动，还有如何用它们绘制线图和图片这些基本的操作，相信你都已经掌握了。</p><p>学习使用可视化工具的主要目的，<strong>是为了帮助我们在深度学习模型的训练过程中，实时监控一些数据，例如损失值、评价指标等等</strong>。对这些数据进行可视化监控，可以帮助我们感知各个参数与指标的变化，实时把握训练趋势。因此，如何将可视化工具应用于模型训练过程中，是我们学习的重点。</p><p>TensorboardX 和 Visdom 还有其它诸如绘制散点图、柱状图、热力图等等多种多样的功能，如果你感兴趣，可以参考官方文档，类比我们今天学习的方法动手试一试，经过练习，一定可以熟练使用它们。</p><h2 id="每课一练" tabindex="-1"><a class="header-anchor" href="#每课一练"><span>每课一练</span></a></h2><p>参考 Visdom 快速上手中的例子，现在需要生成两组随机数，分别表示 Loss 和 Accuracy。在迭代的过程中，如何用代码同时绘制出 Loss 和 Accuracy 两组数据呢？</p><p>欢迎记录你的思考或疑惑，也推荐你把今天学到的可视化工具分享给更多同事、朋友。</p>`,90)]))}const i=s(t,[["render",o]]),u=JSON.parse('{"path":"/3.tech/83.PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/15_%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E7%AF%87-%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%AE%AD%E7%BB%83%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9B%91%E6%8E%A7.html","title":"模型训练篇-可视化工具：如何实现训练的可视化监控","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"TensorboardX","slug":"tensorboardx","link":"#tensorboardx","children":[{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"使用与启动","slug":"使用与启动","link":"#使用与启动","children":[]},{"level":3,"title":"训练过程可视化","slug":"训练过程可视化","link":"#训练过程可视化","children":[]}]},{"level":2,"title":"Visdom","slug":"visdom","link":"#visdom","children":[{"level":3,"title":"安装与启动","slug":"安装与启动","link":"#安装与启动","children":[]},{"level":3,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[]},{"level":3,"title":"训练可视化监控","slug":"训练可视化监控","link":"#训练可视化监控","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"每课一练","slug":"每课一练","link":"#每课一练","children":[]}],"git":{"updatedTime":1746672966000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":2,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"873191059aa4709eddd6184a409223b5054edb2a","time":1746672966000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: pytorch fixed"},{"hash":"b44b80ec6b8c2ebffa55c7b2b54259609c76baed","time":1745668690000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add pytorch course"}]},"filePathRelative":"3.tech/83.PyTorch深度学习实战/15_模型训练篇-可视化工具：如何实现训练的可视化监控.md"}');export{i as comp,u as data};
