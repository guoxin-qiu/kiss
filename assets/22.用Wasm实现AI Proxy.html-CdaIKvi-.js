import{_ as s,c as a,b as p,o as e}from"./app-C01vnHKY.js";const t={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="用-wasm-实现-ai-proxy" tabindex="-1"><a class="header-anchor" href="#用-wasm-实现-ai-proxy"><span>用 Wasm 实现 AI Proxy</span></a></h1><p>在前面的几节课中，我从 Wasm 的理论和实践两个角度，为你介绍了 Wasm。核心知识点实际上就是两块，一是 Wasm 的原理，二就是如何用 Wasm Go SDK 编写 Wasm 程序。对于原理，感兴趣的话你可以详细了解一下，而对于如何写 Wasm 程序，参考上节课的例子学会套路即可，后面用到哪个工具函数可以随时查文档。</p><p>在上节课的例子中，我们用到过 AI Proxy 这个插件，主要是为了能以网关 URL + OpenAI 协议的方式请求大模型。因为我们知道现在市面上无论是商业模型还是开源模型，基本大多都会遵循 OpenAI 标准，但每家厂商的 Base_Url 不一样，因此如果能有一个插件帮我们做好适配，让我们无论使用什么模型时，都可以以标准 OpenAI 格式请求，就会很方便。</p><p>因此本节课，我就用最近比较火的 DeepSeek 模型为例，带你写一下 AI Proxy 程序。</p><h2 id="总体架构" tabindex="-1"><a class="header-anchor" href="#总体架构"><span>总体架构</span></a></h2><p>我们先来了解一下 AI Proxy 的总体架构原理。</p><p><img src="https://static001.geekbang.org/resource/image/a4/25/a478e4ayyfe80a38e30f8ef64018c225.jpg?wh=1920x960" alt="图片"></p><p>从前面的课程中，我们已经了解到，Wasm 插件是如何在一次完整的 HTTP 请求中起作用的。简单来说，它主要在四个阶段介入：RequestHeader、RequestBody、ResponseHeader 和 ResponseBody。</p><p>AI Proxy 插件的原理也不例外，同样是在这四个阶段进行操作。如上图架构所示，当用户以标准的 OpenAI API 格式向网关发起请求时，请求会在这四个阶段被拦截。具体来说，在 Request 阶段，AI Proxy 插件会将用户的 OpenAI 请求转换为对应的大模型供应商的 API 格式；而在 Response 阶段，插件则会将大模型供应商的响应转换回 OpenAI 格式。</p><p>那么，面对众多大模型厂商，AI Proxy 如何确定该转换为哪家厂商的格式呢？为了解决这个问题，AI Proxy 定义了一组接口，即图中的 provider 接口。这组接口通过多态的方式，由各个大模型厂商具体实现，从而完成 OpenAI 格式与各自协议之间的相互转换。</p><p>因此再有了这个框架后，以后再添加新的模型商就很简单了，只需要实现 provider 接口即可。接下来，我们就从参数解析开始，边阅读源码，边写新代码，最后完成 DeepSeek 大模型代理功能。</p><h2 id="详细代码实现" tabindex="-1"><a class="header-anchor" href="#详细代码实现"><span>详细代码实现</span></a></h2><h3 id="参数配置" tabindex="-1"><a class="header-anchor" href="#参数配置"><span>参数配置</span></a></h3><p>在 wrapper.SetCtx 入口函数中参数配置的方法使用的是：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">wrapper<span class="token punctuation">.</span><span class="token function">ParseOverrideConfigBy</span><span class="token punctuation">(</span>parseGlobalConfig<span class="token punctuation">,</span> parseOverrideRuleConfig<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而不是之前我们常见的：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">wrapper<span class="token punctuation">.</span><span class="token function">ParseConfigBy</span><span class="token punctuation">(</span>parseConfig<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在第 22 节课中，我们曾探讨过一个关键概念：**当全局配置与路由、域名或服务级别的配置规则存在差异时，必须采用 ParseOverrideConfigBy 方法。**此方法要求我们分别设定全局规则解析的回调钩子函数 ParseGlobalConfig，以及路由级规则解析的回调钩子函数 ParseRuleConfig。在处理 ParseRuleConfig 回调钩子函数时，必须将全局配置的内容复制到路由、域名或服务级别的配置中。这样做确保了在 HttpContext 中，我们能够获取到当前 HTTP 请求下的插件配置，这些配置涵盖了全局配置以及路由、域名、服务级别的配置内容。因此，ParseOverrideConfigBy 的实现代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">parseOverrideRuleConfig</span><span class="token punctuation">(</span>json gjson<span class="token punctuation">.</span>Result<span class="token punctuation">,</span> global config<span class="token punctuation">.</span>PluginConfig<span class="token punctuation">,</span> pluginConfig <span class="token operator">*</span>config<span class="token punctuation">.</span>PluginConfig<span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//log.Debugf(&quot;loading override rule config: %s&quot;, json.String())</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">*</span>pluginConfig <span class="token operator">=</span> global</span>
<span class="line"></span>
<span class="line">    pluginConfig<span class="token punctuation">.</span><span class="token function">FromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> pluginConfig<span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> pluginConfig<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在第四行代码中，全局配置参数被复制到了路由级别的  pluginConfig  中。这一步骤确保了路由级别的配置能够基于全局配置进行扩展或覆盖。接下来，系统会在这个基础上继续解析其他层级的配置（如域名级别或服务级别），从而逐步构建出最终的配置结果。这种分层解析的方式保证了配置的灵活性和优先级，同时也避免了配置冲突或遗漏的问题。</p><h3 id="onhttprequestheader" tabindex="-1"><a class="header-anchor" href="#onhttprequestheader"><span>onHttpRequestHeader</span></a></h3><p>当一个 HTTP 请求抵达网关时，它首先会在本阶段被拦截。在深入探讨这一阶段的具体操作之前，我们必须先明确本次 HTTP 请求的结构，其格式如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">curl &#39;http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>这里换成网关IP<span class="token operator">&gt;</span><span class="token operator">/</span>api<span class="token operator">/</span>openai<span class="token operator">/</span>v1<span class="token operator">/</span>chat<span class="token operator">/</span>completions&#39; \\</span>
<span class="line">  <span class="token operator">-</span>H &#39;Accept<span class="token punctuation">:</span> application<span class="token operator">/</span>json&#39; \\</span>
<span class="line">  <span class="token operator">-</span>H &#39;Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json&#39; \\</span>
<span class="line">  <span class="token operator">--</span>data<span class="token operator">-</span>raw &#39;<span class="token punctuation">{</span><span class="token string">&quot;model&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;qwen-long&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;frequency_penalty&quot;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;max_tokens&quot;</span><span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token string">&quot;stream&quot;</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&quot;messages&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;higress项目主仓库的github地址是什么&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;presence_penalty&quot;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;temperature&quot;</span><span class="token punctuation">:</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token string">&quot;top_p&quot;</span><span class="token punctuation">:</span><span class="token number">0.95</span><span class="token punctuation">}</span>&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那在 Header 阶段，我们是可以得到 Url 以及 Header 信息，当然如果抓包看的是实际请求报文的话，还可以看到 Host 信息。</p><p>再来看一下目标访问模型 DeepSeek 的 API 格式：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">curl https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>deepseek<span class="token punctuation">.</span>com<span class="token operator">/</span>chat<span class="token operator">/</span>completions \\</span>
<span class="line">  <span class="token operator">-</span>H <span class="token string">&quot;Content-Type: application/json&quot;</span> \\</span>
<span class="line">  <span class="token operator">-</span>H <span class="token string">&quot;Authorization: Bearer &lt;DeepSeek API Key&gt;&quot;</span> \\</span>
<span class="line">  <span class="token operator">-</span>d &#39;<span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;model&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;deepseek-chat&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;messages&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">          <span class="token punctuation">{</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;system&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;You are a helpful assistant.&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">{</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;stream&quot;</span><span class="token punctuation">:</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span>&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到其 Url、Header，当然还有 Host 都与初始请求不一致，那怎么办呢？答案就是替换。因此本阶段的主要工作内容就是替换。有了这个思路后，代码就简单了，我们来看一下 DeepSeek 实现 OnRequestHeaders 接口的代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>deepseekProvider<span class="token punctuation">)</span> <span class="token function">OnRequestHeaders</span><span class="token punctuation">(</span>ctx wrapper<span class="token punctuation">.</span>HttpContext<span class="token punctuation">,</span> apiName ApiName<span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span>Action<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> apiName <span class="token operator">!=</span> ApiNameChatCompletion <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> errUnsupportedApiName</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token boolean">_</span> <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">OverwriteRequestPath</span><span class="token punctuation">(</span><span class="token string">&quot;/v1/chat/completions&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token boolean">_</span> <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">OverwriteRequestHost</span><span class="token punctuation">(</span><span class="token string">&quot;api.deepseek.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token boolean">_</span> <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">OverwriteRequestAuthorization</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer &quot;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">GetRandomToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token boolean">_</span> <span class="token operator">=</span> proxywasm<span class="token punctuation">.</span><span class="token function">RemoveHttpRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在代码中，利用 OverwriteRequestXXX 工具方法实现了对 Path, Host 等信息的替换。并添加上了 Authorization 信息。</p><p>之后看一下是如何通过多态的方式调用该函数的。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">activeProvider <span class="token operator">:=</span> pluginConfig<span class="token punctuation">.</span><span class="token function">GetProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> handler<span class="token punctuation">,</span> ok <span class="token operator">:=</span> activeProvider<span class="token punctuation">.</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span>RequestHeadersHandler<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Disable the route re-calculation since the plugin may modify some headers related to  the chosen route.</span></span>
<span class="line">    ctx<span class="token punctuation">.</span><span class="token function">DisableReroute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    hasRequestBody <span class="token operator">:=</span> wrapper<span class="token punctuation">.</span><span class="token function">HasRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    action<span class="token punctuation">,</span> err <span class="token operator">:=</span> handler<span class="token punctuation">.</span><span class="token function">OnRequestHeaders</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> apiName<span class="token punctuation">,</span> log<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> hasRequestBody <span class="token punctuation">{</span></span>
<span class="line">            ctx<span class="token punctuation">.</span><span class="token function">SetRequestBodyBufferLimit</span><span class="token punctuation">(</span>defaultMaxBodyBytes<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// Always return types.HeaderStopIteration to support fallback routing,</span></span>
<span class="line">            <span class="token comment">// as long as onHttpRequestBody can be called.</span></span>
<span class="line">            <span class="token keyword">return</span> types<span class="token punctuation">.</span>HeaderStopIteration</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> action</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token boolean">_</span> <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">SendResponse</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;ai-proxy.proc_req_headers_failed&quot;</span><span class="token punctuation">,</span> util<span class="token punctuation">.</span>MimeTypeTextPlain<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to process request headers: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，通过 GetProvider() 获取到了具体是哪个模型供应商类，之后通过 activeProvider.(provider.RequestHeadersHandler) 断言该类是否实现了 RequestHeadersHandler 接口，如果实现了，则可以通过 handler.OnRequestHeaders 完成接口调用。具体调用哪个类的接口，取决于 activeProvider 的实际类型。</p><h3 id="onhttprequestbody" tabindex="-1"><a class="header-anchor" href="#onhttprequestbody"><span>onHttpRequestBody</span></a></h3><p>这一阶段主要是处理体的内容，由于 DeepSeek 与 OpenAI 的请求体是完全兼容的，因此理论上，这一阶段格式无需变更，仅需把 model 替换一下即可。但是该插件还支持配置上下文的功能，如图所示：</p><p><img src="https://static001.geekbang.org/resource/image/df/05/dfb17728820a3774d2d4d071a159e905.png?wh=825x102" alt="图片"></p><p>因此，还需在代码中，遍历一下上下文，添加到请求体的 messages 中去。综合这两点需求，OnRequestBody 方法这样写：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>deepseekProvider<span class="token punctuation">)</span> <span class="token function">OnRequestBody</span><span class="token punctuation">(</span>ctx wrapper<span class="token punctuation">.</span>HttpContext<span class="token punctuation">,</span> apiName ApiName<span class="token punctuation">,</span> body <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span>Action<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> apiName <span class="token operator">!=</span> ApiNameChatCompletion <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> errUnsupportedApiName</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> m<span class="token punctuation">.</span>contextCache <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    request <span class="token operator">:=</span> <span class="token operator">&amp;</span>chatCompletionRequest<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">decodeChatCompletionRequest</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    model <span class="token operator">:=</span> request<span class="token punctuation">.</span>Model</span>
<span class="line">    <span class="token keyword">if</span> model <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;missing model in chat completion request&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    mappedModel <span class="token operator">:=</span> <span class="token function">getMappedModel</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> m<span class="token punctuation">.</span>config<span class="token punctuation">.</span>modelMapping<span class="token punctuation">,</span> log<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> mappedModel <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;model becomes empty after applying the configured mapping&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    request<span class="token punctuation">.</span>Model <span class="token operator">=</span> mappedModel</span>
<span class="line"></span>
<span class="line">    err <span class="token operator">:=</span> m<span class="token punctuation">.</span>contextCache<span class="token punctuation">.</span><span class="token function">GetContent</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>content <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token boolean">_</span> <span class="token operator">=</span> proxywasm<span class="token punctuation">.</span><span class="token function">ResumeHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to load context file: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">            <span class="token boolean">_</span> <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">SendResponse</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;ai-proxy.deepseek.load_ctx_failed&quot;</span><span class="token punctuation">,</span> util<span class="token punctuation">.</span>MimeTypeTextPlain<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to load context file: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">insertContextMessage</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> content<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">replaceJsonRequestBody</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token boolean">_</span> <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">SendResponse</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;ai-proxy.deepseek.insert_ctx_failed&quot;</span><span class="token punctuation">,</span> util<span class="token punctuation">.</span>MimeTypeTextPlain<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to replace request body: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> log<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionPause<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onhttpresponseheaders" tabindex="-1"><a class="header-anchor" href="#onhttpresponseheaders"><span>onHttpResponseHeaders</span></a></h3><p>在这一阶段，通常情况下并不需要进行额外处理，除非返回的响应头中包含了 OpenAI 不支持的字段，这时才需要对这些字段进行移除或调整。由于 DeepSeek 的 Response 完全兼容 OpenAI 的格式，因此在本阶段无需进行任何特殊处理。这种兼容性极大地简化了流程，避免了对响应内容的额外修改。</p><h3 id="onhttpresponsebody" tabindex="-1"><a class="header-anchor" href="#onhttpresponsebody"><span>onHttpResponseBody</span></a></h3><p>在这一阶段，主要任务是将其他厂商模型的 API 响应格式转换为 OpenAI 格式。由于 DeepSeek 的响应格式已经与 OpenAI 完全兼容，因此这一阶段对 DeepSeek 来说并不需要额外处理。不过，为了深入理解这一过程，我们可以以 Claude 为例，看看如何将一个与 OpenAI 格式不同的模型响应转换为 OpenAI 格式。</p><p>以下是一个示例代码，展示了如何将 Claude 的响应格式转换为 OpenAI 格式：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>claudeProvider<span class="token punctuation">)</span> <span class="token function">OnResponseBody</span><span class="token punctuation">(</span>ctx wrapper<span class="token punctuation">.</span>HttpContext<span class="token punctuation">,</span> apiName ApiName<span class="token punctuation">,</span> body <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span>Action<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    claudeResponse <span class="token operator">:=</span> <span class="token operator">&amp;</span>claudeTextGenResponse<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> claudeResponse<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unable to unmarshal claude response: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> claudeResponse<span class="token punctuation">.</span>Error <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;claude response error, error_type: %s, error_message: %s&quot;</span><span class="token punctuation">,</span> claudeResponse<span class="token punctuation">.</span>Error<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> claudeResponse<span class="token punctuation">.</span>Error<span class="token punctuation">.</span>Message<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    response <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">responseClaude2OpenAI</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> claudeResponse<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionContinue<span class="token punctuation">,</span> <span class="token function">replaceJsonResponseBody</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> log<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>claudeProvider<span class="token punctuation">)</span> <span class="token function">responseClaude2OpenAI</span><span class="token punctuation">(</span>ctx wrapper<span class="token punctuation">.</span>HttpContext<span class="token punctuation">,</span> origResponse <span class="token operator">*</span>claudeTextGenResponse<span class="token punctuation">)</span> <span class="token operator">*</span>chatCompletionResponse <span class="token punctuation">{</span></span>
<span class="line">    choice <span class="token operator">:=</span> chatCompletionChoice<span class="token punctuation">{</span></span>
<span class="line">        Index<span class="token punctuation">:</span>        <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        Message<span class="token punctuation">:</span>      <span class="token operator">&amp;</span>chatMessage<span class="token punctuation">{</span>Role<span class="token punctuation">:</span> roleAssistant<span class="token punctuation">,</span> Content<span class="token punctuation">:</span> origResponse<span class="token punctuation">.</span>Content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Text<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        FinishReason<span class="token punctuation">:</span> <span class="token function">stopReasonClaude2OpenAI</span><span class="token punctuation">(</span>origResponse<span class="token punctuation">.</span>StopReason<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>chatCompletionResponse<span class="token punctuation">{</span></span>
<span class="line">        Id<span class="token punctuation">:</span>                origResponse<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">        Created<span class="token punctuation">:</span>           time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">,</span></span>
<span class="line">        Model<span class="token punctuation">:</span>             ctx<span class="token punctuation">.</span><span class="token function">GetStringContext</span><span class="token punctuation">(</span>ctxKeyFinalRequestModel<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        SystemFingerprint<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Object<span class="token punctuation">:</span>            objectChatCompletion<span class="token punctuation">,</span></span>
<span class="line">        Choices<span class="token punctuation">:</span>           <span class="token punctuation">[</span><span class="token punctuation">]</span>chatCompletionChoice<span class="token punctuation">{</span>choice<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        Usage<span class="token punctuation">:</span> usage<span class="token punctuation">{</span></span>
<span class="line">            PromptTokens<span class="token punctuation">:</span>     origResponse<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>InputTokens<span class="token punctuation">,</span></span>
<span class="line">            CompletionTokens<span class="token punctuation">:</span> origResponse<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>OutputTokens<span class="token punctuation">,</span></span>
<span class="line">            TotalTokens<span class="token punctuation">:</span>      origResponse<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>InputTokens <span class="token operator">+</span> origResponse<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>OutputTokens<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如前面所述，代码的核心功能集中在  responseClaude2OpenAI  函数中，其主要任务是对字段进行转换，将 Claude 的响应格式适配为 OpenAI 的格式。除此之外，确实没有其他额外的工作需要处理。</p><p>至此，为 AI Proxy 添加 DeepSeek 大模型的适配工作已经基本完成。接下来，我们需要对实现的功能进行测试，以确保其正确性和稳定性。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><p>首先，需要打开 Higress 控制台，在服务来源页面添加上 DeepSeek 服务。</p><p><img src="https://static001.geekbang.org/resource/image/bf/b3/bfb06394d3aab41077130f81eae94bb3.png?wh=993x793" alt="图片"></p><p>之后要为其添加路由，配置如下：</p><p><img src="https://static001.geekbang.org/resource/image/63/dd/6392802449c5368c4047d4e6ec4bf2dd.png?wh=988x546" alt="图片"></p><p>注意三个注解：</p><p><img src="https://static001.geekbang.org/resource/image/b2/8a/b2273f73eb0283c3231c930999ef648a.png?wh=954x571" alt="图片"></p><p>之后，配置 AI 代理插件：</p><p><img src="https://static001.geekbang.org/resource/image/ce/43/ce560426cb73f4ba325eff25a8719443.png?wh=993x556" alt="图片"></p><p>接下来，用 ApiFox 测试一下。请求时，大模型写的是 gpt-4o。</p><p><img src="https://static001.geekbang.org/resource/image/b4/77/b4921df64ae68fe71cd5bf1fb9070077.png?wh=1140x588" alt="图片"></p><p>在收到回复后，查看 model，显示的是 deepseek-chat，说明代理生效了。</p><p><img src="https://static001.geekbang.org/resource/image/16/e0/1659e559a9f8df83b22c2987b9a239e0.png?wh=1068x442" alt="图片"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在本节课中，我为你详细介绍了  AI Proxy  这个在网关上最基础且必不可少的插件的核心原理，并通过为插件新增一个  DeepSeek 模型代理的实践，帮助你深入理解其工作机制和实现方式。本节课的代码，已经合入到 Higress 的 main 分支了，你可以通过<a href="https://github.com/alibaba/higress/tree/main/plugins/wasm-go/extensions/ai-proxy" target="_blank" rel="noopener noreferrer">链接</a>访问，查看完整详情。</p><p>当 Higress 网关有了模型代理能力后，在商业化中实际上就可以配合前端做一些模型平台产品了。比如某公司希望为员工提供一个内部的模型平台，该公司员工，可以登录该平台使用大模型能力，进行一些文生文，文生图等应用。而公司管理员则可以对模型类型，用量等进行控制。</p><p>此时便可以开发一个模型对话前端，在配置 OpenAI 接入的地方，配置上 Higress 网关地址。管理员在网关上，通过修改插件配置即可完成控制。同时也可以通过配合其他的安全限流等插件，进行更多控制。</p><p>这个场景，我会在后续的课程中，为你详细演示。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>AI Proxy 还支持 failover  这一特性，即我可以为大模型配置多个 APIToken，当其不可用时，会移出 APIToken 列表。感兴趣的话你可以测试并阅读一下源码实现。</p>`,65)]))}const i=s(t,[["render",o]]),u=JSON.parse('{"path":"/3.tech/84.AIAgent/22.%E7%94%A8Wasm%E5%AE%9E%E7%8E%B0AI%20Proxy.html","title":"用 Wasm 实现 AI Proxy","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"总体架构","slug":"总体架构","link":"#总体架构","children":[]},{"level":2,"title":"详细代码实现","slug":"详细代码实现","link":"#详细代码实现","children":[{"level":3,"title":"参数配置","slug":"参数配置","link":"#参数配置","children":[]},{"level":3,"title":"onHttpRequestHeader","slug":"onhttprequestheader","link":"#onhttprequestheader","children":[]},{"level":3,"title":"onHttpRequestBody","slug":"onhttprequestbody","link":"#onhttprequestbody","children":[]},{"level":3,"title":"onHttpResponseHeaders","slug":"onhttpresponseheaders","link":"#onhttpresponseheaders","children":[]},{"level":3,"title":"onHttpResponseBody","slug":"onhttpresponsebody","link":"#onhttpresponsebody","children":[]}]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/22.用Wasm实现AI Proxy.md"}');export{i as comp,u as data};
