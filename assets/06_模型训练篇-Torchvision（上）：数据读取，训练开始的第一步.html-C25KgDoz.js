import{_ as n,c as a,b as e,o as t}from"./app-C01vnHKY.js";const p={};function i(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="模型训练篇-torchvision-上-数据读取-训练开始的第一步" tabindex="-1"><a class="header-anchor" href="#模型训练篇-torchvision-上-数据读取-训练开始的第一步"><span>模型训练篇 Torchvision（上）：数据读取，训练开始的第一步</span></a></h1><p>今天起我们进入模型训练篇的学习。如果将模型看作一辆汽车，那么它的开发过程就可以看作是一套完整的生产流程，环环相扣、缺一不可。这些环节包括<strong>数据的读取、网络的设计、优化方法与损失函数的选择以及一些辅助的工具等</strong>。未来你将尝试构建自己的豪华汽车，或者站在巨人的肩膀上对前人的作品进行优化。</p><p>试想一下，如果你对这些基础环节所使用的方法都不清楚，你还能很好地进行下去吗？所以通过这个模块，我们的目标是先把基础打好。通过这模块的学习，对于 PyTorch 都为我们提供了哪些丰富的 API，你就会了然于胸了。</p><p>Torchvision 是一个和 PyTorch 配合使用的 Python 包，包含很多图像处理的工具。我们先从数据处理入手，开始 PyTorch 的学习的第一步。这节课我们会先介绍 Torchvision 的常用数据集及其读取方法，在后面的两节课里，我再带你了解常用的图像处理方法与 Torchvision 其它有趣的功能。</p><h2 id="pytorch-中的数据读取" tabindex="-1"><a class="header-anchor" href="#pytorch-中的数据读取"><span>PyTorch 中的数据读取</span></a></h2><p>训练开始的第一步，首先就是数据读取。PyTorch 为我们提供了一种十分方便的数据读取机制，即使用 Dataset 类与 DataLoader 类的组合，来得到数据迭代器。在训练或预测时，数据迭代器能够输出每一批次所需的数据，并且对数据进行相应的预处理与数据增强操作。</p><p>下面我们分别来看下 Dataset 类与 DataLoader 类。</p><h3 id="dataset-类" tabindex="-1"><a class="header-anchor" href="#dataset-类"><span>Dataset 类</span></a></h3><p>PyTorch 中的 Dataset 类是一个抽象类，它可以用来表示数据集。我们通过继承 Dataset 类来自定义数据集的格式、大小和其它属性，后面就可以供 DataLoader 类直接使用。</p><p>其实这就表示，无论使用自定义的数据集，还是官方为我们封装好的数据集，其本质都是继承了 Dataset 类。而在继承 Dataset 类时，至少需要重写以下几个方法：</p><ul><li>__init__()：构造函数，可自定义数据读取方法以及进行数据预处理；</li><li>__len__()：返回数据集大小；</li><li>__getitem__()：索引数据集中的某一个数据。</li></ul><p>光看原理不容易理解，下面我们来编写一个简单的例子，看下如何使用 Dataset 类定义一个 Tensor 类型的数据集。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 构造函数</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_tensor<span class="token punctuation">,</span> target_tensor<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>data_tensor <span class="token operator">=</span> data_tensor</span>
<span class="line">        self<span class="token punctuation">.</span>target_tensor <span class="token operator">=</span> target_tensor</span>
<span class="line">    <span class="token comment"># 返回数据集大小</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data_tensor<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 返回索引的数据与标签</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data_tensor<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>target_tensor<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合代码可以看到，我们定义了一个名字为 MyDataset 的数据集，在构造函数中，传入 Tensor 类型的数据与标签；在<strong>len</strong>函数中，直接返回 Tensor 的大小；在<strong>getitem</strong>函数中返回索引的数据与标签。</p><p>下面，我们来看一下如何调用刚才定义的数据集。首先随机生成一个 10*3 维的数据 Tensor，然后生成 10 维的标签 Tensor，与数据 Tensor 相对应。利用这两个 Tensor，生成一个 MyDataset 的对象。查看数据集的大小可以直接用 len()函数，索引调用数据可以直接使用下标。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 生成数据</span></span>
<span class="line">data_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">target_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 标签是0或1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 将数据封装成Dataset</span></span>
<span class="line">my_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span>data_tensor<span class="token punctuation">,</span> target_tensor<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看数据集大小</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Dataset size:&#39;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>my_dataset<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">输出：</span>
<span class="line">Dataset size: 10</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用索引调用数据</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;tensor_data[0]: &#39;</span><span class="token punctuation">,</span> my_dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">输出:</span>
<span class="line">tensor_data[0]:  (tensor([ 0.4931, -0.0697,  0.4171]), tensor(0))</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dataloader-类" tabindex="-1"><a class="header-anchor" href="#dataloader-类"><span>DataLoader 类</span></a></h3><p>在实际项目中，如果数据量很大，考虑到内存有限、I/O 速度等问题，在训练过程中不可能一次性的将所有数据全部加载到内存中，也不能只用一个进程去加载，所以就需要多进程、迭代加载，而 DataLoader 就是基于这些需要被设计出来的。</p><p>DataLoader 是一个迭代器，最基本的使用方法就是传入一个 Dataset 对象，它会根据参数 batch_size 的值生成一个 batch 的数据，节省内存的同时，它还可以实现多进程、数据打乱等处理。</p><p>DataLoader 类的调用方式如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader</span>
<span class="line">tensor_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>my_dataset<span class="token punctuation">,</span> <span class="token comment"># 传入的数据集, 必须参数</span></span>
<span class="line">                               batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>       <span class="token comment"># 输出的batch大小</span></span>
<span class="line">                               shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>       <span class="token comment"># 数据是否打乱</span></span>
<span class="line">                               num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment"># 进程数, 0表示只有主进程</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 以循环形式输出</span></span>
<span class="line"><span class="token keyword">for</span> data<span class="token punctuation">,</span> target <span class="token keyword">in</span> tensor_dataloader<span class="token punctuation">:</span> </span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">输出:</span>
<span class="line">tensor([[-0.1781, -1.1019, -0.1507],</span>
<span class="line">        [-0.6170,  0.2366,  0.1006]]) tensor([0, 0])</span>
<span class="line">tensor([[ 0.9451, -0.4923, -1.8178],</span>
<span class="line">        [-0.4046, -0.5436, -1.7911]]) tensor([0, 0])</span>
<span class="line">tensor([[-0.4561, -1.2480, -0.3051],</span>
<span class="line">        [-0.9738,  0.9465,  0.4812]]) tensor([1, 0])</span>
<span class="line">tensor([[ 0.0260,  1.5276,  0.1687],</span>
<span class="line">        [ 1.3692, -0.0170, -1.6831]]) tensor([1, 0])</span>
<span class="line">tensor([[ 0.0515, -0.8892, -0.1699],</span>
<span class="line">        [ 0.4931, -0.0697,  0.4171]]) tensor([1, 0])</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment"># 输出一个batch</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;One batch tensor data: &#39;</span><span class="token punctuation">,</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>tensor_dataloader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">输出:</span>
<span class="line">One batch tensor data:  [tensor([[ 0.9451, -0.4923, -1.8178],</span>
<span class="line">        [-0.4046, -0.5436, -1.7911]]), tensor([0, 0])]</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合代码，我们梳理一下 DataLoader 中的几个参数，它们分别表示：</p><ul><li>dataset：Dataset 类型，输入的数据集，必须参数；</li><li>batch_size：int 类型，每个 batch 有多少个样本；</li><li>shuffle：bool 类型，在每个 epoch 开始的时候，是否对数据进行重新打乱；</li><li>num_workers：int 类型，加载数据的进程数，0 意味着所有的数据都会被加载进主进程，默认为 0。</li></ul><h2 id="什么是-torchvision" tabindex="-1"><a class="header-anchor" href="#什么是-torchvision"><span>什么是 Torchvision</span></a></h2><p>PyTroch 官方为我们提供了一些常用的图片数据集，如果你需要读取这些数据集，那么无需自己实现，只需要利用 Torchvision 就可以搞定。</p><p>Torchvision 是一个和 PyTorch 配合使用的 Python 包。它不只提供了一些常用数据集，还提供了几个已经搭建好的经典网络模型，以及集成了一些图像数据处理方面的工具，主要供数据预处理阶段使用。简单地说，Torchvision 库就是<strong>常用数据集+常见网络模型+常用图像处理方法</strong>。</p><p>Torchvision 的安装方式同样非常简单，可以使用 conda 安装，命令如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">conda install torchvision -c pytorch</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或使用 pip 进行安装，命令如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">pip install torchvision</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Torchvision 中默认使用的图像加载器是 PIL，因此为了确保 Torchvision 正常运行，我们还需要安装一个 Python 的第三方图像处理库——Pillow 库。Pillow 提供了广泛的文件格式支持，强大的图像处理能力，主要包括图像储存、图像显示、格式转换以及基本的图像处理操作等。</p><p>使用 conda 安装 Pillow 的命令如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">conda install pillow</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 pip 安装 Pillow 的命令如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">pip install pillow</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="利用-torchvision-读取数据" tabindex="-1"><a class="header-anchor" href="#利用-torchvision-读取数据"><span>利用 Torchvision 读取数据</span></a></h2><p>安装好 Torchvision 之后，我们再来接着看看。Torchvision 库为我们读取数据提供了哪些支持。</p><p>Torchvision 库中的<code>torchvision.datasets</code>包中提供了丰富的图像数据集的接口。常用的图像数据集，例如 MNIST、COCO 等，这个模块都为我们做了相应的封装。</p><p>下表中列出了<code>torchvision.datasets</code>包所有支持的数据集。各个数据集的说明与接口，详见链接<a href="https://pytorch.org/vision/stable/datasets.html" target="_blank" rel="noopener noreferrer">https://pytorch.org/vision/stable/datasets.html</a>。</p><p><img src="https://static001.geekbang.org/resource/image/5f/44/5fa4d9067fa79b140d9e7646e7f28544.jpg?wh=1920x1162" alt="图片"></p><p>这里我想提醒你注意，<code>torchvision.datasets</code>这个包本身并不包含数据集的文件本身，它的工作方式是先从网络上把数据集下载到用户指定目录，然后再用它的加载器把数据集加载到内存中。最后，把这个加载后的数据集作为对象返回给用户。</p><p>为了让你进一步加深对知识的理解，我们以 MNIST 数据集为例，来说明一下这个模块具体的使用方法。</p><h3 id="mnist-数据集简介" tabindex="-1"><a class="header-anchor" href="#mnist-数据集简介"><span>MNIST 数据集简介</span></a></h3><p>MNIST 数据集是一个著名的手写数字数据集，因为上手简单，在深度学习领域，手写数字识别是一个很经典的学习入门样例。</p><p>MNIST 数据集是 NIST 数据集的一个子集，MNIST 数据集你可以通过<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener noreferrer">这里</a>下载。它包含了四个部分，我用表格的方式为你做了梳理。</p><p><img src="https://static001.geekbang.org/resource/image/b6/9d/b6f465e8d27ca7f7abc27932da46309d.jpg?wh=1920x1157" alt="图片"></p><p>MNIST 数据集是 ubyte 格式存储，我们先将“训练集图片”解析成图片格式，来直观地看一看数据集具体是什么样子的。具体怎么解析，我在后面数据预览再展开。</p><p><img src="https://static001.geekbang.org/resource/image/08/15/08977ccc74a3d2055434174e545d0515.jpg?wh=1920x844" alt="图片"></p><h3 id="数据读取" tabindex="-1"><a class="header-anchor" href="#数据读取"><span>数据读取</span></a></h3><p>接下来，我们看一下如何使用 Torchvision 来读取 MNIST 数据集。</p><p>对于<code>torchvision.datasets</code>所支持的所有数据集，它都内置了相应的数据集接口。例如刚才介绍的 MNIST 数据集，<code>torchvision.datasets</code>就有一个 MNIST 的接口，接口内封装了从下载、解压缩、读取数据、解析数据等全部过程。</p><p>这些接口的工作方式差不多，都是先从网络上把数据集下载到指定目录，然后再用加载器把数据集加载到内存中，最后将加载后的数据集作为对象返回给用户。</p><p>以 MNIST 为例，我们可以用如下方式调用：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 以MNIST为例</span></span>
<span class="line"><span class="token keyword">import</span> torchvision</span>
<span class="line">mnist_dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">&#39;./data&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                                       train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">                                       transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span></span>
<span class="line">                                       target_transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span></span>
<span class="line">                                       download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>torchvision.datasets.MNIST</code>是一个类，对它进行实例化，即可返回一个 MNIST 数据集对象。构造函数包括包含 5 个参数：</p><ul><li>root：是一个字符串，用于指定你想要保存 MNIST 数据集的位置。如果 download 是 Flase，则会从目标位置读取数据集；</li><li>download：是布尔类型，表示是否下载数据集。如果为 True，则会自动从网上下载这个数据集，存储到 root 指定的位置。如果指定位置已经存在数据集文件，则不会重复下载；</li><li>train：是布尔类型，表示是否加载训练集数据。如果为 True，则只加载训练数据。如果为 False，则只加载测试数据集。<strong>这里需要注意，并不是所有的数据集都做了训练集和测试集的划分，这个参数并不一定是有效参数，具体需要参考官方接口说明文档</strong>；</li><li>transform：用于对图像进行预处理操作，例如数据增强、归一化、旋转或缩放等。这些操作我们会在下节课展开讲解；</li><li>target_transform：用于对图像标签进行预处理操作。</li></ul><p>运行上述的代码，我们可以得到下图所示的效果。从图中我们可以看出，程序首先去指定的网址下载了 MNIST 数据集，然后进行了解压缩等操作。如果你再次运行相同的代码，则不会再有下载的过程。</p><p><img src="https://static001.geekbang.org/resource/image/dc/8a/dcec80c2aa0e63f5450c85b7cda5c88a.png?wh=1920x1387" alt="图片"></p><p>看到这，你可能还有疑问，好奇我们得到的 mnist_dataset 是什么呢？</p><p>如果你用 type 函数查看一下 mnist_dataset 的类型，就可以得到<code>torchvision.datasets.mnist.MNIST</code> ，而这个类是之前我们介绍过的 Dataset 类的派生类。相当于<code>torchvision.datasets</code> ，它已经帮我们写好了对 Dataset 类的继承，完成了对数据集的封装，我们直接使用即可。</p><p>这里我们主要以 MNIST 为例，进行了说明。其它的数据集使用方法类似，调用的时候你只要需要将类名“MNIST”换成其它数据集名字即可。</p><p>对于不同的数据集，数据格式都不尽相同，而<code>torchvision.datasets</code>则帮助我们完成了各种不同格式的数据的解析与读取，可以说十分便捷。而对于那些没有官方接口的图像数据集，我们也可以使用以<code>torchvision.datasets.ImageFolder</code>接口来自行定义，在图像分类的实战篇中，就是使用 ImageFolder 进行数据读取的，你可以到那个时候再看一看。</p><h3 id="数据预览" tabindex="-1"><a class="header-anchor" href="#数据预览"><span>数据预览</span></a></h3><p>完成了数据读取工作，我们得到的是对应的 mnist_dataset，刚才已经讲过了，这是一个封装了的数据集。</p><p>如果想要查看 mnist_dataset 中的具体内容，我们需要把它转化为列表。（如果 IOPub data rate 超限，可以只加载测试集数据，令 train=False）</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">mnist_dataset_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>mnist_dataset<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>mnist_dataset_list<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/9c/12/9c7838a309b6e9ffa8yy33a44b00d312.png?wh=1920x434" alt="图片"></p><p>从运行结果中可以看出，转换后的数据集对象变成了一个元组列表，每个元组有两个元素，第一个元素是图像数据，第二个元素是图像的标签。</p><p>这里图像数据是 PIL.Image.Image 类型的，这种类型可以直接在 Jupyter 中显示出来。显示一条数据的代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">display<span class="token punctuation">(</span>mnist_dataset_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Image label is:&quot;</span><span class="token punctuation">,</span> mnist_dataset_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下图所示。可以看出，数据集 mnist_dataset 中的第一条数据是图片手写数字“7”，对应的标签是“7”。</p><p><img src="https://static001.geekbang.org/resource/image/21/c3/211289da00fc13fd21f72573aee049c3.png?wh=1466x242" alt="图片"></p><p>好，如果你也得到了上面的运行结果，说明你的操作没问题，恭喜你成功完成了读取操作。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>恭喜你完成了这节课的学习。我们已经迈出了模型训练的第一步，学会了如何读取数据。</p><p>今天的重点就是掌握<strong>两种读取数据的方法，也就是自定义和读取常用图像数据集</strong>。</p><p>最通用的数据读取方法，就是自己定义一个 Dataset 的派生类。而读取常用的图像数据集，就可以利用 PyTorch 提供的视觉包 Torchvision。</p><p>Torchvision 库为我们读取数据提供了丰富的图像数据集的接口。我用手写数字识别这个经典例子，给你示范了如何使用 Torchvision 来读取 MNIST 数据集。</p><p><code>torchvision.datasets</code>继承了 Dataset 类，它在预定义许多常用的数据集的同时，还预留了数据预处理与数据增强的接口。在下一节课中，我们就会接触到这些数据增强函数，并学习如何进行数据增强。</p><h2 id="每课一练" tabindex="-1"><a class="header-anchor" href="#每课一练"><span>每课一练</span></a></h2><p>在 PyTorch 中，我们要定义一个数据集，应该继承哪一个类呢？</p><p>欢迎你在留言区和我交流互动，也推荐你把这节课内容分享给更多的朋友、同事，跟他一起学习进步。</p>`,83)]))}const c=n(p,[["render",i]]),r=JSON.parse('{"path":"/3.tech/83.PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/06_%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E7%AF%87-Torchvision%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%EF%BC%8C%E8%AE%AD%E7%BB%83%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5.html","title":"模型训练篇 Torchvision（上）：数据读取，训练开始的第一步","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"PyTorch 中的数据读取","slug":"pytorch-中的数据读取","link":"#pytorch-中的数据读取","children":[{"level":3,"title":"Dataset 类","slug":"dataset-类","link":"#dataset-类","children":[]},{"level":3,"title":"DataLoader 类","slug":"dataloader-类","link":"#dataloader-类","children":[]}]},{"level":2,"title":"什么是 Torchvision","slug":"什么是-torchvision","link":"#什么是-torchvision","children":[]},{"level":2,"title":"利用 Torchvision 读取数据","slug":"利用-torchvision-读取数据","link":"#利用-torchvision-读取数据","children":[{"level":3,"title":"MNIST 数据集简介","slug":"mnist-数据集简介","link":"#mnist-数据集简介","children":[]},{"level":3,"title":"数据读取","slug":"数据读取","link":"#数据读取","children":[]},{"level":3,"title":"数据预览","slug":"数据预览","link":"#数据预览","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"每课一练","slug":"每课一练","link":"#每课一练","children":[]}],"git":{"updatedTime":1746672966000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":2,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"873191059aa4709eddd6184a409223b5054edb2a","time":1746672966000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: pytorch fixed"},{"hash":"b44b80ec6b8c2ebffa55c7b2b54259609c76baed","time":1745668690000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add pytorch course"}]},"filePathRelative":"3.tech/83.PyTorch深度学习实战/06_模型训练篇-Torchvision（上）：数据读取，训练开始的第一步.md"}');export{c as comp,r as data};
