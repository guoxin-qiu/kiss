import{_ as s,c as a,b as p,o as e}from"./app-C01vnHKY.js";const t={};function i(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="wasm-编程基础-下" tabindex="-1"><a class="header-anchor" href="#wasm-编程基础-下"><span>Wasm 编程基础（下）</span></a></h1><p>前面的课程都以理论为主，可能你会觉得比较枯燥，实际上我本人也不喜欢看长篇大论的理论。但没办法，有些基础的点还是要讲清楚，要不后续的编码也没法展开，毕竟 Wasm 编程和常规编程还是有点区别的。</p><p>今天这节课，我就用一个简单的小例子，带你体验从编码到编译部署的全过程，最后我们再来测试一下这个小例子的效果。话不多说，先从环境准备开始。</p><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><p>Golang 需要是 1.18 版本以上，具体如何安装就不再赘述了。</p><p>TinyGo 是一个 Go 语言编译器，它专注于生成小型、高效的 Go 程序，特别是为嵌入式系统和 WebAssembly 环境设计。在这里，官方固定要求必须是 0.28.1 版本。可以点击链接从 <a href="https://github.com/tinygo-org/tinygo/releases/tag/v0.28.1" target="_blank" rel="noopener noreferrer">Github</a> 上下载 0.28.1 版本对应的可执行文件，放在 PATH 环境变量对应的目录下，并赋予可执行权限。</p><h2 id="编写插件" tabindex="-1"><a class="header-anchor" href="#编写插件"><span>编写插件</span></a></h2><p>接下来，我会以一个 HTTP 外部调用的例子，让你看一下 Wasm 开发的全貌。为了给你演示插件的编写过程和效果，我想了一个和 AI 结合的非常简单的功能，那就是 JSON Mode 功能。JSON Mode 技术已经出现了半年多了，你应该对此不陌生了，这项技术是为了让大模型输出稳定的结构化的内容，而发明的。</p><p>其原理也非常简单，属于 Prompt 工程的范畴。就是直接告诉大模型“请参考我的 JSON 定义输出 JSON 对象，示例：{&quot;ouput&quot;: &quot;hello&quot;}”。</p><p>因此在接下来的代码中，我会通过调用大模型 API 的方式来进行。首先通过 AI Proxy 插件访问通义千问大模型，例如向大模型发送 &quot;hello&quot;，之后由我们自己的插件，暂定名是 wasm-ai，拦截通义千问的返回，使用 DeepSeek 大模型实现 JSON Mode。整个输入输出的拓补图如下：</p><p><img src="https://static001.geekbang.org/resource/image/3b/0b/3be8a21bebd99d2094a6e733aace2a0b.jpg?wh=1425x813" alt="图片"></p><h3 id="服务与路由配置" tabindex="-1"><a class="header-anchor" href="#服务与路由配置"><span>服务与路由配置</span></a></h3><p>要想实现在插件中调用外部服务，首先需要进行服务配置。可在 Higress 控制台服务来源页面，点击创建服务来源，选择创建 DNS 域名类型的服务，在这里我创建两个大模型服务，一个是通义千问，用来做对话，另一个是最近比较火的 DeepSeek 大模型，用来做 JSON Mode。</p><p><img src="https://static001.geekbang.org/resource/image/b7/a1/b734109f16b6e5ffa2a5b24204cf52a1.png?wh=988x784" alt="图片"></p><p><img src="https://static001.geekbang.org/resource/image/45/e1/45bc7cc767259426eb8ba91f33a60ee1.png?wh=1000x783" alt="图片"></p><p>之后需要为通义千问大模型配置好路由，使得外部可以通过网关访问到。路由在路由配置页面进行设置。首先设置好路径匹配规则，如下图所示：</p><p><img src="https://static001.geekbang.org/resource/image/1c/41/1c2965dea13b117ca2648af1e0167841.png?wh=986x531" alt="图片"></p><p>通义千问大模型是 HTTPS 的服务，因此需要设置三个 ingress 注解。分别是：</p><ul><li><p>higress.io/backend-protocol: HTTPS</p></li><li><p>higress.io/proxy-ssl-name: dashscope.aliyuncs.com</p></li><li><p>higress.io/proxy-ssl-server-name: on</p></li></ul><p><img src="https://static001.geekbang.org/resource/image/28/e4/287590f00aa96dd023a1008152a64ee4.png?wh=1005x566" alt="图片"></p><p>最后将路由关联到模板服务上即可。</p><h3 id="初始化工程目录" tabindex="-1"><a class="header-anchor" href="#初始化工程目录"><span>初始化工程目录</span></a></h3><p>服务创建完成后，接下来就可以开始写代码了。首先新建一个工程目录，例如 wasm-ai.。并在目录下执行以下命令，进行 Go 工程初始化：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">go mod init wasm-ai</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>之后下载依赖包：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">go get github.com/higress-group/proxy-wasm-go-sdk</span>
<span class="line">go get github.com/alibaba/higress/plugins/wasm-go@main</span>
<span class="line">go get github.com/tidwall/gjson</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写-main-go" tabindex="-1"><a class="header-anchor" href="#编写-main-go"><span>编写 main.go</span></a></h3><p>代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;encoding/json&quot;</span></span>
<span class="line">    <span class="token string">&quot;net/http&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token string">&quot;github.com/alibaba/higress/plugins/wasm-go/pkg/wrapper&quot;</span></span>
<span class="line">    <span class="token string">&quot;github.com/higress-group/proxy-wasm-go-sdk/proxywasm&quot;</span></span>
<span class="line">    <span class="token string">&quot;github.com/higress-group/proxy-wasm-go-sdk/proxywasm/types&quot;</span></span>
<span class="line">    <span class="token string">&quot;github.com/tidwall/gjson&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    wrapper<span class="token punctuation">.</span><span class="token function">SetCtx</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token comment">// 插件名称</span></span>
<span class="line">        <span class="token string">&quot;my-plugin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// 为解析插件配置，设置自定义函数</span></span>
<span class="line">        wrapper<span class="token punctuation">.</span><span class="token function">ParseConfigBy</span><span class="token punctuation">(</span>parseConfig<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// 为处理返回体，设置自定义函数</span></span>
<span class="line">        wrapper<span class="token punctuation">.</span><span class="token function">ProcessResponseBodyBy</span><span class="token punctuation">(</span>onHttpResponseBody<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// completion</span></span>
<span class="line"><span class="token keyword">type</span> Completion <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Model    <span class="token builtin">string</span>    <span class="token string">\`json:&quot;model&quot;\`</span></span>
<span class="line">    Messages <span class="token punctuation">[</span><span class="token punctuation">]</span>Message <span class="token string">\`json:&quot;messages&quot;\`</span></span>
<span class="line">    Stream   <span class="token builtin">bool</span>      <span class="token string">\`json:&quot;stream&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Deepl <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Text        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">\`json:&quot;text&quot;\`</span></span>
<span class="line">    Target_lang <span class="token builtin">string</span>   <span class="token string">\`json:&quot;target_lang&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Message <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Role    <span class="token builtin">string</span> <span class="token string">\`json:&quot;role&quot;\`</span></span>
<span class="line">    Content <span class="token builtin">string</span> <span class="token string">\`json:&quot;content&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> CompletionResponse <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Choices           <span class="token punctuation">[</span><span class="token punctuation">]</span>Choice        <span class="token string">\`json:&quot;choices&quot;\`</span></span>
<span class="line">    Object            <span class="token builtin">string</span>          <span class="token string">\`json:&quot;object&quot;\`</span></span>
<span class="line">    Usage             CompletionUsage <span class="token string">\`json:&quot;usage&quot;\`</span></span>
<span class="line">    Created           <span class="token builtin">string</span>          <span class="token string">\`json:&quot;created&quot;\`</span></span>
<span class="line">    SystemFingerprint <span class="token builtin">string</span>          <span class="token string">\`json:&quot;system_fingerprint&quot;\`</span></span>
<span class="line">    Model             <span class="token builtin">string</span>          <span class="token string">\`json:&quot;model&quot;\`</span></span>
<span class="line">    ID                <span class="token builtin">string</span>          <span class="token string">\`json:&quot;id&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Choice <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Message      Message <span class="token string">\`json:&quot;message&quot;\`</span></span>
<span class="line">    FinishReason <span class="token builtin">string</span>  <span class="token string">\`json:&quot;finish_reason&quot;\`</span></span>
<span class="line">    Index        <span class="token builtin">int</span>     <span class="token string">\`json:&quot;index&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> CompletionUsage <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    PromptTokens     <span class="token builtin">int</span> <span class="token string">\`json:&quot;prompt_tokens&quot;\`</span></span>
<span class="line">    CompletionTokens <span class="token builtin">int</span> <span class="token string">\`json:&quot;completion_tokens&quot;\`</span></span>
<span class="line">    TotalTokens      <span class="token builtin">int</span> <span class="token string">\`json:&quot;total_tokens&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 自定义插件配置</span></span>
<span class="line"><span class="token keyword">type</span> PluginConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    url       <span class="token builtin">string</span></span>
<span class="line">    model     <span class="token builtin">string</span></span>
<span class="line">    apiKey    <span class="token builtin">string</span></span>
<span class="line">    LLMClient wrapper<span class="token punctuation">.</span>HttpClient</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在控制台插件配置中填写的YAML配置会自动转换为JSON，此处直接从JSON这个参数里解析配置即可</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">parseConfig</span><span class="token punctuation">(</span>json gjson<span class="token punctuation">.</span>Result<span class="token punctuation">,</span> config <span class="token operator">*</span>PluginConfig<span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;[parseConfig] start&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 解析出配置，更新到config中</span></span>
<span class="line">    config<span class="token punctuation">.</span>url <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    config<span class="token punctuation">.</span>model <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;model&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    config<span class="token punctuation">.</span>apiKey <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;apiKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    config<span class="token punctuation">.</span>LLMClient <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">NewClusterClient</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>FQDNCluster<span class="token punctuation">{</span></span>
<span class="line">        FQDN<span class="token punctuation">:</span> json<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;serviceFQDN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        Port<span class="token punctuation">:</span> json<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;servicePort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        Host<span class="token punctuation">:</span> json<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;serviceHost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 从response接收到firstreq的大模型返回</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">onHttpResponseBody</span><span class="token punctuation">(</span>ctx wrapper<span class="token punctuation">.</span>HttpContext<span class="token punctuation">,</span> config PluginConfig<span class="token punctuation">,</span> body <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> log wrapper<span class="token punctuation">.</span>Log<span class="token punctuation">)</span> types<span class="token punctuation">.</span>Action <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> responseCompletion CompletionResponse</span>
<span class="line">    <span class="token boolean">_</span> <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token operator">&amp;</span>responseCompletion<span class="token punctuation">)</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;content: %s&quot;</span><span class="token punctuation">,</span> responseCompletion<span class="token punctuation">.</span>Choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    completion <span class="token operator">:=</span> Completion<span class="token punctuation">{</span></span>
<span class="line">        Model<span class="token punctuation">:</span> config<span class="token punctuation">.</span>model<span class="token punctuation">,</span></span>
<span class="line">        Messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Message<span class="token punctuation">{</span><span class="token punctuation">{</span>Role<span class="token punctuation">:</span> <span class="token string">&quot;system&quot;</span><span class="token punctuation">,</span> Content<span class="token punctuation">:</span> <span class="token string">\`请参考我的 JSON 定义输出 JSON 对象，示例：{&quot;ouput&quot;: &quot;xxxx&quot;}\`</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">{</span>Role<span class="token punctuation">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> Content<span class="token punctuation">:</span> responseCompletion<span class="token punctuation">.</span>Choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Content<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        Stream<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    headers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bearer &quot;</span> <span class="token operator">+</span> config<span class="token punctuation">.</span>apiKey<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    reqEmbeddingSerialized<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>completion<span class="token punctuation">)</span></span>
<span class="line">    err <span class="token operator">:=</span> config<span class="token punctuation">.</span>LLMClient<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span></span>
<span class="line">        config<span class="token punctuation">.</span>url<span class="token punctuation">,</span></span>
<span class="line">        headers<span class="token punctuation">,</span></span>
<span class="line">        reqEmbeddingSerialized<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">func</span><span class="token punctuation">(</span>statusCode <span class="token builtin">int</span><span class="token punctuation">,</span> responseHeaders http<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> responseBody <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;statusCode: %d&quot;</span><span class="token punctuation">,</span> statusCode<span class="token punctuation">)</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;responseBody: %s&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">//得到gpt的返回结果</span></span>
<span class="line">            <span class="token keyword">var</span> responseCompletion CompletionResponse</span>
<span class="line">            <span class="token boolean">_</span> <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">,</span> <span class="token operator">&amp;</span>responseCompletion<span class="token punctuation">)</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;content: %s&quot;</span><span class="token punctuation">,</span> responseCompletion<span class="token punctuation">.</span>Choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> responseCompletion<span class="token punctuation">.</span>Choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Content <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">//如果结果不是空，则替换原本的response body</span></span>
<span class="line">                newbody<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>responseCompletion<span class="token punctuation">.</span>Choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                    proxywasm<span class="token punctuation">.</span><span class="token function">ResumeHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">return</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                proxywasm<span class="token punctuation">.</span><span class="token function">ReplaceHttpResponseBody</span><span class="token punctuation">(</span>newbody<span class="token punctuation">)</span></span>
<span class="line">                proxywasm<span class="token punctuation">.</span><span class="token function">ResumeHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;resume&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            proxywasm<span class="token punctuation">.</span><span class="token function">ResumeHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;[onHttpResponseBody] completion err: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        proxywasm<span class="token punctuation">.</span><span class="token function">ResumeHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> types<span class="token punctuation">.</span>ActionPause</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码首先用 wrapper.SetCtx 设置了启动入口，由于我的插件功能是拦截 HTTP Response，然后将其 JSON 化后返回，因此除了使用 ParseConfigBy 配置解析外，就只使用了 ProcessResponseBodyBy。</p><p>配置解析代码很简单。我的插件配置是这么设计的：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">url</span><span class="token punctuation">:</span> string</span>
<span class="line"><span class="token key atrule">model</span><span class="token punctuation">:</span> string</span>
<span class="line"><span class="token key atrule">apiKey</span><span class="token punctuation">:</span> string</span>
<span class="line"><span class="token key atrule">serviceHost</span><span class="token punctuation">:</span> string</span>
<span class="line"><span class="token key atrule">serviceFQDN</span><span class="token punctuation">:</span> string</span>
<span class="line"><span class="token key atrule">servicePort</span><span class="token punctuation">:</span> int</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前三个参数分别代表大模型的 base_url、模型名称以及模型的 APIKey。后三个参数是构建 Higress 服务发现所需要的参数。</p><p>Higress 插件的 Go SDK 在进行 HTTP 调用时，是通过指定的集群名称来识别并连接到相应的 Envoy 集群。 此外，Higress 利用  <a href="https://higress.cn/docs/latest/user/mcp-bridge/" target="_blank" rel="noopener noreferrer">McpBridge</a>  支持多种服务发现机制，包括静态配置（static）、DNS、Kubernetes 服务、Eureka、Consul、Nacos、以及 Zookeeper 等。 每种服务发现机制对应的集群名称生成规则都有所不同，这些规则在 cluster_wrapper.go 代码文件中有所体现。</p><p>在代码中，我使用的是 FQDN 类型的集群客户端。FQDN 定义如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">type</span> FQDNCluster <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">  FQDN <span class="token builtin">string</span></span>
<span class="line">  Host <span class="token builtin">string</span></span>
<span class="line">  Port <span class="token builtin">int64</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FQDN 就是在服务列表里看到的服务名称，形如“my-cluster.static”“your-cluster.dns”“foo.default.svc.cluster.local”。Host 字段用于发送实际 HTTP 请求时的缺省配置域名，如果在发送时的 URL 里指定了域名，那么将以指定的为准。</p><p>接下来看看拦截 HTTP Response 的代码。代码首先取出 Response Body，这个就是请求通义千问大模型后，大模型给出的答复。由于基本上各大模型厂商都会遵循 OpenAI SDK，因此就定义了 CompletionResponse 结构体对 Response 进行了反序列化，并从 responseCompletion.Choices[0].Message.Content 中取出了大模型的回复，拼接到了用于 JSON Mode 请求的对话 Completion。之后使用了在配置解析阶段配置好的 FQDN 客户端进行了 POST 请求，也就是向 DeepSeek 服务进行了一次请求。</p><p>由于 DeepSeek 也是遵循 OpenAI SDK 的，因此也使用 CompletionResponse 结构体接收 Response。大模型返回的内容会放置在 responseCompletion.Choices[0].Message.Content 中，如果不为空，那么 JSON 序列化成新的 Body，使用 ReplaceHttpResponseBody 替换掉原来的 Response，并使用 ResumeHttpResponse 恢复被插件拦截的 Response 流程。</p><p>这里用到的 ReplaceHttpResponseBody 和 ResumeHttpResponse 都是 SDK 提供的工具方法，除了这两个工具外，还有其他常用的方法如下表所示：</p><p><img src="https://static001.geekbang.org/resource/image/c4/50/c4950b730c1fbd5b8cbe34cf411f5650.jpg?wh=1920x2173" alt="图片"> 需要注意的是，流程恢复工具方法，一定不能用错，否则会导致插件崩溃。流程恢复工具要在请求/响应处于 Pause 状态时才能使用。而在 SendHttpResponse 之后，Pause 状态的请求/响应将自动恢复，此时不需要调用流程恢复工具方法。</p><h3 id="编译生成-wasm-文件以及打包镜像" tabindex="-1"><a class="header-anchor" href="#编译生成-wasm-文件以及打包镜像"><span>编译生成 Wasm 文件以及打包镜像</span></a></h3><p>在完成代码编写后，可执行以下命令编译成 Wasm 文件：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">tinygo build <span class="token operator">-</span>o main<span class="token punctuation">.</span>wasm <span class="token operator">-</span>scheduler<span class="token operator">=</span>none <span class="token operator">-</span>target<span class="token operator">=</span>wasi <span class="token operator">-</span>gc<span class="token operator">=</span>custom <span class="token operator">-</span>tags<span class="token operator">=</span>&#39;custommalloc nottinygc_finalizer&#39; <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>之后可以将其打包成 docker 镜像，传至镜像仓库，便于在 Higress 上部署插件。Dockerfile 文件内容如下：</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> scratch</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> main.wasm plugin.wasm</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后通过 docker 命令进行打包，我使用的是阿里云的镜像仓库，你可以替换为你自己的。</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code><span class="line">docker build --network host -t registry.cn-hangzhou.aliyuncs.com/aitools/wasm-ai:v1.0 .</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="部署插件" tabindex="-1"><a class="header-anchor" href="#部署插件"><span>部署插件</span></a></h3><p>回到 Higress 控制台，切换到插件配置页面，点击添加插件。之后按要求填写镜像地址，执行阶段和执行优先级。</p><p><img src="https://static001.geekbang.org/resource/image/4f/2c/4f357c06a690261d2bccf9ec9a2ffa2c.png?wh=984x802" alt="图片"></p><p>完成后点击保存，会自动跳回插件配置页面。将页面划到最底部，就可以看到我们刚刚部署的插件了。</p><p><img src="https://static001.geekbang.org/resource/image/66/e9/6605b6506b9921d4ded57f79e46960e9.png?wh=1183x774" alt="图片"></p><p>之后点击配置，开始配置插件。</p><p><img src="https://static001.geekbang.org/resource/image/af/98/af63b51ca5bb4037904b0af48d82ae98.png?wh=985x526" alt="图片"> 在配置中，将 DeepSeek 相关的参数按照设计配置上，点击保存就可以开启插件。</p><p>接下来，开启 AI Proxy 插件，用来代理通义千问大模型。插件是如下图所示的 AI 代理。</p><p><img src="https://static001.geekbang.org/resource/image/e6/88/e68b0bb443f12ca22cfb74a5b8ed8f88.png?wh=379x340" alt="图片"></p><p>点击配置，做一下简单配置：</p><p><img src="https://static001.geekbang.org/resource/image/c3/c9/c3353d9693e64f75d88d5042815e6ec9.png?wh=993x496" alt="图片"></p><p>apiTokens 填通义千问的，这里的 modelMapping 代表模型映射，前面的 * 代表任意模型，意义是请求网关的用户无论设置的是什么模型，最终经过 AI Proxy 时，都会最终转化成使用 qwen-max 模型。AI Proxy 同时还会将标准 OpenAI 格式的请求，转化成各个代理大模型的格式。</p><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>我们使用 apifox 工具进行测试。</p><p><img src="https://static001.geekbang.org/resource/image/22/4b/22b66a060009e21yyff90a58d0213f4b.png?wh=1302x794" alt="图片"></p><p>由于设置了 AI Proxy，因此 URL 的 PATH 使用的是 OpenAI Chat Completions 的 PATH，即 /api/openai/v1/chat/completions。在请求 Body 中，也是使用了 OpenAI 的标准格式，model 可以随便写，写 xxx 都可以，最后都会转成 qwen-max。</p><p>最后得到的 Response，就是按照预设的 JSON Mode 格式返回的。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>今天这节课，我使用了一个 JSON Mode 的小例子，带你编写了一个简单的 Wasm 插件。该插件可以实现在对网关进行 HTTP 请求后的 HTTP Response 阶段进行拦截，将 Response Body 中的内容，按规定的 JSON 格式进行格式化后，替换原 Body，然后返回。</p><p>代码流程很简单，你体会一下对于 HTTP 请求头、请求体、返回头、返回体等阶段拦截的思想即可。但是在写代码的过程中，对于工具方法的使用细节，尤其是 Resume 的使用，要小心。</p><p>除此之外，我还为你演示了服务配置、插件代码编译、打包、部署的全过程，你可以在课后按照我的步骤测试一下，加深理解。本节课的代码已经上传到我的 <a href="https://github.com/xingyunyang01/Geek/tree/main/agent" target="_blank" rel="noopener noreferrer">Github</a>，你可点击链接自取。</p><p>到此，Wasm 基础知识的学习就告一段落了，从下节课开始我们开始编写正式的 AI 插件。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>我希望在本节课代码的基础上，在 HTTP 原始返回头上添加一个 mode:json 返回头，应该怎么做呢？</p>`,72)]))}const c=s(t,[["render",i]]),u=JSON.parse('{"path":"/3.tech/84.AIAgent/21.Wasm%20%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89.html","title":"Wasm 编程基础（下）","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[]},{"level":2,"title":"编写插件","slug":"编写插件","link":"#编写插件","children":[{"level":3,"title":"服务与路由配置","slug":"服务与路由配置","link":"#服务与路由配置","children":[]},{"level":3,"title":"初始化工程目录","slug":"初始化工程目录","link":"#初始化工程目录","children":[]},{"level":3,"title":"编写 main.go","slug":"编写-main-go","link":"#编写-main-go","children":[]},{"level":3,"title":"编译生成 Wasm 文件以及打包镜像","slug":"编译生成-wasm-文件以及打包镜像","link":"#编译生成-wasm-文件以及打包镜像","children":[]},{"level":3,"title":"部署插件","slug":"部署插件","link":"#部署插件","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/21.Wasm 编程基础（下）.md"}');export{c as comp,u as data};
