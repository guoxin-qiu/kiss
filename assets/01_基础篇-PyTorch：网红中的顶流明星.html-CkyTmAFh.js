import{_ as a,c as r,b as p,o as n}from"./app-C01vnHKY.js";const s={};function t(i,e){return n(),r("div",null,e[0]||(e[0]=[p(`<h1 id="基础篇-pytorch-网红中的顶流明星" tabindex="-1"><a class="header-anchor" href="#基础篇-pytorch-网红中的顶流明星"><span>基础篇-PyTorch：网红中的顶流明星</span></a></h1><p>从这节课开始，我们正式进入 PyTorch 基础篇的学习。</p><p>在基础篇中，我们带你了解 PyTorch 的发展趋势与框架安装方法，然后重点为你讲解 NumPy 和 Tensor 的常用知识点。</p><p>掌握这些基础知识与技巧，能够让你使用 PyTorch 框架的时候更高效，也是从头开始学习机器学习与深度学习迈出的第一步。磨刀不误砍柴工，所以通过这个模块，我们的目标是做好学习的准备工作。</p><p>今天这节课，我们先从 PyTorch 的安装和常用编程工具说起，先让你对 PyTorch 用到的语言、工具、技术做到心里有数，以便更好地开启后面的学习之旅。</p><h2 id="pytorch-登场" tabindex="-1"><a class="header-anchor" href="#pytorch-登场"><span>PyTorch 登场</span></a></h2><p>为什么选择 PyTorch 框架，我在开篇词就已经说过了。从 19 年起，无论是学术界还是工程界 PyTorch 已经霸占了半壁江山，可以说 PyTorch 已经是现阶段的主流框架了。</p><p>这里的 Py 我们不陌生，它就是 Python，那 Torch 是什么？从字面翻译过来是一个“火炬”。</p><p><img src="https://static001.geekbang.org/resource/image/8b/8d/8b83b03c5e25886e1c6fe5aed8572e8d.png?wh=480x141" alt="图片"></p><p>什么是火炬呢？其实这跟 TensorFlow 中的 Tensor 是一个意思，我们可以把它看成是<strong>能在 GPU 中计算的矩阵</strong>。</p><p>那 PyTorch 框架具体是怎么用的呢？说白了就是一个计算的工具。借助它，我们就能用计算机完成复杂的计算流程。</p><p>但是我们都知道，机器跟人类的“语言”并不相通，想要让机器替我们完成对数据的复杂计算，就得先把数据翻译成机器能够理解的内容。无论是图像数据、文本数据还是数值数据，都要转换成矩阵才能进行后续的变化和运算。</p><p>搞定了读入数据这一步，我们就要靠 PyTorch 搞定后面各种复杂的计算功能。这些所有的计算功能，包括了从前向传播到反向传播，甚至还会涉及其它非常复杂的计算，而这些计算统统要交给 PyTorch 框架实现。</p><p>PyTorch 会把我们需要计算的矩阵传入到 GPU（或 CPU）当中，在 GPU（或 CPU）中实现各种我们所需的计算功能。<strong>因为 GPU 做矩阵运算比较快，所以在神经网络中的计算一般都首选使用 GPU，但对于学习来说，我们用 CPU 就可以了</strong>。</p><p>而我们要做的就是，设计好整个任务的流程、整个网络架构，这样 PyTorch 才能顺畅地完成后面的计算流程，从而帮我们正确地计算。</p><h2 id="安装-pytorch-及其使用环境" tabindex="-1"><a class="header-anchor" href="#安装-pytorch-及其使用环境"><span>安装 PyTorch 及其使用环境</span></a></h2><p>在 PyTorch 安装之前，还有安装 Python3 以及 pip 这些最基础的操作，这些你在网上随便搜一下就能找到，相信你可以独立完成。</p><p>这里我直接从安装 PyTorch 开始说，PyTorch 安装起来非常非常简单，方法也有很多，这里我们先看看最简单的方法：使用 pip 安装。</p><h3 id="使用-pip-安装-pytorch" tabindex="-1"><a class="header-anchor" href="#使用-pip-安装-pytorch"><span>使用 pip 安装 PyTorch</span></a></h3><p>CPU 版本安装：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line"># Linux</span>
<span class="line">pip install torch==1.9.0+cpu torchvision==0.10.0+cpu torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html</span>
<span class="line"># Mac &amp; Windows</span>
<span class="line">pip install torch torchvision torchaudio</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GPU 版本安装：（默认 CUDA 11.1 版本）</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line"># Linux &amp; Windows</span>
<span class="line">pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要将上面的命令复制到计算机的命令行当中，即可实现快速安装。</p><p>这里有两个版本，一个 GPU 版本，一个 CPU 版本。建议你最好选择安装 GPU 版本，也就是说我们的硬件设备中最好有英伟达独立显卡。用 GPU 训练深度学习模型是非常快速的，所以在实际项目中都是使用 GPU 来训练模型。</p><p>但是如果说大家手里没有供开发使用的英伟达 GPU 显卡的话，那么安装 CPU 版本也是可以的，在学习过程中，CPU 也足够让我们的小实验运行起来。</p><p>另外，安装 GPU 版本前，需要安装对应版本的 CUDA 工具包。我们可以到<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener noreferrer">英伟达官网</a>，选择相应操作系统的 CUDA 工具包，进行下载与安装。硬件设备中无英伟达显卡的，可以略过这部分。</p><p>目前 PyTorch 的稳定版本是 1.9.0，后续如果 PyTorch 的版本升级更新了，我们再将命令中的版本号稍作修改就可以了。</p><h3 id="其它方法安装-pytorch" tabindex="-1"><a class="header-anchor" href="#其它方法安装-pytorch"><span>其它方法安装 PyTorch</span></a></h3><p><a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener noreferrer">这里</a>是 PyTorch 的官网，在页面如下图所示的位置，我们可以看到有一些配置选项和安装命令。</p><p><img src="https://static001.geekbang.org/resource/image/31/7d/31c693e2433525636f302a6e066c137d.png?wh=1624x624" alt="图片"></p><p>我们可以根据页面上的指引，依次选择 PyTorch 的版本、你的操作系统、安装方式、编程语言以及计算平台，然后根据最下方的执行命令进行安装即可。</p><p>值得注意的是，<strong>Mac 的操作系统只能安装 CPU 版本</strong>。我尝试下来最简单的方式，还是使用 pip 来安装。</p><h3 id="验证是否安装成功" tabindex="-1"><a class="header-anchor" href="#验证是否安装成功"><span>验证是否安装成功</span></a></h3><p>你在终端中输入“python”，就可以进入到 Python 交互模式。</p><p>首先输入如下代码，如果没有报错，就意味着 PyTorch 已经顺利安装了。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来，输入下面的代码，如果输出结果是“True”，意味着你可以使用 GPU。 这行代码的意思是检测 GPU 是否可用。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里你也许会有疑问，为什么我安装的明明是 GPU 版本，但是代码却返回了“False”，显示 GPU 不可用呢？</p><p>对于这个问题，我们依次按照下面的步骤进行检查。</p><p>1.检查计算机上是否有支持 CUDA 的 GPU。</p><p>首先查看电脑的显卡型号以及是否有独立显卡，如果没有以“NVIDIAN”名称开头的独立显卡，则不能支持 CUDA，因此 GPU 不可用。</p><p>然后，你可以在<a href="https://developer.nvidia.com/zh-cn/cuda-gpus#compute" target="_blank" rel="noopener noreferrer">这个页面</a>查询 GPU 是否支持 CUDA。如果你的 GPU 型号在页面的列表中，则表示你的计算机搭载了能够利用 CUDA 加速应用的现代 GPU，否则 GPU 也不可用。</p><p>若 GPU 支持 CUDA，你还需要确保已经完成了上面介绍过的 CUDA 工具包的安装。</p><p>2.检查显卡驱动版本。</p><p>在终端中输入“nvidia-smi”命令，会显示出显卡驱动的版本和 CUDA 的版本，如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/58/4b/587018eab4418fb70fc2ee76a72fcd4b.jpg?wh=587x401" alt="图片"></p><p>如果显卡驱动的版本过低，与 CUDA 版本不匹配，那么 GPU 也不可用，需要根据显卡的型号更新显卡驱动。</p><p>我用表格的方式，帮你梳理了 CUDA 版本与 GPU 驱动版本的对应关系，你可以根据自己计算机驱动的情况对照查看。例如，CUDA 11.1 支持的 Linux 驱动程序是 450.80.02 以上。 <img src="https://static001.geekbang.org/resource/image/34/ff/34007081a277979659f81019a5d559ff.jpg?wh=3168x1648" alt=""></p><p>我们可以在<a href="https://www.nvidia.com/Download/index.aspx?lang=cn" target="_blank" rel="noopener noreferrer">这里</a>下载并安装显卡驱动程序。</p><p>3.检查 PyTorch 版本和 CUDA 版本是否匹配？</p><p>PyTorch 版本同样与 CUDA 版本有对应关系，我们可以在<a href="https://pytorch.org/get-started/previous-versions/" target="_blank" rel="noopener noreferrer">这个页面</a>查看它们之间的对应关系。如果两者版本不匹配，可以重新安装对应版本的 PyTorch，或者升级 CUDA 工具包。</p><h3 id="使用-docker" tabindex="-1"><a class="header-anchor" href="#使用-docker"><span>使用 Docker</span></a></h3><p>通过 Docker 使用 PyTorch 也非常简单，连安装都不需要，但是前提是你需要熟悉有关 Docker 的知识。</p><p>如果你会熟练地使用 Docker，我推荐后面这个网页链接供你参考，<a href="https://hub.docker.com/r/pytorch/pytorch/tags" target="_blank" rel="noopener noreferrer">这里</a>有很多的 PyTorch 的 Docker 镜像，你可以找到自己需要的镜像，然后拉取一个镜像到你的服务器或者本地，直接启动就可以了，无需额外的环境配置。</p><h2 id="常用编程工具" tabindex="-1"><a class="header-anchor" href="#常用编程工具"><span>常用编程工具</span></a></h2><p>在使用 PyTorch 进行编程之前，我们先来看看几个常用的编程工具，但是并不要求你必须使用它们，你可以根据自己的喜好自由选择。</p><h3 id="sublime-text" tabindex="-1"><a class="header-anchor" href="#sublime-text"><span>Sublime Text</span></a></h3><p>Sublime Text 是一个非常轻量且强大的文本编辑工具，内置了很多快捷的功能，对于我们开发来说非常便捷。</p><p><img src="https://static001.geekbang.org/resource/image/5e/9f/5e9506c5188f8b0ac687f7b14f271e9f.jpg?wh=1920x1260" alt="图片"></p><p>例如，它可以自动为项目中的类、方法和函数生成索引，让我们可以跟踪代码。具体就是通过它的 goto anything 功能，根据一些关键字，查找到项目中的对应的代码行。另外，它能支持的插件功能也很丰富。</p><h3 id="pycharm" tabindex="-1"><a class="header-anchor" href="#pycharm"><span>PyCharm</span></a></h3><p>PyCharm  作为一款针对  Python  的编辑器，配置简单、功能强大，使用起来省时省心，对初学者十分友好。它拥有一般 IDE 所具备的功能，比如：语法高亮、项目管理、代码跳转、代码补全、调试、单元测试、版本控制等等。</p><p><img src="https://static001.geekbang.org/resource/image/76/87/76293c15f3c202e99213a4c3c5d09887.jpg?wh=1904x1032" alt=""></p><h3 id="vim" tabindex="-1"><a class="header-anchor" href="#vim"><span>Vim</span></a></h3><p>Vim 是 Linux 系统中的文本编辑工具，非常方便快捷，并且很强大。我们在项目中经常用到它。</p><p>在我们的项目中，经常是需要登录到服务器上进行开发的，服务器一般都是 Linux 系统，不会有 Sublime Text 与 PyCharm，所以，我们用 Vim 打开代码，直接去进行编辑就可以了。</p><p>对于没有接触过 Linux，或者一直习惯使用 IDE 来编程开发的同学，初步接触的时候，可能觉得 Vim 不是很方便，但实际上，Vim 包含了丰富的快捷键，对于 Shell 与 Python 的开发来说非常高效。</p><p>但是 Vim 的缺点正如刚才所说，你需要去学习它的使用方法，有一点点门槛，但是只要你学会了，我保证你将对它爱不释手（这里也推荐有需要的同学去看看隔壁的<a href="https://time.geekbang.org/column/intro/100055801" target="_blank" rel="noopener noreferrer">《Vim 实用技巧必知必会》</a>专栏）。</p><h3 id="jupyter-notebook-lab" tabindex="-1"><a class="header-anchor" href="#jupyter-notebook-lab"><span>Jupyter Notebook&amp;Lab</span></a></h3><p>Jupyter Notebook 是一个开源的 Web 应用，这也是我最想推荐给你的一个工具。它能够让你创建和分享包含可执行代码、可视化结构和文字说明的文档。</p><p><strong>在后面的课程，如果涉及图片生成或结果展示，我们也会使用到 Jupyter Notebook，这里推荐你先安装好</strong>。</p><p>简而言之，Jupyter Notebook 是以网页的形式打开，可以在网页页面中直接编写代码和运行代码，代码的运行结果也会直接在代码块下显示。比如在编程过程中需要编写说明文档，可以在同一个页面中直接编写，便于及时说明、解释。</p><p>而 Jupyter Lab 可以看做是 Jupyter Notebook 的终极进化版，它不但包含了 Jupyter Notebook 所有功能，并且集成了操作终端、打开交互模式、查看 csv 文件及图片等功能。</p><p><img src="https://static001.geekbang.org/resource/image/fe/a4/fe289768b33b8aa2ce53e743f5d14fa4.png?wh=1322x914" alt="图片"></p><p>Jupyter Notebook 在我们的深度学习领域非常活跃。在实验测试阶段，相比用 py 文件来直接编程，还是 Jupyter Notebook 方便一些。在项目结束之后如果要书写项目报告，我觉得用 Jupyter 也比较合适。</p><h4 id="使用-pip-安装-jupyter" tabindex="-1"><a class="header-anchor" href="#使用-pip-安装-jupyter"><span>使用 pip 安装 Jupyter</span></a></h4><p>通过 pip 安装 Jupyter Notebook 的命令如下。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">pip install jupyter</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过 pip 安装 Jupyter Lab 的命令如下。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">pip install jupyterlab</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="启动-jupyter" tabindex="-1"><a class="header-anchor" href="#启动-jupyter"><span>启动 Jupyter</span></a></h4><p>完成安装，就可以启动了。我们直接在终端中，执行下面的命令，就可以启动 Jupyter Notebook。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">jupyter notebook</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动 Jupyter Lab 需要在终端执行如下命令。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">jupyter lab</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不管在 macOS 系统里，还是在 Windows 系统，通过以上任意一种方式启动成功之后，浏览器都会自动打开 Jupyter Notebook 或者 Jupyter Lab 的开发环境（你可以回顾下“Jupyter Notebook &amp; Lab”那个例子里的界面）。</p><h4 id="运行-jupyter-notebook" tabindex="-1"><a class="header-anchor" href="#运行-jupyter-notebook"><span>运行 Jupyter Notebook</span></a></h4><p>进入到 Jupyter Notebook 的界面，我们尝试新建一个 Python 的 Notebook。具体操作方法如下图所示。点击“New”下拉菜单，然后点击“Python 3”选项，来创建一个新的 Python Notebook。</p><p><img src="https://static001.geekbang.org/resource/image/06/27/0609b9a2d166a967ab23764903117b27.jpg?wh=1626x668" alt=""></p><p>上面我们已经讲过了 PyTorch 的安装方法，我们可以执行下面这段代码，来看看 PyTorch 是否已经安装成功。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> torch</span>
<span class="line">torch<span class="token punctuation">.</span>__version__</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>点击运行按钮，我们可以看到代码执行的结果，输出了当前安装的 PyTorch 的版本，即 PyTorch 1.9.0 的 GPU 版本。这说明 PyTorch 框架已经安装成功。</p><p><img src="https://static001.geekbang.org/resource/image/68/4f/6804a69022ce814b32990ba94a74474f.jpg?wh=1092x490" alt=""></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>恭喜你完成了这节课的学习。</p><p>今天，我们一起了解了 PyTorch 框架的用途，简单来说就是能利用 GPU 帮我们搞定深度学习中一系列复杂运算的框架。</p><p>想要用好这个工具，我们就得设计好整个任务的流程、整个网络架构，这样 PyTorch 才能实现各种各样复杂的计算功能。</p><p>之后我们学习了 PyTorch 框架的安装方法，我还给你推荐了一些深度学习编程的常用工具。<strong>其中我最推荐的工具就是 Jupyter Notebook，这个工具在深度学习领域里常常会用到，后面课程里涉及图片生成或者结果展示的环节，我们也会用到它</strong>。</p><p><img src="https://static001.geekbang.org/resource/image/ba/c9/babe27a41b8fb46699475bd7b0c521c9.jpg?wh=2944x1837" alt=""></p><p>课程的准备工作就是这些，让我们一起动手，配置好环境，并选择一个你觉得顺手的开发工具，正式开始 PyTorch 的探索之旅吧！</p><p>千里之行，始于足下。我在下节课等你，如果你有什么问题，也可以通过留言区和我交流。</p><p>我是方远，我们下一讲见！</p>`,104)]))}const c=a(s,[["render",t]]),l=JSON.parse('{"path":"/3.tech/83.PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/01_%E5%9F%BA%E7%A1%80%E7%AF%87-PyTorch%EF%BC%9A%E7%BD%91%E7%BA%A2%E4%B8%AD%E7%9A%84%E9%A1%B6%E6%B5%81%E6%98%8E%E6%98%9F.html","title":"基础篇-PyTorch：网红中的顶流明星","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"PyTorch 登场","slug":"pytorch-登场","link":"#pytorch-登场","children":[]},{"level":2,"title":"安装 PyTorch 及其使用环境","slug":"安装-pytorch-及其使用环境","link":"#安装-pytorch-及其使用环境","children":[{"level":3,"title":"使用 pip 安装 PyTorch","slug":"使用-pip-安装-pytorch","link":"#使用-pip-安装-pytorch","children":[]},{"level":3,"title":"其它方法安装 PyTorch","slug":"其它方法安装-pytorch","link":"#其它方法安装-pytorch","children":[]},{"level":3,"title":"验证是否安装成功","slug":"验证是否安装成功","link":"#验证是否安装成功","children":[]},{"level":3,"title":"使用 Docker","slug":"使用-docker","link":"#使用-docker","children":[]}]},{"level":2,"title":"常用编程工具","slug":"常用编程工具","link":"#常用编程工具","children":[{"level":3,"title":"Sublime Text","slug":"sublime-text","link":"#sublime-text","children":[]},{"level":3,"title":"PyCharm","slug":"pycharm","link":"#pycharm","children":[]},{"level":3,"title":"Vim","slug":"vim","link":"#vim","children":[]},{"level":3,"title":"Jupyter Notebook&Lab","slug":"jupyter-notebook-lab","link":"#jupyter-notebook-lab","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"updatedTime":1746672966000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":2,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"873191059aa4709eddd6184a409223b5054edb2a","time":1746672966000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: pytorch fixed"},{"hash":"b44b80ec6b8c2ebffa55c7b2b54259609c76baed","time":1745668690000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add pytorch course"}]},"filePathRelative":"3.tech/83.PyTorch深度学习实战/01_基础篇-PyTorch：网红中的顶流明星.md"}');export{c as comp,l as data};
