import{_ as s,c as a,b as e,o as p}from"./app-C01vnHKY.js";const i={};function t(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="模型训练篇-torchvision-中-数据增强-让数据更加多样性" tabindex="-1"><a class="header-anchor" href="#模型训练篇-torchvision-中-数据增强-让数据更加多样性"><span>模型训练篇 Torchvision（中）：数据增强，让数据更加多样性</span></a></h1><p>上一节课，我们一同迈出了训练开始的第一步——数据读取，初步认识了 Torchvision，学习了如何利用 Torchvision 读取数据。不过仅仅将数据集中的图片读取出来是不够的，在训练的过程中，神经网络模型接收的数据类型是 Tensor，而不是 PIL 对象，因此我们还需要对数据进行预处理操作，比如图像格式的转换。</p><p>与此同时，加载后的图像数据可能还需要进行一系列图像变换与增强操作，例如裁切边框、调整图像比例和大小、标准化等，以便模型能够更好地学习到数据的特征。这些操作都可以使用<code>torchvision.transforms</code>工具完成。</p><p>今天我们就来学习一下，利用 Torchvision 如何进行数据预处理操作，如何进行图像变换与增强。</p><h2 id="图像处理工具之-torchvision-transforms" tabindex="-1"><a class="header-anchor" href="#图像处理工具之-torchvision-transforms"><span>图像处理工具之 torchvision.transforms</span></a></h2><p>Torchvision 库中的<code>torchvision.transforms</code>包中提供了常用的图像操作，包括对 Tensor 及 PIL Image 对象的操作，例如随机切割、旋转、数据类型转换等等。</p><p>按照<code>torchvision.transforms</code> 的功能，大致分为以下几类：数据类型转换、对 PIL.Image 和 Tensor 进行变化和变换的组合。下面我们依次来学习这些类别中的操作。</p><h3 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换"><span>数据类型转换</span></a></h3><p>在上一节课中，我们学习了读取数据集中的图片，读取到的数据是 PIL.Image 的对象。而在模型训练阶段，需要传入 Tensor 类型的数据，神经网络才能进行运算。</p><p>那么如何将 PIL.Image 或 Numpy.ndarray 格式的数据转化为 Tensor 格式呢？这需要用到<code>transforms.ToTensor()</code> 类。</p><p>而反之，将 Tensor 或 Numpy.ndarray 格式的数据转化为 PIL.Image 格式，则使用<code>transforms.ToPILImage(mode=None)</code> 类。它则是 ToTensor 的一个逆操作，它能把 Tensor 或 Numpy 的数组转换成 PIL.Image 对象。</p><p>其中，参数 mode 代表 PIL.Image 的模式，如果 mode 为 None（默认值），则根据输入数据的维度进行推断：</p><ul><li>输入为 3 通道：mode 为&#39;RGB&#39;；</li><li>输入为 4 通道：mode 为&#39;RGBA&#39;；</li><li>输入为 2 通道：mode 为&#39;LA&#39;;</li><li>输入为单通道：mode 根据输入数据的类型确定具体模式。</li></ul><p><img src="https://static001.geekbang.org/resource/image/d3/0c/d3013753ef85937a39b64ef8f556df0c.jpg?wh=318x116" alt="图片"></p><p>说完用法，我们来看一个具体的例子加深理解。以极客时间的 LOGO 图片（文件名为：jk.jpg）为例，进行一下数据类型的相互转换。具体代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image</span>
<span class="line"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms </span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;jk.jpg&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">display<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># PIL.Image.Image是PIL.JpegImagePlugin.JpegImageFile的基类</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">输出: </span>
<span class="line">&lt;class &#39;PIL.JpegImagePlugin.JpegImageFile&#39;&gt;</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># PIL.Image转换为Tensor</span></span>
<span class="line">img1 <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>img1<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">输出: </span>
<span class="line">&lt;class &#39;torch.Tensor&#39;&gt;</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Tensor转换为PIL.Image</span></span>
<span class="line">img2 <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToPILImage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>img1<span class="token punctuation">)</span>  <span class="token comment">#PIL.Image.Image</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>img2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">输出: </span>
<span class="line">&lt;class &#39;PIL.Image.Image&#39;&gt;</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先用读取图片，查看一下图片的类型为 PIL.JpegImagePlugin.JpegImageFile，这里需要注意**，PIL.JpegImagePlugin.JpegImageFile 类是 PIL.Image.Image 类的子类**。然后，用<code>transforms.ToTensor()</code> 将 PIL.Image 转换为 Tensor。最后，再将 Tensor 转换回 PIL.Image。</p><h3 id="对-pil-image-和-tensor-进行变换" tabindex="-1"><a class="header-anchor" href="#对-pil-image-和-tensor-进行变换"><span>对 PIL.Image 和 Tensor 进行变换</span></a></h3><p><code>torchvision.transforms</code> 提供了丰富的图像变换方法，例如：改变尺寸、剪裁、翻转等。并且这些图像变换操作可以接收多种数据格式，不仅可以直接对 PIL 格式的图像进行变换，也可以对 Tensor 进行变换，无需我们再去做额外的数据类型转换。</p><p>下面我们依次来看一看。</p><h4 id="resize" tabindex="-1"><a class="header-anchor" href="#resize"><span>Resize</span></a></h4><p>将输入的 PIL Image 或 Tensor 尺寸调整为给定的尺寸，具体定义为：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span>size<span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们依次看下相关的参数：</p><ul><li>size：期望输出的尺寸。如果 size 是一个像 (h, w) 这样的元组，则图像输出尺寸将与之匹配。如果 size 是一个 int 类型的整数，图像较小的边将被匹配到该整数，另一条边按比例缩放。</li><li>interpolation：插值算法，int 类型，默认为 2，表示 PIL.Image.BILINEAR。</li></ul><p>有关 Size 中是 tuple 还是 int 这一点请你一定要注意。</p><p>让我说明一下，在我们训练时，通常要把图片 resize 到一定的大小，比如说 128x128，256x256 这样的。如果直接给定 resize 后的高与宽，是没有问题的。但如果设定的是一个 int 型，较长的边就会按比例缩放。</p><p>在 resize 之后呢，一般会接一个 crop 操作，crop 到指定的大小。对于高与宽接近的图片来说，这么做问题不大，但是高与宽的差距较大时，就会 crop 掉很多有用的信息。关于这一点，我们在后续的图像分类部分还会遇到，到时我在详细展开。</p><p>我们还是以极客时间的 LOGO 图片为例，一起看一下 Resize 的效果。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image</span>
<span class="line"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms </span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义一个Resize操作</span></span>
<span class="line">resize_img_oper <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 原图</span></span>
<span class="line">orig_img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;jk.jpg&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">display<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Resize操作后的图</span></span>
<span class="line">img <span class="token operator">=</span> resize_img_oper<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line">display<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先定义一个 Resize 操作，设置好变换后的尺寸为(200, 200)，然后对极客时间 LOGO 图片进行 Resize 变换。 原图以及 Resize 变换后的效果如下表所示。</p><p><img src="https://static001.geekbang.org/resource/image/56/09/5611e53aaed88bb079909992db5c6d09.jpg?wh=1232x505" alt="图片"></p><h4 id="剪裁" tabindex="-1"><a class="header-anchor" href="#剪裁"><span>剪裁</span></a></h4><p><code>torchvision.transforms</code>提供了多种剪裁方法，例如中心剪裁、随机剪裁、四角和中心剪裁等。我们依次来看下它们的定义。</p><p>先说中心剪裁，顾名思义，在中心裁剪指定的 PIL Image 或 Tensor，其定义如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span>size<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，size 表示期望输出的剪裁尺寸。如果 size 是一个像 (h, w) 这样的元组，则剪裁后的图像尺寸将与之匹配。如果  size  是  int  类型的整数，剪裁出来的图像是  (size, size)  的正方形。</p><p>然后是随机剪裁，就是在一个随机位置剪裁指定的 PIL Image 或 Tensor，定义如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span>size<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，size 代表期望输出的剪裁尺寸，用法同上。而 padding 表示图像的每个边框上的可选填充。默认值是 None，即没有填充。通常来说，不会用 padding 这个参数，至少对于我来说至今没用过。</p><p>最后要说的是 FiveCrop，我们将给定的 PIL Image 或 Tensor ，分别从四角和中心进行剪裁，共剪裁成五块，定义如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">torchvision.transforms.FiveCrop(size)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>size 可以是 int 或 tuple，用法同上。 掌握了各种剪裁的定义和参数用法以后，我们来看一下这些剪裁操作具体如何调用，代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image</span>
<span class="line"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms </span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义剪裁操作</span></span>
<span class="line">center_crop_oper <span class="token operator">=</span> transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">random_crop_oper <span class="token operator">=</span> transforms<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">five_crop_oper <span class="token operator">=</span> transforms<span class="token punctuation">.</span>FiveCrop<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 原图</span></span>
<span class="line">orig_img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;jk.jpg&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">display<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 中心剪裁</span></span>
<span class="line">img1 <span class="token operator">=</span> center_crop_oper<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line">display<span class="token punctuation">(</span>img1<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 随机剪裁</span></span>
<span class="line">img2 <span class="token operator">=</span> random_crop_oper<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line">display<span class="token punctuation">(</span>img2<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 四角和中心剪裁</span></span>
<span class="line">imgs <span class="token operator">=</span> five_crop_oper<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> img <span class="token keyword">in</span> imgs<span class="token punctuation">:</span></span>
<span class="line">    display<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程和 Resize 类似，都是先定义剪裁操作，然后对极客时间 LOGO 图片进行不同的剪裁。 具体剪裁效果如下表所示。</p><p><img src="https://static001.geekbang.org/resource/image/60/b5/60ca577c5f08eef4ca727c1f0aac9cb5.jpg?wh=1384x896" alt="图片"></p><h4 id="翻转" tabindex="-1"><a class="header-anchor" href="#翻转"><span>翻转</span></a></h4><p>接下来，我们来看一看翻转操作。<code>torchvision.transforms</code>提供了两种翻转操作，分别是：以某一概率随机水平翻转图像和以某一概率随机垂直翻转图像。我们分别来看它们的定义。</p><p>以概率 p 随机水平翻转图像，定义如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">torchvision.transforms.RandomHorizontalFlip(p=0.5)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以概率 p 随机垂直翻转图像，定义如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">torchvision.transforms.RandomVerticalFlip(p=0.5)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，p 表示随机翻转的概率值，默认为 0.5。 这里的随机翻转，是为数据增强提供方便。如果想要必须执行翻转操作的话，将 p 设置为 1 即可。</p><p>以极客时间的 LOGO 图片为例，图片翻转的代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image</span>
<span class="line"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms </span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义翻转操作</span></span>
<span class="line">h_flip_oper <span class="token operator">=</span> transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">v_flip_oper <span class="token operator">=</span> transforms<span class="token punctuation">.</span>RandomVerticalFlip<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 原图</span></span>
<span class="line">orig_img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;jk.jpg&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">display<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 水平翻转</span></span>
<span class="line">img1 <span class="token operator">=</span> h_flip_oper<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line">display<span class="token punctuation">(</span>img1<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 垂直翻转</span></span>
<span class="line">img2 <span class="token operator">=</span> v_flip_oper<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line">display<span class="token punctuation">(</span>img2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>翻转效果如下表所示。</p><p><img src="https://static001.geekbang.org/resource/image/0d/84/0dc2543bb7bdfyy7803c353f2030f184.jpg?wh=1386x675" alt="图片"></p><h3 id="只对-tensor-进行变换" tabindex="-1"><a class="header-anchor" href="#只对-tensor-进行变换"><span>只对 Tensor 进行变换</span></a></h3><p>目前版本的 Torchvision（v0.10.0）对各种图像变换操作已经基本同时支持 PIL Image 和 Tensor 类型了，因此只针对 Tensor 的变换操作很少，只有 4 个，分别是 LinearTransformation（线性变换）、Normalize（标准化）、RandomErasing（随机擦除）、ConvertImageDtype（格式转换）。</p><p>这里我们重点来看最常用的一个操作：标准化，其他 3 个你可以查阅官方文档。</p><h4 id="标准化" tabindex="-1"><a class="header-anchor" href="#标准化"><span>标准化</span></a></h4><p>标准化是指每一个数据点减去所在通道的平均值，再除以所在通道的标准差，数学的计算公式如下：</p><p>$$output=(input-mean)/std$$</p><p>而对图像进行标准化，就是对图像的每个通道利用均值和标准差进行正则化。这样做的目的，是<strong>为了保证数据集中所有的图像分布都相似，这样在训练的时候更容易收敛，既加快了训练速度，也提高了训练效果</strong>。</p><p>让我来解释一下：首先，标准化是一个常规做法，可以理解为无脑进行标准化后再训练的效果，大概率要好于不进行标准化。</p><p>我把极客时间的 LOGO 读入后，所有像素都减去 50，获得下图。</p><p><img src="https://static001.geekbang.org/resource/image/3c/a1/3c3f30cee39ec09cc08fa91b4925e3a1.png?wh=640x234" alt="图片"></p><p>对于我们人来说是可以分辨出，这也是极客时间的 LOGO。但是计算机（也就是卷积神经网络）就不一定能分辨出来了，因为卷积神经网络是通过图像的像素进行提取特征的，这两张图片像素的数值都不一样，凭什么还让神经网络认为是一张图片？</p><p>而标准化后的数据就会避免这一问题，标准化后会将数据映射到同一区间中，一个类别的图片虽说有的像素值可能有差异，但是它们分布都是类似的分布。</p><p><code>torchvision.transforms</code>提供了对 Tensor 进行标准化的函数，定义如下。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">torchvision.transforms.Normalize(mean, std, inplace=False)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，每个参数的含义如下所示：</p><ul><li>mean：表示各通道的均值；</li><li>std：表示各通道的标准差；</li><li>inplace：表示是否原地操作，默认为否。</li></ul><p>以极客时间的 LOGO 图片为例，我们来看看以(R, G, B)均值和标准差均为(0.5, 0.5, 0.5)来标准化图片后，是什么效果。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image</span>
<span class="line"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms </span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义标准化操作</span></span>
<span class="line">norm_oper <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 原图</span></span>
<span class="line">orig_img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;jk.jpg&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">display<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 图像转化为Tensor</span></span>
<span class="line">img_tensor <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 标准化</span></span>
<span class="line">tensor_norm <span class="token operator">=</span> norm_oper<span class="token punctuation">(</span>img_tensor<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Tensor转化为图像</span></span>
<span class="line">img_norm <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToPILImage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tensor_norm<span class="token punctuation">)</span></span>
<span class="line">display<span class="token punctuation">(</span>img_norm<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的过程是，首先定义了均值和标准差均为(0.5, 0.5, 0.5)的标准化操作，然后将原图转化为 Tensor，接着对 Tensor 进行标准化，最后再将 Tensor 转化为图像输出。</p><p>标准化的效果如下表所示。</p><p><img src="https://static001.geekbang.org/resource/image/f5/05/f58f3662e60501e02b31b12fa9f4e905.jpg?wh=1244x515" alt=""></p><h3 id="变换的组合" tabindex="-1"><a class="header-anchor" href="#变换的组合"><span>变换的组合</span></a></h3><p>其实前面介绍过的所有操作都可以用 Compose 类组合起来，进行连续操作。</p><p>Compose 类是将多个变换组合到一起，它的定义如下。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">torchvision.transforms.Compose(transforms)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，transforms 是一个 Transform 对象的列表，表示要组合的变换列表。 我们还是结合例子动手试试，如果我们想要将图片变为 200*200 像素大小，并且随机裁切成 80 像素的正方形。那么我们可以组合 Resize 和 RandomCrop 变换，具体代码如下所示。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image</span>
<span class="line"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms </span>
<span class="line"></span>
<span class="line"><span class="token comment"># 原图</span></span>
<span class="line">orig_img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;jk.jpg&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">display<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义组合操作</span></span>
<span class="line">composed <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                               transforms<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 组合操作后的图</span></span>
<span class="line">img <span class="token operator">=</span> composed<span class="token punctuation">(</span>orig_img<span class="token punctuation">)</span></span>
<span class="line">display<span class="token punctuation">(</span>img<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行的结果如下表所示，也推荐你动手试试看。</p><p><img src="https://static001.geekbang.org/resource/image/6b/c1/6b3ce280815cff443734c9b8180fc6c1.jpg?wh=1046x505" alt="图片"></p><h2 id="结合-datasets-使用" tabindex="-1"><a class="header-anchor" href="#结合-datasets-使用"><span>结合 datasets 使用</span></a></h2><p>Compose 类是未来我们在实际项目中经常要使用到的类，结合<code>torchvision.datasets</code>包，就可以在读取数据集的时候做图像变换与数据增强操作。下面让我们一起来看一看。</p><p>还记得[上一节课]中，在利用<code>torchvision.datasets</code> 读取 MNIST 数据集时，有一个参数“transform”吗？它就是用于对图像进行预处理操作的，例如数据增强、归一化、旋转或缩放等。这里的“transform”就可以接收一个<code>torchvision.transforms</code>操作或者由 Compose 类所定义的操作组合。</p><p>上节课中，我们在读取 MNIST 数据集时，直接读取出来的图像数据是 PIL.Image.Image 类型的。但是遇到要训练手写数字识别模型这类的情况，模型接收的数据类型是 Tensor，而不是 PIL 对象。这时候，我们就可以利用“transform”参数，使数据在读取的同时做类型转换，这样读取出的数据直接就可以是 Tensor 类型了。</p><p>不只是数据类型的转换，我们还可以增加归一化等数据增强的操作，只需要使用上面介绍过的 Compose 类进行组合即可。这样，在读取数据的同时，我们也就完成了数据预处理、数据增强等一系列操作。</p><p>我们还是以读取 MNIST 数据集为例，看下如何在读取数据的同时，完成数据预处理等操作。具体代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms</span>
<span class="line"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义一个transform</span></span>
<span class="line">my_transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                   transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                                  <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 读取MNIST数据集 同时做数据变换</span></span>
<span class="line">mnist_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">&#39;./data&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                               train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span></span>
<span class="line">                               transform<span class="token operator">=</span>my_transform<span class="token punctuation">,</span></span>
<span class="line">                               target_transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span></span>
<span class="line">                               download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看变换后的数据类型</span></span>
<span class="line">item <span class="token operator">=</span> mnist_dataset<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">输出：</span>
<span class="line">&lt;class &#39;torch.Tensor&#39;&gt;</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，MNIST 数据集非常简单，根本不进行任何处理直接读入的话，效果也非常好，但是它确实适合学习来使用，你可以在利用它进行各种尝试。</p><p>我们下面先来看看，在图像分类实战中使用的 transform，可以感受一下实际使用的 transforms 是什么样子：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    transforms<span class="token punctuation">.</span>RandomResizedCrop<span class="token punctuation">(</span>dest_image_size<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也是我在项目中使用的 transform。数据增强的方法有很多，不过根据我的经验来看，并不是用的越多，效果越好。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>恭喜你完成了这节课的学习，我来给你做个总结。</p><p><strong>今天的重点内容就是<code>torchvision.transforms</code>工具的使用。包括常用的图像处理操作，以及如何与<code>torchvision.datasets</code>结合使用</strong>。</p><p>常用的图像处理操作包括数据类型转换、图像尺寸变化、剪裁、翻转、标准化等等。Compose 类还可以将多个变换操作组合成一个 Transform 对象的列表。</p><p><code>torchvision.transforms</code>与<code>torchvision.datasets</code>结合使用，可以在数据加载的同时进行一系列图像变换与数据增强操作，不仅能够直接将数据送入模型训练，还可以加快模型收敛速度，让模型更好地学习到数据特征。</p><p>当然，我们在实际的项目中会有自己的数据，而不会使用 torchvision.datasets 中提供的公开数据集，我们今天讲的<code>torchvision.transforms</code> 同样可以在我们自定义的数据集中使用，关于这一点，我会在图像分类的实战中继续讲解。</p><p>下节课中，我们会介绍 Torchvision 中其他有趣的功能。包括经典网络模型的实例化与其他有用的函数。</p><h2 id="每课一练" tabindex="-1"><a class="header-anchor" href="#每课一练"><span>每课一练</span></a></h2><p>Torchvision 中 transforms 模块的作用是什么？</p><p>欢迎你在留言区跟我交流讨论，也欢迎你把这节课分享给自己的朋友，和他一起尝试一下 Torchvision 的各种功能。</p>`,107)]))}const c=s(i,[["render",t]]),r=JSON.parse('{"path":"/3.tech/83.PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/07_%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E7%AF%87-Torchvision%EF%BC%88%E4%B8%AD%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%EF%BC%8C%E8%AE%A9%E6%95%B0%E6%8D%AE%E6%9B%B4%E5%8A%A0%E5%A4%9A%E6%A0%B7%E6%80%A7.html","title":"模型训练篇 Torchvision（中）：数据增强，让数据更加多样性","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"图像处理工具之 torchvision.transforms","slug":"图像处理工具之-torchvision-transforms","link":"#图像处理工具之-torchvision-transforms","children":[{"level":3,"title":"数据类型转换","slug":"数据类型转换","link":"#数据类型转换","children":[]},{"level":3,"title":"对 PIL.Image 和 Tensor 进行变换","slug":"对-pil-image-和-tensor-进行变换","link":"#对-pil-image-和-tensor-进行变换","children":[]},{"level":3,"title":"只对 Tensor 进行变换","slug":"只对-tensor-进行变换","link":"#只对-tensor-进行变换","children":[]},{"level":3,"title":"变换的组合","slug":"变换的组合","link":"#变换的组合","children":[]}]},{"level":2,"title":"结合 datasets 使用","slug":"结合-datasets-使用","link":"#结合-datasets-使用","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"每课一练","slug":"每课一练","link":"#每课一练","children":[]}],"git":{"updatedTime":1746672966000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":2,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"873191059aa4709eddd6184a409223b5054edb2a","time":1746672966000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: pytorch fixed"},{"hash":"b44b80ec6b8c2ebffa55c7b2b54259609c76baed","time":1745668690000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add pytorch course"}]},"filePathRelative":"3.tech/83.PyTorch深度学习实战/07_模型训练篇-Torchvision（中）：数据增强，让数据更加多样性.md"}');export{c as comp,r as data};
