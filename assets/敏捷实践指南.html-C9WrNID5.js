import{_ as l,c as r,b as i,o as a}from"./app-C01vnHKY.js";const e={};function n(d,t){return a(),r("div",null,t[0]||(t[0]=[i('<h1 id="敏捷实践指南" tabindex="-1"><a class="header-anchor" href="#敏捷实践指南"><span>敏捷实践指南</span></a></h1><h2 id="引论" tabindex="-1"><a class="header-anchor" href="#引论"><span>引论</span></a></h2><h3 id="敏捷型学习" tabindex="-1"><a class="header-anchor" href="#敏捷型学习"><span>敏捷型学习</span></a></h3><ul><li>人们利用敏捷技术来为重要工作排优先级</li><li>面对面的交流、有意义的学习、自组织团队以及利用想象力的增量型学习和/或迭代型学习都是敏捷原则</li><li>这些敏捷原则可能改变人们在课堂上的思维模式，促进教育目标的实现</li></ul><h2 id="敏捷概述" tabindex="-1"><a class="header-anchor" href="#敏捷概述"><span>敏捷概述</span></a></h2><h3 id="_1-可确定的工作与高度不确定的工作" tabindex="-1"><a class="header-anchor" href="#_1-可确定的工作与高度不确定的工作"><span>1. 可确定的工作与高度不确定的工作</span></a></h3><ol><li>传统预测法</li><li>敏捷为了在短时间内探讨可能性，根据评估和反馈快速调整</li></ol><h3 id="_2-《敏捷宣言》及思维模式" tabindex="-1"><a class="header-anchor" href="#_2-《敏捷宣言》及思维模式"><span>2.《敏捷宣言》及思维模式</span></a></h3><h4 id="敏捷宣言" tabindex="-1"><a class="header-anchor" href="#敏捷宣言"><span>敏捷宣言</span></a></h4><ol><li>个体以及互动而不是过程和工具</li><li>可用的软件而不是完整的文档</li><li>客户合作而不是合同谈判</li><li>应对变更而不是遵循计划</li></ol><h4 id="十二大原则" tabindex="-1"><a class="header-anchor" href="#十二大原则"><span>十二大原则</span></a></h4><ol><li>我们的最高目标是，通过尽早持续交付有价值的软件来满足客户的需求</li><li>欢迎对需求提出变更，即使 在项目开发后期也不例外。敏捷过程要善于利用需求变更，帮助客户获得竞争优势</li><li>要经常交付可用的软件，周期从几周到几个月不等，且越短越好</li><li>项目实施过程中，业务人员与开发人员必须始终通力协作</li><li>要善于激励项目人员，给予他们所需的环境和支持，并相信他们能够完成任务</li><li>无论是对开发团队还是团队内部，信息传达最有效的方法都是面对面的交谈</li><li>可用的软件是衡量进度的首要衡量标准</li><li>敏捷过程提倡可持续的开发。项目发起人、开发人员和用户应该都能够始终保持步调稳定</li><li>对技术的精益求精以及对设计的不断完善将提高敏捷性</li><li>简洁，即尽最大可能减少不必要的工作，这是一门艺术</li><li>最佳的架构、需求和设计将出自于自组织团队</li><li>团队要定期反省怎样做才能更有效，并相应地调整团队的行为</li></ol><h3 id="_3-精益与看板方法" tabindex="-1"><a class="header-anchor" href="#_3-精益与看板方法"><span>3. 精益与看板方法</span></a></h3><p>将敏捷和看板方法是为精益思想的衍生物</p><p>重点在于交付价值、尊重人、减少浪费、透明化、适应变更以及持续改善</p><h3 id="_4-不确定性、风险和生命周期选择" tabindex="-1"><a class="header-anchor" href="#_4-不确定性、风险和生命周期选择"><span>4. 不确定性、风险和生命周期选择</span></a></h3><p>利用较少的工作增量验证自身的工作，并且可以对接下来的工作做出相应变更</p><h4 id="迭代和增量方法减少了浪费和返工" tabindex="-1"><a class="header-anchor" href="#迭代和增量方法减少了浪费和返工"><span>迭代和增量方法减少了浪费和返工</span></a></h4><ul><li>非常短的反馈循环</li><li>频繁调整过程</li><li>重新进行优先级排序</li><li>定期更新计划</li><li>频繁交付</li></ul><h2 id="生命周期选择" tabindex="-1"><a class="header-anchor" href="#生命周期选择"><span>生命周期选择</span></a></h2><ul><li>预测型生命周期 <ul><li>传统，提前进行大量的计划工作，然后一次性执行</li><li>执行是一个连续的过程</li><li>充分利用已知和已经证明的事物。不确定性和复杂性的减少，允许项目团队将工作分解为一系列可预测的小组</li><li>分析 - 设计 - 构建 - 测试 - 交付</li></ul></li><li>迭代型生命周期 <ul><li>通过言行或概念验证来改进产品或成果</li><li>允许对未完成的工作进行反馈，从而改进和修改该工作</li></ul></li><li>增量型生命周期 <ul><li>向客户提供各个已完成的，可能立即使用的可交付成果</li></ul></li><li>敏捷生命周期 <ul><li>既有迭代，也有增量，便于完善工作，频繁交付</li></ul></li><li>混合生命周期</li></ul><table><thead><tr><th>方法</th><th>需求</th><th>活动</th><th>交付</th><th>目标</th></tr></thead><tbody><tr><td>预测型</td><td>固定</td><td>整个项目仅执行一次</td><td>一次交付</td><td>管理成本</td></tr><tr><td>迭代型</td><td>动态</td><td>反复执行直至修正</td><td>一次交付</td><td>解决方案的正确性</td></tr><tr><td>增量型</td><td>动态</td><td>对给定增量执行一次</td><td>频繁更小规模交付</td><td>速度</td></tr><tr><td>敏捷型</td><td>动态</td><td>反复执行直至修正</td><td>频繁小规模交付</td><td>通过频繁小规模的交付和反馈实现客户价值</td></tr></tbody></table><h3 id="混合敏捷方法" tabindex="-1"><a class="header-anchor" href="#混合敏捷方法"><span>混合敏捷方法</span></a></h3><ul><li>裁剪敏捷框架</li></ul><table><thead><tr><th>项目因素</th><th>裁剪方案</th></tr></thead><tbody><tr><td>需求模式：稳定型或偶发型</td><td>许多团队发现，使用节奏（以定期时间盒的形式）能帮助他们演示、回顾和理解信任务。此外，有些团队在接收更多任务时需要更多的灵活性。团队可使用基于流的敏捷方法，利用节奏实现两全其美</td></tr><tr><td>团队经验水平所要求的过程改进速度</td><td>更频繁地回顾并选择改进措施</td></tr><tr><td>工作流往往被各种延误或障碍打断</td><td>考虑利用看板面板让工作可见，对工作过程的不同领域尝试限制，从而改进工作流。</td></tr><tr><td>产品增量的质量不佳</td><td>考虑利用各种测试驱动开发的实践。这种防错机制使缺陷难以不被发现</td></tr><tr><td>创建某个产品需要不止一个团队</td><td>从一个敏捷团队扩展到数个敏捷团队，同时只有轻微干扰，首先要了解敏捷项目集管理或者正规扩展框架。其次，要精心指定一种适合项目背景的方法</td></tr><tr><td>项目团队成员缺乏使用敏捷方法的经验</td><td>考虑从培训团队成员敏捷思维模式和敏捷原则的基本源利开始。如果团队决定使用特定的方法，如果 Scrum 或看板，则要针对上述方法举办研讨会，让团队成员学习如何使用。</td></tr></tbody></table><h2 id="实施敏捷-创建敏捷环境" tabindex="-1"><a class="header-anchor" href="#实施敏捷-创建敏捷环境"><span>实施敏捷：创建敏捷环境</span></a></h2><h3 id="从敏捷思维开始" tabindex="-1"><a class="header-anchor" href="#从敏捷思维开始"><span>从敏捷思维开始</span></a></h3><ul><li>项目团队如何以敏捷方式行动</li><li>为了使下一交付周期受益，团队需要快速交付那些成果并获得早期反馈</li><li>团队如何以一种透明的方式行动</li><li>为了专注于高优先级的项目，可以避免哪些工作？</li><li>仆人式领导对团队达成目标有何益处？</li></ul><h3 id="仆人式领导为团队赋权" tabindex="-1"><a class="header-anchor" href="#仆人式领导为团队赋权"><span>仆人式领导为团队赋权</span></a></h3><p>仆人式领导是通过对团队服务来领导团队的实践，注重理解和关注团队成员的需要和发展，旨在使团队尽可能达到最高绩效。仆人式领导的作用使促进团队发现和定义敏捷。仆人式领导实践并传播敏捷。仆人式领导按照一下顺序从事项目工作：</p><ul><li>目的 <ul><li>与团队一起定义”为什么“或目的，以便围绕项目目标进行合作互动</li></ul></li><li>人员 <ul><li>鼓励团队创造一个人人都能成功的环境</li><li>要求每个团队成员在项目工作中做出贡献</li></ul></li><li>过程 <ul><li>不要计划遵循”完美“的敏捷过程，而是要注重结果</li><li>交付价值并反思产品和过程</li></ul></li></ul><p>仆人式领导的特征让项目领导变得更加敏捷，促进团队的成功：</p><ul><li>提升自我意识</li><li>倾听</li><li>为团队服务</li><li>帮助他人成长</li><li>引导与控制</li><li>促进安全、尊重与信任</li><li>促进他人经历和才智提升</li></ul><p>成功的敏捷团队信奉成长思维模式，团队成员自己能够学到新技能。</p><h4 id="仆人式领导的职责" tabindex="-1"><a class="header-anchor" href="#仆人式领导的职责"><span>仆人式领导的职责</span></a></h4><p>仆人式领导通过管理关系，在团队内和组织中建立沟通与协作。</p><ul><li><p>仆人式领导的促进作用</p><ul><li>工作重点从”管理协调“转向”促进合作“。帮助每个人各尽所能地思考和工作。鼓励团队参与、理解，并对团队输出共同承担责任。帮助团队创建可接受的解决方案。</li><li>促进团队内部和团队之间的合作和对话，发现瓶颈并解决。</li><li>鼓励大家通过交互式会议、非正式对话和知识共享展开协作。</li></ul></li><li><p>仆人式领导消除组织障碍</p><ul><li>审视阻碍团队敏捷或组织敏捷的过程，并努力使其合理化。</li><li>消除组织障碍</li></ul></li><li><p>仆人式领导为他人贡献铺路</p><ul><li>为团队铺路，让团队尽其所能</li><li>团队成员还要重视自身的人际关系技能和情商技能</li><li>团队成员要努力展示更多的主动性、正直、情商、诚实、合作态度、谦逊和以不同方式沟通的意愿</li></ul></li><li><p>考虑这些仆人式领导的职责</p><ul><li>教育相关方，使其了解为什么要敏捷以及如何敏捷。根据优先级说明商业价值的好处，对被赋权团队加强问责，提高工作效率，并通过更频繁的评审改进质量</li><li>通过指导、鼓励和帮助为团队提供支持。倡导团队成员的培训和职业发展。</li><li>通过技术项目管理活动，如量化风险分析来帮助团队。</li><li>庆祝团队的成功，为团队与外部团队合作提供支持，并起到桥梁作用。</li></ul></li><li><p>项目经理在敏捷环境中的角色</p><p>项目经理的价值不在于他们的岗位，而在于他们能够让每个人都变得更好。</p><p>项目经理：由执行组织委派 ，领导团队实现项目目标的个人</p></li></ul><h3 id="团队构成" tabindex="-1"><a class="header-anchor" href="#团队构成"><span>团队构成</span></a></h3><p>要善于激励项目人员，为他们提供所需的环境和支持，信任他们能够完成工作。</p><p>团队在考虑如何优化价值流时，以下好处是显而易见的：</p><ul><li>人员更有可能合作</li><li>团队更快地完成有价值的工作</li><li>由于不从事多任务，也不必重新建立环境，团队减少了时间浪费</li></ul><h4 id="敏捷团队" tabindex="-1"><a class="header-anchor" href="#敏捷团队"><span>敏捷团队</span></a></h4><ul><li>团队越是限制其在制品，团队成员就越有可能通过合作来加快整个团队的工作。</li><li>团队在给定时间解决所有的需求，然后试图完成所有的设计，继而又去完成所有的构建，就会发生迷你瀑布的情况。在构建中或构建后测试中的某一时刻，团队会意识到员线的假设已经不再有效，团队解决所有的需求根本是在浪费时间。相反，当团队合作打造全部功能中的少量功能时，随着工作的推进和交付少量已完成的功能，他们也在不断学习。</li><li>成功敏捷团队的属性：</li></ul><table><thead><tr><th>属性</th><th>目标</th></tr></thead><tbody><tr><td>专门人员</td><td>专心致志，提高工作效率；少于十人的效性团队</td></tr><tr><td>跨职能团队成员</td><td>频繁开发与交付；作为一个独立团队交付完成的价值；为完成任务，整合所有工作活动；从团队内部和外部（如产品负责人）提供反馈</td></tr><tr><td>集中办公或有能力应对办公地点不同带来的任何挑战</td><td>改善沟通；提高团队动力；知识共享；降低学习成本；能够致力于相互合作</td></tr><tr><td>由通才和专家组成的混合团队</td><td>专家提供专门技能，通才提供从事不同工作的灵活性；团队具有专业能力，往往成为通才型专家，他们既有专场又有多种技能经验</td></tr><tr><td>稳定的工作环境</td><td>彼此依赖实现交付；对工作方法互相认同；简化团队成本核算（运转率）；知识资本的保有和发展</td></tr></tbody></table><h5 id="敏捷的角色" tabindex="-1"><a class="header-anchor" href="#敏捷的角色"><span>敏捷的角色</span></a></h5><ul><li>跨职能团队成员</li><li>产品负责人</li><li>团队促进者</li></ul><h4 id="专职小组成员" tabindex="-1"><a class="header-anchor" href="#专职小组成员"><span>专职小组成员</span></a></h4><ul><li>多任务处理减缓了整个团队的进展，因为团队成员要浪费时间切换环境和/或互相等待完成其他工作</li><li>任务切换时，人员工作效率的损失在 20% 到 40% 之间</li><li>人们在一心多用的时候更容易犯错，任务切换消耗工作记忆，人们在多任务处理时不太可能记住相应工作的背景</li><li>对每个人（专家和团队）设定期望，阐明团队承诺交付的水平。分配兼职人员会给项目带来风险。</li></ul><h4 id="团队工作场所" tabindex="-1"><a class="header-anchor" href="#团队工作场所"><span>团队工作场所</span></a></h4><p>分散式团队管理共同的一些技术包括鱼缸窗口和远程结对</p><ul><li>通过在团队分布的各个地点之间建立长期视频会议链接，创建一个鱼缸窗口</li><li>通过使用虚拟会议工具来共享屏幕，包括语音和视频链接，建立远程结对</li></ul><h4 id="克服组织孤岛" tabindex="-1"><a class="header-anchor" href="#克服组织孤岛"><span>克服组织孤岛</span></a></h4><ul><li>构建拥有基本信任和安全的工作环境，确保所有团队成员都有平等的话语权，他们的意见都能被听到并得到考虑</li><li>管理人员需要关注点不是资源利用效率，而是过程效率（和基于团队的指标）</li></ul><h2 id="实施敏捷-在敏捷环境中交付" tabindex="-1"><a class="header-anchor" href="#实施敏捷-在敏捷环境中交付"><span>实施敏捷：在敏捷环境中交付</span></a></h2><h3 id="项目章程和团队章程" tabindex="-1"><a class="header-anchor" href="#项目章程和团队章程"><span>项目章程和团队章程</span></a></h3><p>每个项目都需要一个项目章程，这样项目团队就能理解项目之所以重要的原因、团队的前进方向以及项目的目标。</p><p>制作章程的过程能帮助团队学习如何一起工作，怎样围绕项目协作。</p><p>对于敏捷项目而言，团队至少还需要项目愿景或目标，以及一组清晰的工作协议。</p><ul><li>我们为什么要做这个项目？这是项目愿景。</li><li>谁会从中受益？如何受益？这可能是项目愿景和/或项目目标的一部分。</li><li>对此项目而言，达到哪些条件才意味着项目完成？这些是项目的发布标准。</li><li>我们将怎样合作？这说明预期的工作流。</li></ul><p>制作章程的一些建议，可以将其作为指定团队社会契约的基础：</p><ul><li>团队价值观，例如可持续的开发速度和核心工作时间。</li><li>工作协议，例如“就绪”如何定义，这是团队可以接受工作的前提；“完成”如何定义，这样团队才能一致地判断完整性；考虑时间盒；或使用工作过程限制。</li><li>基本规则，例如有关一个人在会议上发言的规定。</li><li>团队规范，例如团队如何对待会议时间。</li></ul><h3 id="常见敏捷实践" tabindex="-1"><a class="header-anchor" href="#常见敏捷实践"><span>常见敏捷实践</span></a></h3><h4 id="回顾" tabindex="-1"><a class="header-anchor" href="#回顾"><span>回顾</span></a></h4><p>团队要定期反省如何能够做到更加有效，并相应地调整团队的行为。</p><p>可在以下关键时刻进行回顾：</p><ul><li>当团队完成一个发布或者加入一些功能时。这不一定是一个巨大的增量。它可以是任何发布，无论它有多小。</li><li>自上次回顾以来，又过了几周时间。</li><li>当团队出现问题时，以及团队协作完成工作不顺畅时。</li><li>当团队达到任何其他里程碑时。</li></ul><p>回顾不是责备，是让团队从以前的工作学习中做出小的改进。</p><p>回顾针对性的（人的感觉）和定量的（衡量指标）数据，找到根源，设计对策，并制定行动计划。</p><p>团队选择改进时，要决定如何衡量结果。然后在下一段时间内要衡量结果，以验证每个改进成功与否。</p><p>对改进的重要性进行排序。</p><h4 id="待办事项列表编制" tabindex="-1"><a class="header-anchor" href="#待办事项列表编制"><span>待办事项列表编制</span></a></h4><p>产品路线图，以显示预期的可交付成果序列。</p><p>产品负责人根据团队的实际成果重新规划路线图。</p><h4 id="待办事项列表的细化" tabindex="-1"><a class="header-anchor" href="#待办事项列表的细化"><span>待办事项列表的细化</span></a></h4><ul><li>基于流程的敏捷的即时细化。</li><li>基于迭代的团队在两周的迭代中用 1 小时的时间盒讨论。</li><li>基于迭代的敏捷团队的多次细化讨论。</li></ul><p>细化会议上，产品负责人向团队介绍故事的创意，让团队了解故事中潜在的挑战或问题。还可以请求团队对不确定依赖关系的功能进行刺探，以了解风险。</p><ul><li>鼓励团队在开发人员、测试人员、业务分析人员和产品负责人三方面开展合作，一起讨论和撰写故事。</li><li>把整个故事的概念呈现给团队。团队进行讨论，并根据需要将其细化为许多故事。</li><li>与团队一起寻找各种方法探索和撰写故事，确保所有的故事都足够小，以便团队能源源不断地交付完成的工作。考虑每天至少完成一个故事。</li></ul><p>团队通常有一个目标，就是每周用不超过 1 小时的时间来为下一批工作细化故事。把时间尽可能华仔工作上而不是计划上。超过 1 小时，产品负责人可能是过度准备了，或者团队缺乏评估和细化工作所需的<strong>一些关键技能</strong>。</p><h4 id="每日站会" tabindex="-1"><a class="header-anchor" href="#每日站会"><span>每日站会</span></a></h4><p>团队成员利用每日站会对彼此做出小的承诺，发现问题，并确保团队工作顺利进行。</p><p>为每日站会规定时间盒，不超出 15 分钟。团队以某种方式“过一下”看板或任务板，而团队中的任何人都可以主持站会。</p><p>基于迭代的敏捷，每个人轮流回答下列问题：</p><ul><li>上次站会以来我都完成了什么？</li><li>从现在到下一次站会，我计划完成什么？</li><li>我的障碍（或风险或问题）是什么？</li></ul><p>基于流程的敏捷，可将注意力集中在团队的产出上。团队从右到左对看板进行评估，问题包括：</p><ul><li>我们还需要做些什么来推进这一工作？</li><li>有人在做看板上所没有的事情么？</li><li>作为一个团队，我们需要完成什么？</li><li>工作流程是否存在瓶颈或阻碍？</li></ul><p>站会的反模式：</p><ul><li>变成状态报告会议</li><li>当问题变得明显时，团队才开始解决问题。站会是为了发现存在的问题，而不是解决它们。将问题添加到停车场，然后创建另一次会议去解决。</li></ul><p>要针对团队何时需要站会、站会是否有效等问题有意识地做出决定。</p><p>要鼓励任何团队成员主持会议而不是由项目经理或领导主持，以确保它不会变成状态报告会议，而是作为团队进行自我组织和相互承诺的会议。</p><h4 id="展示-评审" tabindex="-1"><a class="header-anchor" href="#展示-评审"><span>展示/评审</span></a></h4><p>当团队以用户故事的形式完成特定的功能时，团队会定期展示工作产品。看过展示后，产品负责人接受或拒绝故事。</p><p>每两周至少展示一次团队的工作产品。</p><p>敏捷项目的一个基本要素是频繁地交付工作产品。</p><p>一个没有展示或发布的团队，其学习的速度不会快，并且很可能并未采用敏捷技术。</p><h4 id="规划基于迭代的敏捷" tabindex="-1"><a class="header-anchor" href="#规划基于迭代的敏捷"><span>规划基于迭代的敏捷</span></a></h4><p>不要超出团队在一个迭代中所能完成工作的能力。</p><p>团队估算能够完成的工作，这也是一种能力的衡量。</p><h4 id="帮助团队交付价值的执行实践" tabindex="-1"><a class="header-anchor" href="#帮助团队交付价值的执行实践"><span>帮助团队交付价值的执行实践</span></a></h4><p>如果团队不重视质量，很快就会无法快速发布任何东西。</p><ul><li>持续集成</li><li>在不同层面测试</li><li>验收测试驱动开发（ATDD）：讨论工作产品的验收标准</li><li>测试驱动开发（TDD）和行为驱动开发（BDD）</li><li>刺探（时间盒研究或实验）</li></ul><h4 id="迭代和增量如何帮助交付工作产品" tabindex="-1"><a class="header-anchor" href="#迭代和增量如何帮助交付工作产品"><span>迭代和增量如何帮助交付工作产品</span></a></h4><p>迭代可以帮助团队未交付和多种反馈创建一个节奏。团队会为交付和反馈创建增量。交付的第一部分是一次演示。团队会收到关于产品的外观和运行方式的反馈。团队成员回顾如何检查和调整有关过程以取得成功。</p><p>演示或评审是敏捷项目流程的必要组成部分。为团队的交付节奏安排适当的演示。</p><h3 id="解决敏捷项目的挑战" tabindex="-1"><a class="header-anchor" href="#解决敏捷项目的挑战"><span>解决敏捷项目的挑战</span></a></h3><table><thead><tr><th>痛点</th><th>解决痛点的可能性</th></tr></thead><tbody><tr><td>团队目标或任务不明确</td><td>敏捷章程中关于目标的部分 - 愿景、使命和使命测试</td></tr><tr><td>团队工作协议不明确</td><td>敏捷章程中关于一致性的部分 - 价值观、原则和工作协议</td></tr><tr><td>需求不明确</td><td>帮助发起人和相关方制定产品愿景。考虑使用实例化需求、用户故事地图和影响地图来构建产品路线图。让团队和产品负责人一起来明确需求的期望和价值。逐步将路线图分解为据有更少具体需求的待办事项列表</td></tr><tr><td>用户体验不佳</td><td>开发团队的用户体验设计实践应该在早期就让用户经常参与</td></tr><tr><td>估算不准确</td><td>通过分解故事让故事变小。让整个团队使用相对估算进行估算。考虑通过敏捷建模或刺探来理解故事</td></tr><tr><td>工作分配或工作进展不明确</td><td>帮助团队认识到自我管理工作。考虑用看板面板查看工作流程。考虑利用每日站会，根据看板查看工作进展</td></tr><tr><td>团队面临障碍</td><td>仆人式领导能帮助消除这些障碍。如果团队不知道他们都有哪些可选方案，就要考虑聘请教练。有时，团队或仆人式领导无法消除障碍，团队就需要上报故事</td></tr><tr><td>由于产品待办事项列表不够完善，导致工作延误/超时</td><td>产品负责人和团队一起研讨故事。为故事创建一个准备就绪的定义。考虑分拆故事以使用更小的故事</td></tr><tr><td>缺陷</td><td>考虑对特定环境有效的技术实践。它们可能是：结对工作、产品集体负责制、普适测试（测试驱动方法和自动化测试方法）以及稳健的完成的定义</td></tr><tr><td>工作未完成</td><td>团队确定故事完成的定义，包括验收标准在内。另外，还要为项目补充发布标准</td></tr><tr><td>技术债务（代码质量降级）</td><td>重构、敏捷建模、普适测试、自动化代码质量分析、完成的定义</td></tr><tr><td>产品复杂性过高</td><td>无论是软件项目还是非软件项目，都要常常鼓励团队思考：“最简单的有效方法是什么？”，并应用“简洁，即尽最大可能减少不必要的工作，这是一门艺术”的敏捷原则。这样做将有助于降低复杂度</td></tr><tr><td>团队合作过程进展缓慢或没有改善</td><td>在每次回顾中，选择的改进项目不要超过三个。让仆人式领导帮助团队学习怎样整合这些待改进项</td></tr><tr><td>前期工作过多导致返工</td><td>不要做过多的前期工作，而要考虑让团队通过刺探来学习。另外，在项目开始时衡量在制品（WIP），看看哪些部分团队并不需要设计，只需要交付价值。缩短迭代，并创建一个稳健完整的定义</td></tr><tr><td>错误的开始，前功尽弃</td><td>让产品负责人成为团队不可分割的一分子</td></tr><tr><td>产品待办事项列表杂乱无序</td><td>按价值排序，并考虑延迟成本按持续时间（CD3）和其他价值模型划分</td></tr><tr><td>仓促/等待，不均匀的工作流程</td><td>计划要对应团队的能力，而不是超出能力所及。要求人员停止多任务，为一个团队专注工作。请团队利用结对、群集或群体开发等方法，平衡整个团队的能力</td></tr><tr><td>相关方要求无法满足</td><td>仆人式领导与这个相关方（可能是产品负责人）一起工作</td></tr><tr><td>意想不到或不可预见的延误</td><td>让团队更频繁地检查，使用看板面板检查工作流和在制品限制，了解需求对团队或产品的影响。也可以在障碍板上跟踪障碍和障碍消除情况</td></tr><tr><td>孤立的团队，而不是跨职能团队</td><td>让项目人员作为跨职能团队自我组织。使用仆人式领导技巧帮助管理人员理解为什么敏捷需要跨职能团队</td></tr></tbody></table><h3 id="敏捷项目的衡量指标" tabindex="-1"><a class="header-anchor" href="#敏捷项目的衡量指标"><span>敏捷项目的衡量指标</span></a></h3><p>预测型衡量指标的问题在于它们往往并不反映真实的情况。往往直到发布日期前一个月，项目状态绿灯一直是亮的，这种项目有时被称为西瓜项目（外面绿，里面红）。</p><p>替代衡量指标（如完成百分比）不如经验目标（如已完成功能）更有用。</p><p>除了定量指标之外，团队还可以考虑收集定性衡量指标。其中一些定性衡量指标侧重于团队选择的实践，评估团队使用这些实践的情况，例如，对交付功能的业务满意度、团队的士气；团队希望跟踪的任何东西等都是定性衡量指标。</p><h4 id="敏捷团队的衡量结果" tabindex="-1"><a class="header-anchor" href="#敏捷团队的衡量结果"><span>敏捷团队的衡量结果</span></a></h4><p>敏捷倾向于使用基于经验和价值的衡量指标</p><p>与其他知识型工作一样，软件产品开发关于在交付价值的同时进行学习。</p><p><strong>飓风图</strong></p><p><strong>燃尽图（燃起图）</strong>：显示团队成员的多任务处理、过于庞大的故事或团队成员缺勤的效果。</p><p>衡量指标：交付周期（交付一个工作项目花费的总时间，从项目添加到看板直至项目完成）、周期时间（处理一个工作项目所需的时间）和响应时间（一个工作项目等待工作开始的时间）。</p><p>达到 WIP 限制后，团队就不能将工作从左边提取到下一列。此时，团队就要从最右边的列中提取工作，并提出问题：“作为一个团队，我们应该怎样做才能将这项工作移到下一列中？”</p><p>故事点衡量与已完成的故事或功能的衡量有所不同。有些团队试图在没有完成实际功能或故事的情况下衡量故事点。团队仅衡量故事点时，衡量的是能力，而不是已完成的工作，这违背了“可用的软件是衡量进度的主要指标”的原则。</p><p><strong><em>传统的挣值管理（EVM）衡量指标，如进度绩效指标（SPI）和成本绩效指数（CPI）很容易转换成敏捷术语。</em></strong></p><p><strong>累计流图</strong></p><h2 id="关于项目敏捷性的组织考虑因素" tabindex="-1"><a class="header-anchor" href="#关于项目敏捷性的组织考虑因素"><span>关于项目敏捷性的组织考虑因素</span></a></h2><h3 id="组织变革管理" tabindex="-1"><a class="header-anchor" href="#组织变革管理"><span>组织变革管理</span></a></h3><p>成功引入有意义变革的全面整体性方法，建议包括：</p><ul><li>说明变革动态变化的模型</li><li>实现变革的框架</li><li>项目、项目集和项目组合层面的变革管理实践的应用</li></ul><h4 id="变革管理驱动因素" tabindex="-1"><a class="header-anchor" href="#变革管理驱动因素"><span>变革管理驱动因素</span></a></h4><p>所有项目都涉及到变革。但是两种主要因素会进一步激励敏捷环境中变革管理实践的应用：</p><ul><li>与加速交付相关的变革。</li><li>与敏捷方法相关的变革。</li></ul><h4 id="变革就绪情况" tabindex="-1"><a class="header-anchor" href="#变革就绪情况"><span>变革就绪情况</span></a></h4><p>变革友好型特征的示例包括：</p><ul><li>管理层的变革意愿</li><li>组织在员工认知、审核和评估方式上做出改变的意愿</li><li>集中或分散项目、项目集和项目组合管理职能</li><li>专注于短期预算和指标而不是长期目标</li><li>人才管理成熟度和能力</li></ul><p>变革障碍型的示例特征包括：</p><ul><li>工作被分解为部门孤岛，从而创造出阻碍加速交付的依赖关系，而不是构建在能力中心指导下的跨职能团队</li><li>采购策略基于短期定价策略，而不是长期能力</li><li>奖励领导的依据是本地效率而不是端到端项目交付流或整体优化情况（就组织而言）</li><li>员工属于特定领域人才，实现技能多元化的工具或激励有限，不重视培养 T 型专家人才</li><li>分散化项目组合使员工同时分配到过多的项目，而无法专注于单个项目</li></ul><p>尝试来加速文化兼容性：</p><ul><li>积极明确的管理层支持</li><li>变革管理实践，包括沟通和引导</li><li>逐个项目应用敏捷实践</li><li>向团队增量地引入敏捷实践</li><li>通过采取适用的敏捷技术和实践示范引导</li></ul><h3 id="组织文化" tabindex="-1"><a class="header-anchor" href="#组织文化"><span>组织文化</span></a></h3><p>Culture eats strategy for breakfast - Peter Drucker</p><h4 id="创建安全环境" tabindex="-1"><a class="header-anchor" href="#创建安全环境"><span>创建安全环境</span></a></h4><h4 id="评估文化" tabindex="-1"><a class="header-anchor" href="#评估文化"><span>评估文化</span></a></h4><h4 id="采购和合同" tabindex="-1"><a class="header-anchor" href="#采购和合同"><span>采购和合同</span></a></h4><ul><li>多层结构</li><li>强调价值交付</li><li>总价增量</li><li>固定时间和材料</li><li>累进的时间和材料</li><li>提前取消方案</li><li>动态范围方案</li><li>团队扩充</li><li>支持全方位供应商</li></ul><h3 id="商业实践" tabindex="-1"><a class="header-anchor" href="#商业实践"><span>商业实践</span></a></h3><p>在需求产生时，组织创建新能力的意愿和能力即是组织敏捷性的标志。</p><h3 id="多团队协作和依赖关系" tabindex="-1"><a class="header-anchor" href="#多团队协作和依赖关系"><span>多团队协作和依赖关系</span></a></h3><h4 id="框架" tabindex="-1"><a class="header-anchor" href="#框架"><span>框架</span></a></h4><h4 id="考虑事项" tabindex="-1"><a class="header-anchor" href="#考虑事项"><span>考虑事项</span></a></h4><h3 id="敏捷和项目办公室-pmo" tabindex="-1"><a class="header-anchor" href="#敏捷和项目办公室-pmo"><span>敏捷和项目办公室（PMO）</span></a></h3><h4 id="敏捷-pmo-为价值驱动型" tabindex="-1"><a class="header-anchor" href="#敏捷-pmo-为价值驱动型"><span>敏捷 PMO 为价值驱动型</span></a></h4><p>所有项目都应在合适的时间为合适的受众提供合适的价值</p><h4 id="敏捷-pmo-为面向创新型" tabindex="-1"><a class="header-anchor" href="#敏捷-pmo-为面向创新型"><span>敏捷 PMO 为面向创新型</span></a></h4><h4 id="敏捷-pmo-为多学科型" tabindex="-1"><a class="header-anchor" href="#敏捷-pmo-为多学科型"><span>敏捷 PMO 为多学科型</span></a></h4><ul><li>制定和实施标准</li><li>通过培训和指导发展人才</li><li>多项目管理</li><li>促进组织学习</li><li>管理相关方</li><li>招聘、筛选和评估项目领导</li><li>执行专业化项目任务</li></ul><h3 id="组织结构" tabindex="-1"><a class="header-anchor" href="#组织结构"><span>组织结构</span></a></h3><p>组织结构会严重影响其转向新信息或转变市场需求的能力。主要特征：</p><ul><li>地理</li><li>职能结构</li><li>项目可交付成果的大小</li><li>项目人员分配</li><li>重采购型组织</li></ul><h3 id="组织演变" tabindex="-1"><a class="header-anchor" href="#组织演变"><span>组织演变</span></a></h3><h2 id="附录-1" tabindex="-1"><a class="header-anchor" href="#附录-1"><span>附录 1</span></a></h2><h3 id="《敏捷宣言》映射" tabindex="-1"><a class="header-anchor" href="#《敏捷宣言》映射"><span>《敏捷宣言》映射</span></a></h3><table><thead><tr><th>价值</th><th>映射</th></tr></thead><tbody><tr><td>个体和互动高于流程和工具</td><td>仆人式领导为团队赋权<br>团队构成<br>项目章程和团队章程<br>每日站会<br>组织文化</td></tr><tr><td>工作的软件高于详尽的文档</td><td>待办事项列表编制<br>待办事项列表的细化<br>展示/评审<br>帮助团队交付价值的执行实践</td></tr><tr><td>客户合作高于合同谈判</td><td>团队构成<br>敏捷项目的衡量指标<br>组织文化<br>采购和合同<br>组织结构</td></tr><tr><td>响应变化高于遵循计划</td><td>回顾<br>待办事项列表的细化<br>展示/评审</td></tr></tbody></table><table><thead><tr><th>原则</th><th>映射</th></tr></thead><tbody><tr><td>我们的最高目标是，通过尽早持续交付有价值的软件来满足客户的需求</td><td>项目生命周期的特征<br>帮助团队交付价值的执行实践</td></tr><tr><td>欢迎对需求提出变更，即使在项目开发后期也不例外。敏捷过程要善于利用需求变更，帮助客户获得竞争优势</td><td>待办事项列表的细化</td></tr><tr><td>要经常交付可用的软件，周期从几周到几个月不等，且越短越好</td><td>常见敏捷实践</td></tr><tr><td>项目实施过程中，业务人员与开发人员必须始终通力协作</td><td>仆人式领导为团队赋权<br>待办事项列表编制<br>待办事项列表的细化</td></tr><tr><td>要善于激励项目人员，给予他们所需的环境和支持，并相信他们能够完成任务</td><td>团队构成<br>项目章程和团队章程<br>回顾</td></tr><tr><td>无论是对开发团队还是团队内部，信息传达最有效的方式都是面对面的交谈</td><td>团队结构<br>每日站会</td></tr><tr><td>可用的软件是衡量进度的首要衡量标准</td><td>帮助团队交付价值的执行实践<br>迭代和增量如何帮助交付工作产品</td></tr><tr><td>敏捷过程提倡可持续的开发。项目发起人、开发人员和用户应该都能够始终保持步调稳定</td><td>项目章程和团队章程</td></tr><tr><td>对技术的精益求精以及对设计的不断完善将提高敏捷性</td><td>常见敏捷实践</td></tr><tr><td>简洁，即尽最大可能减少不必要的工作，这是一门艺术</td><td>待办事项列表编制<br>待办事项列表的细化</td></tr><tr><td>最佳的架构、需求和设计将出自于自组织团队</td><td>团队构成</td></tr><tr><td>团队要定期反省怎样做才能更有效，并相应地调整团队的行为</td><td>回顾</td></tr></tbody></table><h3 id="scrum" tabindex="-1"><a class="header-anchor" href="#scrum"><span>SCRUM</span></a></h3><p>Scrum 是用于管理产品开发的单个团队过程框架。该框架包含 Scrum 角色、事件、工件和规则，采用迭代方法来交付工作产品。Scrum 是运行在 1 个月或更少时间的时间盒上的，其中包含持续时间一致的多个冲刺，在这些冲刺中会产生潜在可发布的产品增量。</p><p>Scrum 团队包含产品负责人、开发团队和 Scrum 主管。</p><ul><li>产品负责人负责实现产品价值的最大化</li><li>开发团队是一个跨职能自组织团队，其开发成员拥有所需的一切资源，可在不依赖团队外部其他资源的情况下交付工作产品</li><li>Scrum 主管负责确保 Scrum 过程获得相应支持且 Scrum 团队遵从实践和规则，并指导团队消除障碍</li></ul><table><thead><tr><th>事件</th><th>工件</th></tr></thead><tbody><tr><td>冲刺<br>冲刺计划<br>每日例会<br>冲刺评审<br>冲刺回顾</td><td>产品待办事项列表<br>冲刺待办事项列表<br>增量</td></tr></tbody></table><h3 id="极限编程" tabindex="-1"><a class="header-anchor" href="#极限编程"><span>极限编程</span></a></h3><p>极限编程（XP）是一种基于频繁交付周期的软件开发方法。该名称基于这样一个理念；将特定最佳实践提炼到最纯粹和最简单的形式，然后在整个项目周期内持续运用该实践。</p><table><thead><tr><th>XP 实践领域</th><th>主要</th><th>次要</th></tr></thead><tbody><tr><td>组织</td><td>集中办公<br>整个团队<br>信息灵通的工作场所</td><td>真实客户参与<br>团队连续性<br>可持续节奏</td></tr><tr><td>技术</td><td>结对编程<br>测试优先编程<br>增量设计</td><td>共用代码/集体所有制<br>代码和测试文档<br>重构</td></tr><tr><td>规划</td><td>用户故事<br>每周周期<br>每季周期<br>时差</td><td>根本原因分析<br>裁剪团队<br>按使用情况支付<br>协商范围合同<br>每日站会</td></tr><tr><td>整合</td><td>10 分钟构建<br>持续集成<br>测试优先</td><td>单代码库<br>增量部署<br>每日部署</td></tr></tbody></table><p>该演变是通过筛选核心价值观（沟通、简洁、反馈、勇气、尊重）并根据主要原则（人性化、经济、互惠互利、自相似、改进、多样性、反思、流程、机会、冗余、失败、质量、循序渐进、承担的责任）信息来设计和采用技术的结果。</p><h3 id="看板方法" tabindex="-1"><a class="header-anchor" href="#看板方法"><span>看板方法</span></a></h3><p>看板在精益制造中是一种用于规划库存控制和补给的系统。准时制库存。</p><p>以下需要时看板最为适用</p><ul><li>灵活性</li><li>专注于持续交付</li><li>提高工作效率和质量</li><li>提高效率</li><li>团队成员专注力</li><li>工作负荷的可变性</li><li>减少浪费</li></ul><table><thead><tr><th>定义原则</th><th>核心属性</th></tr></thead><tbody><tr><td>从当前状态开始<br>同意采用增量演变性变更<br>尊重当前过程、角色、职责和头衔<br>鼓励所有层级领导行为</td><td>工作流可视化<br>限制在制品<br>管理流程<br>明确过程政策<br>实施反馈循环<br>提高协作性</td></tr></tbody></table><p>在看板方法中，完成工作比开始新工作更为重要，从未完成的工作中无法获得任何价值。</p><h3 id="水晶方法" tabindex="-1"><a class="header-anchor" href="#水晶方法"><span>水晶方法</span></a></h3><table><thead><tr><th>核心价值观</th><th>常见属性</th></tr></thead><tbody><tr><td>人员<br>交互<br>社区<br>技能<br>人才<br>沟通</td><td>频繁交付<br>反思式改进<br>密切或渗透型沟通<br>个人安全<br>专注<br>容易接触专家用户<br>具有自动化测试、配置管理和频繁整合的技术环境</td></tr></tbody></table><h3 id="scrumban" tabindex="-1"><a class="header-anchor" href="#scrumban"><span>SCRUMBAN</span></a></h3><p>团队将 Scrum 作为框架，而将看板作为过程改进方法。</p><p>工作被分解到许多小的“冲刺”，并利用看板面板来可视化和监督工作。</p><h3 id="功能驱动开发-fdd" tabindex="-1"><a class="header-anchor" href="#功能驱动开发-fdd"><span>功能驱动开发（FDD）</span></a></h3><p>目的是满足大型软件开发项目的特定需求。小型商业价值功能重视能力。</p><p>六个主要角色，每个人可以担任以下一个或多个角色：</p><ul><li>项目经理</li><li>首席架构师</li><li>开发经理</li><li>首席编程人员</li><li>类负责人</li><li>领域专家</li></ul><p>五个过程或活动，以迭代方式执行：</p><ul><li>开发整个模型</li><li>构建功能列表</li><li>依据功能规划</li><li>依据功能设计</li><li>依据功能构建</li></ul><p>核心软件工程最佳实践提供支持：</p><ul><li>领域对象建模</li><li>依据功能开发</li><li>个体代码所有制</li><li>功能团队</li><li>检查</li><li>配置管理</li><li>定期构建</li><li>进度和结果可视化</li></ul><h3 id="动态系统开发方法-dsdm" tabindex="-1"><a class="header-anchor" href="#动态系统开发方法-dsdm"><span>动态系统开发方法（DSDM）</span></a></h3><p>该框架开发为行业领导者之间的非商业性协作方式。</p><p>DSDM 因强调制约因素驱动交付而著称。该框架从一开始便可设置成本、质量和实践，然后利用正式的范围优先级来满足这些制约因素的要求。</p><p>八个原则来指导 DSDM 框架的使用：</p><ul><li>专注于业务需求</li><li>准时交付</li><li>协作</li><li>在质量上永不妥协</li><li>在坚实的基础上进行增量式构建</li><li>迭代开发</li><li>保持持续和明晰的沟通</li><li>演示控制（使用适当的技术）</li></ul><h3 id="敏捷统一过程-agileup" tabindex="-1"><a class="header-anchor" href="#敏捷统一过程-agileup"><span>敏捷统一过程（AgileUP）</span></a></h3><p>主要元素</p><table><thead><tr><th>发布中的因素</th><th>指导因素的原则</th></tr></thead><tbody><tr><td>模型<br>实施<br>测试<br>部署<br>配置管理<br>项目管理<br>环境</td><td>团队了解当前工作<br>简洁性<br>敏捷性<br>专注于高价值活动<br>工具依赖性<br>量身定制<br>特定情境</td></tr></tbody></table><h3 id="scrum-of-scrums" tabindex="-1"><a class="header-anchor" href="#scrum-of-scrums"><span>SCRUM OF SCRUMS</span></a></h3><h3 id="大规模敏捷框架-safe" tabindex="-1"><a class="header-anchor" href="#大规模敏捷框架-safe"><span>大规模敏捷框架（SAFe）</span></a></h3><p>SAFe 专注于在项目组合、项目集和团队层详细设定实践、角色和活动，强调围绕专注于向客户提供持续价值的价值流来组织企业。</p><ul><li>采用经济视角</li><li>应用系统思维</li><li>假设可变性；预留方案</li><li>以快速整合的学习周期进行增量式构建</li><li>根据对工作系统的客观评估设定里程碑</li><li>直观显示并限制在制品，减小批次规模并管理队列长度</li><li>应用节奏；与跨域规划同步</li><li>解锁知识员工的内在动力</li><li>决策分散化</li></ul><h3 id="大规模敏捷开发-less" tabindex="-1"><a class="header-anchor" href="#大规模敏捷开发-less"><span>大规模敏捷开发（LeSS）</span></a></h3><p>以扩展 Scrum 方法为共同目标来组织多个开发团队的框架，其核心原则是尽可能博阿留传统单个团队 Scrum 模型的元素。</p><table><thead><tr><th>LeSS 与 Scrum 的相似性</th><th>在 Scrum 中添加 LeSS 技术</th></tr></thead><tbody><tr><td>一个产品待办事项列表<br>一个所有项目完成的定义<br>一个可在每个冲刺结束时潜在可交付的产品增量<br>一名产品负责人<br>全面的跨职能团队<br>一个冲刺</td><td>冲刺计划分为两个正式部分：冲刺内容和方式<br>有机跨团队合作<br>整体跨团队优化<br>专注于跨团队改进的整体回顾</td></tr></tbody></table><h3 id="企业-scrum" tabindex="-1"><a class="header-anchor" href="#企业-scrum"><span>企业 SCRUM</span></a></h3><p>旨在通过更整体性组织层而不是单个产品开发层来应用 Scrum 方法的框架。该框架尤其建议组织领导：</p><ul><li>将所有 Scrum 应用扩展到所有组织方面</li><li>普及 Scrum 技术以便在这些不同的方面轻松应用</li><li>根据需要使用补充技术扩展 Scrum 方法</li></ul><p>其目的在于通过实现颠覆性创新将敏捷方法扩展到项目执行范围以外。</p><h3 id="规范敏捷-da" tabindex="-1"><a class="header-anchor" href="#规范敏捷-da"><span>规范敏捷（DA）</span></a></h3><p>在综合模型中整合多种敏捷最佳实践的过程决策框架。DA 旨在平衡专注范围过于狭窄（如 Scrum）或细节过于规范（如 AgileUP）的流行方法。为实现这种平衡，该方法根据以下原则混合了多种敏捷技术：</p><ul><li>以人为先：枚举不同层级的角色和组织元素</li><li>面向学习：鼓励协作改进</li><li>完全交付生命周期：提倡多个符合目的的生命周期</li><li>目标驱动：定制过程以实现特定结果</li><li>企业意识：提供跨部门治理方面的指导</li><li>可扩展：涵盖多种项目复杂性维度</li></ul><h2 id="附录-2" tabindex="-1"><a class="header-anchor" href="#附录-2"><span>附录 2</span></a></h2><h3 id="敏捷裁剪" tabindex="-1"><a class="header-anchor" href="#敏捷裁剪"><span>敏捷裁剪</span></a></h3><table><thead><tr><th>情况</th><th>裁剪建议</th></tr></thead><tbody><tr><td>大型项目团队</td><td>持大项目重建为多个小项目。首先尝试技术实验项目，然后再执行实施项目。<br>考虑频繁发布较少的功能，以创建较小的项目团队。<br>考虑将团队裁减到仅包含关键核心成员。通常人员过多会阻碍过程而不会有所助益。缩小团队规模可减少内部动荡和成本。<br><br>将大型团队分解为多个小团队，并利用项目管理进行同步和协调。利用敏捷和精益项目管理来组织大型项目。<br><br>考虑 DA、SAFe 或 LeSS 等大规模敏捷框架或精益框架。每个团队都可提供一些有用的观点，并承担实施风险以及过程压力/成本。</td></tr><tr><td>分散团队</td><td>许多项目都会包含(一些)分散团队成员。即时信息、视频会议和团队电子板都有助于确保通讯流畅。<br>如果团队保持稳定，请尽快构建面对面会议以提高未来远程交流的效率。面对面交流时更容易建立信任感，提高对话质量。<br>如果在远程会议过程中参与者缺乏面部表情和身体语言交流，请考虑循环提问以确认他们的参与程度以及对决策是否认可。<br>此外，请考虑使用基于迭代的敏捷方法。如果团队成员所在时区差别较大，请避免使用整个项目迭代方式，而是鼓励开展更多更频繁的私人会议(每次两到三个人)。</td></tr><tr><td>某些安全关键型产品可能需要当前敏捷过程所建议的其他文档及合规性检查</td><td>在这些环境中仍可使用敏捷方法，但还需要该领域所要求的其他相应的合规性审查、文档和认证。在这种情况下，文档可能需要随已完成的功能一起交付。只有文档完成后功能才算完成。<br>考虑使用混合方法(多种敏捷方法)，按照产品环境所要求的更高严格程度，从敏捷所带来的协作和沟通改善中获得益处。航空飞行系统开发商和药物公司采用敏捷方法并结合自己的其他过程，充分利用这些优势并保留了相应的控制权。</td></tr><tr><td>稳定需求和执行过程</td><td>是否真正需要敏捷方法?如果需求不确定性较低、变更速度缓慢、或者执行风险很小，则可能不需要整套敏捷方法。尽管协作和透明程度提高对任何项目都有益处，但某些迭代构建和审查周期可能会是多余的。<br>如果构建/反馈周期无法定期发现或优化需求，请考虑延长其持续时间以减少审查时间对成本的影响。<br>如果项目在设计和开发期间的变更速度极快，但向客户交付是一个确定性的可重复的过程，在每个项目阶段采用相应生命周期模型的混合方法可能更有意义。</td></tr><tr><td>团队位于职能型组织内的职能孤岛中</td><td>敏捷是基于跨职能团队的理念。考虑让这些员工自行创建跨职能团队，而不采取管理干预手段，并了解其后果。<br>如果能够通过组织报酬系统认可职能领域并给予奖励，请考虑首先变更该系统。除非对自己的报酬有一定影响，员工才会为产品或团队的利益行事。</td></tr><tr><td>透明会产生恐惧</td><td>敏捷将会创建透明文化: 员工 会在整个开发期间展示和分享其成果。这种 <br>度由四别交付感来的方式或又对成政得类期国箭获恕的奔蔬带公的态 即反映了透明化。 透明需要勇气。 <br>通过使用状态板或白板,示范引导并在决策过程中展示透明化。</td></tr><tr><td>许多团队成员缺乏技术领域知识</td><td>敏捷方法将会提高团队的主动性并发挥其优势,作出工作内容相关的本地 决策,例如任务安排顺序以及在解决问题时采用哪种方法。如果大多数团 <br>队成员经验不足,基于共识的方法可能会产生问题并导致返工。因此,对 <br>于这些团队来说,在获取必要技能之前,一些&quot;分配&quot;和&quot;指导&quot;方面的 <br>额外帮助可能是必需的。换言之,不要盲目地采用敏捷方法,授权经验不 <br>足的自指导团队尝试解决一切问题。考虑构建能力中心以帮助提供指导并 积累领域知识。</td></tr><tr><td>缺乏管理层支持</td><td>如果缺乏管理层支持,团队将会在敏捷思维模式和方法与更具预测性的思 维模式和方法之间遇到冲突。 <br>根据组织需求找到共同点和改进之处,然后利用实验和回顾取得进展。 <br>考虑管理层教育/培训。考虑从精益思维方面解释敏捷:周期短、规模小、 <br>频繁审查、回顾与小幅改进。</td></tr><tr><td>敏捷术语和语言不适合组织文化</td><td>如果不是敏捷语言,就修改术语,让员工了解并同意这些活动。说明每个 <br>术语的特定含义。 <br>例如,如果组织认为 &quot;游戏&quot;一词不够专业,请勿使用类似于&quot;计划游 戏&quot;这样的术语,而是考虑使用 &quot;计划研讨会&quot;这样的术语。</td></tr></tbody></table><h2 id="附录-3" tabindex="-1"><a class="header-anchor" href="#附录-3"><span>附录 3</span></a></h2><h3 id="术语表" tabindex="-1"><a class="header-anchor" href="#术语表"><span>术语表</span></a></h3><h4 id="首字母缩略词" tabindex="-1"><a class="header-anchor" href="#首字母缩略词"><span>首字母缩略词</span></a></h4><table><thead><tr><th>缩略词</th><th>解释</th></tr></thead><tbody><tr><td>ATDD</td><td>验收测试驱动开发</td></tr><tr><td>BDD</td><td>行为驱动开发</td></tr><tr><td>BRD</td><td>业务需求文档</td></tr><tr><td>DA</td><td>规范敏捷</td></tr><tr><td>DoD</td><td>完成的定义</td></tr><tr><td>DoR</td><td>准备就绪的定义</td></tr><tr><td>DSDM</td><td>动态系统开发方法</td></tr><tr><td>EVO</td><td>渐进价值交付</td></tr><tr><td>LeSS</td><td>大规模敏捷开发</td></tr><tr><td>LSD</td><td>精益软件开发</td></tr><tr><td>PDCA</td><td>计划 - 实施 - 检查 - 行动</td></tr><tr><td>PMO</td><td>项目管理办公室</td></tr><tr><td>ROI</td><td>投资回报率</td></tr><tr><td>RUP</td><td>统一软件开发过程</td></tr><tr><td>SAFe</td><td>大规模敏捷框架</td></tr><tr><td>SBE</td><td>实例化需求</td></tr><tr><td>XP</td><td>极限编程</td></tr></tbody></table><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><p><strong>A3. A3</strong> 一种思维方式及一种解决问题的系统化过程，将相关信息囊括在一张 A3 大小的纸上。</p><p><strong>Acceptance Test-Driven Development(ATDD). 验收测试驱动开发</strong> 一种协作制定验收测试标准的方法用于创建交付前的验收测试。</p><p><strong>Agile. 敏捷</strong> 用于描述反映了《敏捷宣言》所述价值观和原则的思维模式的一个术语。</p><p><strong>Agile Coach. 敏捷教练</strong> 指掌握了敏捷值似乎和经验的人员，在其组织和团队转型中能够发挥培训、辅导和指导的作用。</p><p><strong>Agile Life Cycle. 敏捷生命周期</strong> 一种迭代兼增量方法用于优化工作项目增加交付频率。</p><p><strong>Agile Manifesto. 敏捷宣言</strong> 敏捷价值观和原则的最初官方定义。</p><p><strong>Agile Mindset. 敏捷思维模式</strong> 一种思维和行为方式，植根于《敏捷宣言》的四大价值观和十二条原则。</p><p><strong>Agile Practitioner. 敏捷实践者</strong> 接受敏捷思维模式，在跨职能团队中与志同道合的同事开展协作的人。也成为敏捷专家。</p><p><strong>Agile Principles. 敏捷原则</strong> 《敏捷宣言》中所体现的敏捷项目交付的十二条原则。</p><p><strong>Agile Unified Process. 敏捷统一过程</strong> 在业务应用软件开发中应用敏捷技术和思想的一种简单且便于理解的方法。它是统一软件开发过程（RUP）的简化版本。</p><p><strong>Agilist. 敏捷专家</strong></p><p><strong>Anti-Pattern. 反模式</strong> 一种已知的、有缺陷的、不可取的工作模式。</p><p><strong>Automated Code Quality Analysis. 自动化代码质量分析</strong> 用于检测代码库缺陷和漏洞的脚本化测试。</p><p><strong>Backlog. 待办事项列表</strong></p><p><strong>Backlog Refinement. 待办事项列表的细化</strong> 对项目需求和/或正在进行的活动的渐进明细其中团队协作参与需求的审核、更新和撰写以满足客户需求。</p><p><strong>Behavior-Driven Development(BDD). 行为驱动开发</strong> 一种系统设计和确认实践采用测试优先的原则和类似英语的脚本。</p><p><strong>Blended Agile. 混合敏捷</strong> 指同时使用两种或两种以上的敏捷框架、方法、要素或实践，例如 Scrum 与极限编程和看板的结合使用</p><p><strong>Blocker. 阻碍</strong></p><p><strong>Broken Comb. “破梳齿”人才</strong> 指对团队所需的多种技能掌握程度深浅不一的人。也称为”颜料滴洒“人才。</p><p><strong>Burndown Chart. 燃尽图</strong> 剩余工作与时间盒内剩余实践关系的一种图形化表示形式。</p><p><strong>Burnup Chart. 燃起图</strong> 对已完成工作与产品发布关系的一种图形化表示形式。</p><p><strong>Business Requirement Documents(BRD). 业务需求文档</strong> 某特定项目的所有需求列表。</p><p><strong>Cadence. 节奏</strong> 项目执行节奏。</p><p><strong>Collective Code Ownership. 代码集体所有</strong> 一种项目加速和协作技术，任何团队成员都有权修改任何项目工作产品或可交付成果。它强调整个团队的责任和最终责任。</p><p><strong>Continuous Delivery. 持续交付</strong> 立即向客户交付功能增量的实践往往通过采用小批量工作和自动化技术实现。</p><p><strong>Continuous Integration. 持续整合</strong> 一种团队各成员的工作产品经常整合并彼此确认的实践。</p><p><strong>Cross-Functional Team. 跨职能团队</strong> 指由实践者组成的团队，这些实践者掌握交付有价值产品增量所需的各种技能。</p><p><strong>Crystal Family of Methodologies. 水晶家族方法论</strong> 轻量级敏捷软件开发方法的集合，重点关注特定情况的适应性。</p><p><strong>Daily Scrum. 每日例会</strong> 指每天召集的一种简短的协作会议，团队将回顾前一天的进展，宣布当天的计划，强调曾遇到或预期出现的障碍。也称为每日站会。</p><p><strong>Definition of Done(DoD). 完成的定义</strong> 团队需要满足的所有标准的核对单，只有可交付成果满足该核对单才能是为准备就绪可供客户使用。</p><p><strong>Definition of Ready(DoR). 准备就绪的定义</strong> 团队以用户需求为中心的核对单，包括团队开始工作所需的全部信息。</p><p><strong>DevOps. DevOps</strong> 通过改善开发和运营员工之间的协作来理顺交付流程的各种实践的集合。</p><p><strong>Disciplined Agile (DA). 规范敏捷</strong> 指一种过程决策框架，能够围绕增量和迭代解决方案的交付来简化过程决策。</p><p><strong>Double-Loop Learning. 双循环学习</strong> 一种质疑潜在的价值和假设的过程，目的不是仅关注征兆，而是为了更好地阐述根本原因，制定改善对策。</p><p><strong>Dynamic Systems Development Method (DSDM). 动态系统开发方法</strong> 一种敏捷项目交付框架。</p><p><strong>Evolutionary Value Delivery (Evo). 渐进价值交付</strong> 公认的首要敏捷方法，拥有其他方法所不具备的特点，重点关注向相关方交付多种可衡量的价值需求。</p><p><strong>eXtreme Programming. 极限编程</strong> 一种敏捷软件开发方法，不仅能提高软件质量、改善软件对不断变化的客户需求的响应能力，还能缩短软件版本发布周期，增加发布频率。</p><p><strong>Feature-Driven Development. 功能驱动开发</strong> 从客户重视的功能角度触发的轻量级敏捷软件开发方法。</p><p><strong>Fit for Purpose. 符合目的</strong> 符合预期目的的产品。</p><p><strong>Fit for Use. 适合使用</strong> 以当前形势使用能实现其预期目的的产品。</p><p><strong>Flow Master. 工作流主管</strong> 在连续工作流或看板环境下工作的团队教练和服务请求管理者。相当于 Scrum 主管。</p><p><strong>Framework. 框架</strong> 比某种特定方法更为通用的方法。</p><p><strong>Functional Requirement. 功能需求</strong> 指某产品或服务应完成的一个特定行为。</p><p><strong>Functional Specification. 功能规范</strong> 指某系统或应用需要实现的一种特定功能。它通常体现在功能规范文档中。</p><p><strong>Hoshin Kanri.方针管理</strong> 一种策略或政策的部署方法。</p><p><strong>Hybrid Approach. 混合方法</strong> 指两种或两种以商敏捷或非敏捷要素的组合，据有非敏捷的最终结果。</p><p><strong>IDEAL. IDEAL</strong> 一种组织改进模型，以所描述的五个阶段命名启动、诊断、确立、执行和学习。</p><p><strong>Impact Mapping. 影响地图</strong> 战略规划技术，被组织作为打造新产品的路线图。</p><p><strong>Impediment. 障碍</strong> 指妨碍团队达成其目标的干扰因素。也成为阻碍。</p><p><strong>Increment. 增量</strong> 经过测试、验收的使用可交付成果也是项目总体成果的组成部分。</p><p><strong>Incremental Life Cycle. 增量型生命周期</strong> 提供已完工的、客户可立即使用的可交付成果的方法。</p><p><strong>Information Radiator. 信息发射源</strong> 可见 的实物展示，向组织内其他成员提供信息，在不干扰团队的情况下即时实现知识共享。</p><p><strong>I-shaped. I 型人才</strong> 指深入掌握单一专业技能的人员，他们不具备团队所需的其他技能或对其不感兴趣。</p><p><strong>Iteration. 迭代</strong> 产品或可交付成果开发的一个时间盒，循环其中需要执行交付价值所需的所有工作。</p><p><strong>Iterative Life Cycle. 迭代型生命周期</strong> 允许对未完成工作提供反馈从而对工作加以改善和修改的的方法。</p><p><strong>Kaizen Events. 改善活动</strong> 旨在对系统加以改善的活动。</p><p><strong>Kanban Board. 看板面板</strong> 可视话工具，能够通过瓶颈和工作量的有形呈现改善工作流。</p><p><strong>Kanban Method. 看板方法</strong> 受到看板库存控制系统启发的敏捷方法，专门用于知识工作。</p><p><strong>Large-Scale Scrum (LeSS). 大规模敏捷开发</strong> 一种产品开发框架，它根据扩展指导方针库达敏捷开发规模，同时保留原有的敏捷开发目的。</p><p><strong>Lean Software Development (LSD). 精益软件开发</strong> 软件开发领域的精益制造原理和实践，它基于一套旨在满足质量、速度和客户定位要求的原理和实践。</p><p><strong>Life Cycle. 生命周期</strong> 指产品从构想、创造到投入使用的过程。</p><p><strong>Mobbing. 群体开发</strong> 一种工作技术，其中多名团队成员围绕某个具体工作项目同时协调工作。</p><p><strong>Organizational Bias. 组织偏好</strong> 组织对一组衡量指标的选择。这组衡量指标具有如下核心，价值探索与执行、速度与稳定性、数量与质量、灵活性与可预测性。</p><p><strong>Organizational Change Management. 组织变革管理</strong> 全面的、周期性的、结构化方法，旨在使个人、群组和组织在从当前状态转换未未来状态时实现预期的业务受益。</p><p><strong>Paint-Drip. ”颜料滴洒“人才</strong></p><p><strong>Pairing. 结对</strong> 结对工作。</p><p><strong>Pair Programming. 结对编程</strong></p><p><strong>Pair Work. 结对工作</strong> 由两名团队成员结对、同时从事同一工作项目的技术。</p><p><strong>Personas. 人物角色</strong> 代表一组类似终端用户的典型用户，通过其目标、动机和据有代表性的个人特征描述。</p><p><strong>Pivot. 转向</strong> 指计划中的方向修正旨在检测产品或册罗的新假设。</p><p><strong>Plan-Do-Check-Act(PDCA). 计划-执行-检查-行动</strong> 组织中的一种迭代管理方法旨在促进过程和产品的控制和持续改善。</p><p><strong>Plan-Driven Approach. 计划驱动方法</strong> 参考预测法。</p><p><strong>Predictive Approach. 预测法</strong> 一种工作管理方法在整个项目生命周期中应用工作计划和管理工作计划。</p><p><strong>Predictive Life Cycle. 预测型生命周期</strong> 一种更为传统的方法，大部分规划在前期进行随后一次性执行它是一个连续的过程。</p><p><strong>Project Management Office (PMO). 项目管理办公室</strong> 与项目相关的治理过程进行标准化并促进资源、方法论、工具和技术共享的一种管理架构。</p><p><strong>Product Backlog. 产品待办事项列表</strong> 指团队围绕某产品维护的一个以用户未中心的需求的有序列表。</p><p><strong>Product Owner. 产品负责人</strong> 负责使产品实现最大价值的人员，其对所创建的终端产品负责并承担最终责任。另参见服务请求管理者。</p><p><strong>Progressive Elaboration. 渐进明细</strong> 随着信息越来越多、估算越来越准确，进而不断提高项目管理计划的详细程度的迭代过程。</p><p><strong>Refactoring. 重构</strong> 一种产品质量技术，其通过提高产品的可维护性和其他需要的属性来改善产品设计，同时并不改变产品的预期行为。</p><p><strong>Retrospective. 回顾</strong> 一种定期进行的研讨活动。其中参与者针对其工作和工作成果进行探讨，旨在对过程和产品做出改进。</p><p><strong>Rolling Wave Planning. 滚动式规划</strong> 一种迭代式的规划技术，对近期要完成的工作进行详细规划，对远期工作只做粗略规划。</p><p><strong>Scaled Agile Framework (SAFe). 大规模敏捷框架</strong> 一个集成模式的知识库，用于企业范围的精益开发。</p><p><strong>Scrum. Scrum</strong> 一种复杂产品开发与维持的敏捷框架，它由特定的角色、事件和工件等元素组成。</p><p><strong>Scrumban. Scrumban</strong> 一种在团队选择 Scrum 作为工作方式时产生的管理框架，它以看板方法作为透视镜从而审视、理解并持续改善其工作。</p><p><strong>Scrum Board. Scrum 板</strong> 一种用于管理产品待办事项列表和冲刺待办事项列表的信息发射源，它能显示工作流及其瓶颈。</p><p><strong>Scrum Master. Scrum 主管</strong> 指开发团队的教练和 Scrum 框架中的产品负责人。其负责消除障碍促进富有成效的事件并保护团队免受干扰。</p><p><strong>Scrum Team. Scrum 团队</strong> 指在敏捷开发中开发团队、Scrum 主管和产品负责人的总和。</p><p><strong>Self-Organizing Team. 自组织团队</strong> 一种跨职能团队，其中为实现团队目标团队成员根据需要轮换着发挥领导作用。</p><p><strong>Servant Leadership. 服务型领导</strong> 一种像团队提供服务的领导，实践重点是理解并解决团队成员的需求和发展，尽可能提高团队的绩效。</p><p><strong>Service Request Manager. 服务请求管理者</strong> 指在连续工作流或看板环境中负责整理服务请求，旨在实现最大价值的人员。它相当于产品负责人。</p><p><strong>Siloed Organization. 孤岛组织</strong> 只能部分满足向客户交付价值的需求的方式构建的组织。参照价值流。</p><p><strong>Single Loop Learning. 单循环学习</strong> 指未根据经验提出质疑、仅仅利用预先确定的特定方法解决问题的实践。</p><p><strong>Smoke Testing. 冒烟测试</strong> 利用一组轻量级测试，确保正在开发的系统实现最重要的预期功能的实践。</p><p><strong>Specification by Example (SBE). 实例化需求</strong> 为软件产品定义需求和定义面向商业的功能测试的一种协作方法，基于使用实例获取并阐明需求而不是抽象陈述需求。</p><p><strong>Spike. 刺探</strong> 指项目中短暂的时间间隔，通常长度固定在此期间，团队开展研究或针对方案的某个方面进行原型研究验证其可能性。</p><p><strong>Sprint. 冲刺</strong> 描述敏捷考法中的时间盒迭代。</p><p><strong>Sprint Backlog. 冲刺待办事项列表</strong> 指由 Scrum 团队识别的、需要在 Sprint 中完成的工作事项列表。</p><p><strong>Sprint Planning. 冲刺计划</strong> 指敏捷考法中的一个协作事件，团队为目前的冲刺制定工作计划。</p><p><strong>Story Point. 故事点</strong> 用于相关用户故事估算技术中的一种无量纲指标。</p><p><strong>Swarming. 群集</strong> 指一种团队多个成员合作、重点消除特定障碍的技术。</p><p><strong>Technical Debt. 技术债务</strong> 指产品生命周期早期未能完成工作的递延成本。</p><p><strong>Test-Driven Development. 测试驱动开发</strong> 在工作开始前定义测试的一种技术，它采用零缺陷的思维模式使工作进度能持续得到确认。</p><p><strong>Timebox. 时间盒</strong> 指一段固定时间例如 1 周。</p><p><strong>T-shaped. T 型人才</strong> 指深入掌握单一专业技能，并广泛掌握团队所需其他技能的人员。</p><p><strong>User Story. 用户故事</strong> 针对特定用户的可交付成果价值的简要描述。是对澄清细节对话的承诺。</p><p><strong>User Story Mapping. 用户故事地图</strong> 一宗将工作纳入一个应用模型的可视化实践，旨在帮助理解随着时间推移而创建的高价值功能集，发现待办事项列表中的遗漏，有效规划向用户交付价值的软件发布。</p><p><strong>UX Design. 用户体验设计</strong> 一种促进用户体验的过程，重点改善用户与产品互动中的可用性和可访问性。</p><p><strong>Value Stream. 价值流</strong> 一种组织性结构，重点关注通过特定产品或服务交付流向客户的价值。</p><p><strong>Value Stream Mapping. 价值流图</strong> 用于记录、分析和改善为客户生产产品或提供服务时所需的信息或材料流的精益企业技术。</p>',325)]))}const p=l(e,[["render",n]]),h=JSON.parse('{"path":"/1.capacity/08.agile/%E6%95%8F%E6%8D%B7%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97.html","title":"敏捷实践指南","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"引论","slug":"引论","link":"#引论","children":[{"level":3,"title":"敏捷型学习","slug":"敏捷型学习","link":"#敏捷型学习","children":[]}]},{"level":2,"title":"敏捷概述","slug":"敏捷概述","link":"#敏捷概述","children":[{"level":3,"title":"1. 可确定的工作与高度不确定的工作","slug":"_1-可确定的工作与高度不确定的工作","link":"#_1-可确定的工作与高度不确定的工作","children":[]},{"level":3,"title":"2.《敏捷宣言》及思维模式","slug":"_2-《敏捷宣言》及思维模式","link":"#_2-《敏捷宣言》及思维模式","children":[]},{"level":3,"title":"3. 精益与看板方法","slug":"_3-精益与看板方法","link":"#_3-精益与看板方法","children":[]},{"level":3,"title":"4. 不确定性、风险和生命周期选择","slug":"_4-不确定性、风险和生命周期选择","link":"#_4-不确定性、风险和生命周期选择","children":[]}]},{"level":2,"title":"生命周期选择","slug":"生命周期选择","link":"#生命周期选择","children":[{"level":3,"title":"混合敏捷方法","slug":"混合敏捷方法","link":"#混合敏捷方法","children":[]}]},{"level":2,"title":"实施敏捷：创建敏捷环境","slug":"实施敏捷-创建敏捷环境","link":"#实施敏捷-创建敏捷环境","children":[{"level":3,"title":"从敏捷思维开始","slug":"从敏捷思维开始","link":"#从敏捷思维开始","children":[]},{"level":3,"title":"仆人式领导为团队赋权","slug":"仆人式领导为团队赋权","link":"#仆人式领导为团队赋权","children":[]},{"level":3,"title":"团队构成","slug":"团队构成","link":"#团队构成","children":[]}]},{"level":2,"title":"实施敏捷：在敏捷环境中交付","slug":"实施敏捷-在敏捷环境中交付","link":"#实施敏捷-在敏捷环境中交付","children":[{"level":3,"title":"项目章程和团队章程","slug":"项目章程和团队章程","link":"#项目章程和团队章程","children":[]},{"level":3,"title":"常见敏捷实践","slug":"常见敏捷实践","link":"#常见敏捷实践","children":[]},{"level":3,"title":"解决敏捷项目的挑战","slug":"解决敏捷项目的挑战","link":"#解决敏捷项目的挑战","children":[]},{"level":3,"title":"敏捷项目的衡量指标","slug":"敏捷项目的衡量指标","link":"#敏捷项目的衡量指标","children":[]}]},{"level":2,"title":"关于项目敏捷性的组织考虑因素","slug":"关于项目敏捷性的组织考虑因素","link":"#关于项目敏捷性的组织考虑因素","children":[{"level":3,"title":"组织变革管理","slug":"组织变革管理","link":"#组织变革管理","children":[]},{"level":3,"title":"组织文化","slug":"组织文化","link":"#组织文化","children":[]},{"level":3,"title":"商业实践","slug":"商业实践","link":"#商业实践","children":[]},{"level":3,"title":"多团队协作和依赖关系","slug":"多团队协作和依赖关系","link":"#多团队协作和依赖关系","children":[]},{"level":3,"title":"敏捷和项目办公室（PMO）","slug":"敏捷和项目办公室-pmo","link":"#敏捷和项目办公室-pmo","children":[]},{"level":3,"title":"组织结构","slug":"组织结构","link":"#组织结构","children":[]},{"level":3,"title":"组织演变","slug":"组织演变","link":"#组织演变","children":[]}]},{"level":2,"title":"附录 1","slug":"附录-1","link":"#附录-1","children":[{"level":3,"title":"《敏捷宣言》映射","slug":"《敏捷宣言》映射","link":"#《敏捷宣言》映射","children":[]},{"level":3,"title":"SCRUM","slug":"scrum","link":"#scrum","children":[]},{"level":3,"title":"极限编程","slug":"极限编程","link":"#极限编程","children":[]},{"level":3,"title":"看板方法","slug":"看板方法","link":"#看板方法","children":[]},{"level":3,"title":"水晶方法","slug":"水晶方法","link":"#水晶方法","children":[]},{"level":3,"title":"SCRUMBAN","slug":"scrumban","link":"#scrumban","children":[]},{"level":3,"title":"功能驱动开发（FDD）","slug":"功能驱动开发-fdd","link":"#功能驱动开发-fdd","children":[]},{"level":3,"title":"动态系统开发方法（DSDM）","slug":"动态系统开发方法-dsdm","link":"#动态系统开发方法-dsdm","children":[]},{"level":3,"title":"敏捷统一过程（AgileUP）","slug":"敏捷统一过程-agileup","link":"#敏捷统一过程-agileup","children":[]},{"level":3,"title":"SCRUM OF SCRUMS","slug":"scrum-of-scrums","link":"#scrum-of-scrums","children":[]},{"level":3,"title":"大规模敏捷框架（SAFe）","slug":"大规模敏捷框架-safe","link":"#大规模敏捷框架-safe","children":[]},{"level":3,"title":"大规模敏捷开发（LeSS）","slug":"大规模敏捷开发-less","link":"#大规模敏捷开发-less","children":[]},{"level":3,"title":"企业 SCRUM","slug":"企业-scrum","link":"#企业-scrum","children":[]},{"level":3,"title":"规范敏捷（DA）","slug":"规范敏捷-da","link":"#规范敏捷-da","children":[]}]},{"level":2,"title":"附录 2","slug":"附录-2","link":"#附录-2","children":[{"level":3,"title":"敏捷裁剪","slug":"敏捷裁剪","link":"#敏捷裁剪","children":[]}]},{"level":2,"title":"附录 3","slug":"附录-3","link":"#附录-3","children":[{"level":3,"title":"术语表","slug":"术语表","link":"#术语表","children":[]}]}],"git":{"updatedTime":1745032055000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"a2b6e78156eb7f1fed6ecb0952cc98c6b90aa9d3","time":1745032055000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"change hierarchy"}]},"filePathRelative":"1.capacity/08.agile/敏捷实践指南.md"}');export{p as comp,h as data};
