import{_ as e,c as d,b as a,o as n}from"./app-C01vnHKY.js";const i={};function r(s,t){return n(),d("div",null,t[0]||(t[0]=[a('<h1 id="atdd、tdd、bdd-的区别" tabindex="-1"><a class="header-anchor" href="#atdd、tdd、bdd-的区别"><span>ATDD、TDD、BDD 的区别</span></a></h1><h2 id="atdd-acceptance-test-driven-development-验收测试驱动开发" tabindex="-1"><a class="header-anchor" href="#atdd-acceptance-test-driven-development-验收测试驱动开发"><span>ATDD：Acceptance Test Driven Development（验收测试驱动开发）</span></a></h2><p>在编码开始之前将客户带入测试设计过程的技术。它也是一个协作实践，用户、测试人员和开发人员定义了自动验收标准。ATDD 有助于确保所有项目成员准确理解需要完成和实施的内容。如果系统未通过测试可提供快速反馈，说明未满足要求。验收测试以业务领域术语进行指定。每个功能都必须提供真实且可衡量的业务价值。事实上，如果您的功能没有追溯至至少一个业务目标，那么您应该想知道为什么您要首先实施它。</p><h2 id="tdd-test-driven-development-测试驱动开发" tabindex="-1"><a class="header-anchor" href="#tdd-test-driven-development-测试驱动开发"><span>TDD Test Driven Development（测试驱动开发）</span></a></h2><p>是一种使用自动化单元测试来推动软件设计并强制依赖关系解耦的技术。使用这种做法的结果是得到一套全面的单元测试，可随时运行，以提供软件可以正常工作的反馈。 TDD 重点是培养整个研发过程的节奏感，就跟跳踢踏舞一样，“ti-ta-t1”。 在编写真正实现功能的代码之前编写测试，每次测试之后，重构完成，然后再次执行相同或类似的测试。该过程根据需要重复多次，直到每个单元根据所需的规格运行。</p><h2 id="bdd-behavior-driven-development-行为驱动开发" tabindex="-1"><a class="header-anchor" href="#bdd-behavior-driven-development-行为驱动开发"><span>BDD Behavior Driven Development（行为驱动开发）</span></a></h2><p>BDD 将 TDD 的一般技术和原理与领域驱动设计（DDD）的想法相结合。BDD 是一个设计活动，您可以根据预期行为逐步构建功能块。 BDD 的重点是软件开发过程中使用的语言和交互。 行为驱动的开发人员使用他们的母语与领域驱动设计的语言相结合来描述他们的代码的目的和好处。 使用 BDD 的团队应该能够以用户故事的形式提供大量的“功能文档”，并增加可执行场景或示例。BDD 通常有助于领域专家理解实现而不是暴露代码级别测试。它通常以 GWT 格式定义：GIVEN WHEN THEN。</p><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h2><table><thead><tr><th>区别项</th><th>ATDD</th><th>TDD</th><th>BDD</th></tr></thead><tbody><tr><td>参与者和范围</td><td>业务用户、开发人员、测试人员之间的沟通机制以确保需求得到充分记录</td><td>开发人员和测试人员之间的开发方法，以创建良好的代码单元（模块、类、功能）</td><td>ATDD 和 TDD 的组合</td></tr><tr><td>重点</td><td>专注于提取用户验收测试中的要求并用于推动开发。是一种使客户进入设计阶段的技术</td><td>一种模式和范例</td><td>专注于客户和开发者的系统行为方面，仍然是偏向于不断测试的实践来引导客户进入测试阶段，并通过逐步关注其行为进行认证</td></tr><tr><td>敏捷步骤</td><td>讨论、开发、发布、不断重复</td><td>测试、编码、重构、不断重复</td><td>按预期行为逐步构建功能。它是 TDD 和编写使功能/行为失败的测试的延伸</td></tr><tr><td>输入文档</td><td>验收标准+示例（数据和方案）=验收测试需求文档将作为开发和测试的基础</td><td>需求文档</td><td>用 GWT 格式书写的实例化文档，有时也需要验收标准</td></tr><tr><td>自动化要求</td><td>不是必须，可在回顾测试时实现</td><td>必须</td><td>必须</td></tr><tr><td>故事/特性/测试地图</td><td>每个故事都应对应一个验收测试</td><td>每个功能都需要对应一个测试</td><td>每个故事应对应一个行为测试</td></tr><tr><td>主流工具</td><td>Robot Framework、FitNesse、FIT</td><td>Xunit Framework</td><td>Cucumber</td></tr><tr><td>最终用户</td><td>客户</td><td>开发人员、测试人员</td><td>客户和开发者</td></tr></tbody></table><h2 id="后记" tabindex="-1"><a class="header-anchor" href="#后记"><span>后记</span></a></h2><p>在 SBE-Specification by Example（实例化需求说明）的过程和工件有两种流向的模型：以验收&gt;测试为中心的模型和以系统行为规范为主导的模型。 以 ATDD 侧重于自动化测试，并把它作为实例化需求说明过程的一部分。这个模型的主要优点是开发目标更加明确，并且可以防止功能退化。 以 BDD 侧重于执行系统行为的场景。主要工作是通过协作和需求澄清，在项目干系人和交付团队之间建立共识。</p><h2 id="tdd-vs-bdd-the-final-showdown" tabindex="-1"><a class="header-anchor" href="#tdd-vs-bdd-the-final-showdown"><span>TDD vs. BDD: The Final Showdown</span></a></h2><p>TDD vs. BDD is a quest for some developers. Even experienced developers find it difficult to differentiate between these approaches. Now that we have touched upon the working and implementation of TDD and BDD let’s deep dive into the major differences in this epic TDD vs. BDD clash:</p><table><thead><tr><th>Criteria</th><th>TDD</th><th>BDD</th></tr></thead><tbody><tr><td>Language</td><td>Test cases designed in TDD are Technical. These are similar to the test cases that are normally written during the testing phase.</td><td>The test scenarios designed in BDD are written in simple language.</td></tr><tr><td>Implementation Level</td><td>There is a low-level implementation in TDD.</td><td>The scenarios are easy to understand and implement, making BDD a high-level implementation with regard to test case development.</td></tr><tr><td>Key Stages</td><td>Test case development is the major phase in TDD.</td><td>Discussion and creation of scenarios are the major stages in BDD.</td></tr><tr><td>Stages involved in Development</td><td>TDD involves three main stages, Test creation, implementation, and code refactoring are the major stages in TDD.</td><td>BDD involves a number of stages like feature discussion, scenario creation, testing, implementation, and code refactoring.</td></tr><tr><td>Participants</td><td>Only technical teams like development teams take part in TDD processes.</td><td>BDD involves many teams, right from client to business analysts, testers, developers, etc.</td></tr><tr><td>Primary Focus</td><td>Development of required functionality based on test cases is the primary focus in TDD.</td><td>BDD focuses on the correspondence between implemented features and expected behavior.</td></tr><tr><td>Documentation</td><td>TDD requires documentation for the creation of accurate test cases.</td><td>Thrust is laid on documentation created during the scenario creation process.</td></tr><tr><td>Tools</td><td>The tools (or frameworks) used in TDD involve JUnit, TestNG, NUnit, etc. These are used to run test cases.</td><td>Gherkin is used for writing scenarios in BDD. Cucumber, SpecFlow, etc., are some of the widely used test automation frameworks.</td></tr><tr><td>Applicable Domain</td><td>The main focus in TDD is to get appropriate functionality through implementation.</td><td>BDD has the defined domain as “Behavior.” This focuses on the product’s behavior at the end of implementing the product functionality.</td></tr><tr><td>Bug Tracking</td><td>Bug tracking is easier in TDD, as the tests indicate whether they have passed or failed.</td><td>Bug tracking in BDD requires integration between multiple tools across the organization.</td></tr></tbody></table>',14)]))}const D=e(i,[["render",r]]),h=JSON.parse('{"path":"/3.tech/71.BDD/03.ATDDTDDBDD.html","title":"ATDD、TDD、BDD 的区别","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"ATDD：Acceptance Test Driven Development（验收测试驱动开发）","slug":"atdd-acceptance-test-driven-development-验收测试驱动开发","link":"#atdd-acceptance-test-driven-development-验收测试驱动开发","children":[]},{"level":2,"title":"TDD Test Driven Development（测试驱动开发）","slug":"tdd-test-driven-development-测试驱动开发","link":"#tdd-test-driven-development-测试驱动开发","children":[]},{"level":2,"title":"BDD Behavior Driven Development（行为驱动开发）","slug":"bdd-behavior-driven-development-行为驱动开发","link":"#bdd-behavior-driven-development-行为驱动开发","children":[]},{"level":2,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":2,"title":"后记","slug":"后记","link":"#后记","children":[]},{"level":2,"title":"TDD vs. BDD: The Final Showdown","slug":"tdd-vs-bdd-the-final-showdown","link":"#tdd-vs-bdd-the-final-showdown","children":[]}],"git":{"updatedTime":1745032055000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":3,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"a2b6e78156eb7f1fed6ecb0952cc98c6b90aa9d3","time":1745032055000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"change hierarchy"},{"hash":"cf1a535ce24165a7f8da8bf85c1c9f2de88d6068","time":1692634731000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: change the groups"},{"hash":"2ef20e08fd212b23fcf32fc33614285ba8331430","time":1692491740000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: 2023-08-19"}]},"filePathRelative":"3.tech/71.BDD/03.ATDDTDDBDD.md"}');export{D as comp,h as data};
