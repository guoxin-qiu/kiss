import{_ as p,c as t,b as a,a as i,t as e,o as l}from"./app-C01vnHKY.js";const c={};function o(s,n){return l(),t("div",null,[n[0]||(n[0]=a(`<h1 id="用-go-语言手写可定制-api-agent-上" tabindex="-1"><a class="header-anchor" href="#用-go-语言手写可定制-api-agent-上"><span>用 Go 语言手写可定制 API Agent（上）</span></a></h1><p>经过了几节课的产品体验和源码学习后，终于要来到实践环节了。在本节课以及下一节课，我会带你参考 Dify Agent 的思路，用 Go 语言做一个零代码可配置的 API Agent 产品出来。</p><p>之前有同学问过我，这个课程为什么要用 Go 语言来做，做 AI 开发的主流语言不应该是 Python 吗？在这里，我做一下统一回答。</p><p>我们知道云原生应用开发的“母语”是 Go，而学习这个课程的同学大多数是做云原生开发，希望额外学习 AI 相关的知识提升自己的。因此，使用 Go 语言来做课程，会让大多数同学上手更加方便，理解起来也会更加容易。试想，如果原理真的理解了，能用自己最熟悉的语言零框架手撸出来了，那需要用到 Python 或者一些第三方框架，比如 LangChain 时，上手也会非常的快。</p><p>第二点是在云原生的某些场景下，无法使用 Python 语言进行开发，比如下一章节要给你讲解的云原生网关以及 wasm 技术，就暂时不支持 Python 语言。所以我在综合考虑后，决定全程用 Go 语言来做课程。在这里也希望你能够摆脱语言的束缚，重点学习原理以及套路，将来不管用到什么工具时都能够从容应对。</p><p>那么言归正传，我们开始进入今天的实战编码环节。</p><h2 id="react-模板" tabindex="-1"><a class="header-anchor" href="#react-模板"><span>ReAct 模板</span></a></h2><p>首先来搞定 Agent 的大脑。Dify 的 ReAct 模板是用 python 写的，因此它可以使用类似模板的语法，就像这样：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">ENGLISH_REACT_COMPLETION_PROMPT_TEMPLATES <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;Respond to the human as helpfully and accurately as possible. </span>
<span class="line"></span>
<span class="line">{{instruction}}</span>
<span class="line"></span>
<span class="line">You have access to the following tools:</span>
<span class="line"></span>
<span class="line">{{tools}}</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)),i("p",null,"这里我只是截取了模板中的几行，你理解我要表达的意思即可，完整模板可以去上节课查看。在这个模板中，"+e(s.instruction)+" 和 "+e(s.tools)+" 作为占位符，让我们明确知道在模板中的哪个部分需要插入特定的信息。那么，使用 Go 语言能否实现类似的效果呢？答案是肯定的。",1),n[1]||(n[1]=a(`<p>Go 语言本身提供了强大的模板引擎，text/template 包可以帮助我们动态填充模板内容。这使得我们可以在 Go 中轻松实现与 Python 类似的功能，动态生成所需的字符串输出。Go 的模板引擎不仅支持基础的字符串替换，还能处理复杂的逻辑和条件判断，从而让模板更加灵活和智能。</p><p>在 Go 中，我们可以这样定义一个类似的模板：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">const EN_Template <span class="token operator">=</span> \`</span>
<span class="line">Respond to the human <span class="token keyword">as</span> helpfully <span class="token keyword">and</span> accurately <span class="token keyword">as</span> possible<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span>Instruction<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">You have access to the following tools<span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span>Tools<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那为了填充这个模板，我们可以使用如下测试代码所示的方法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;text/template&quot;</span></span>
<span class="line">	<span class="token string">&quot;os&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> PromptData <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	Instruction <span class="token builtin">string</span></span>
<span class="line">	Tools       <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 创建模板对象</span></span>
<span class="line">	tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;reactPrompt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>EN_Template<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error parsing template:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 定义模板数据</span></span>
<span class="line">	data <span class="token operator">:=</span> PromptData<span class="token punctuation">{</span></span>
<span class="line">		Instruction<span class="token punctuation">:</span> <span class="token string">&quot;Provide a detailed explanation of how AI can improve cloud-native architectures.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		Tools<span class="token punctuation">:</span>       <span class="token string">&quot;AI tools, Cloud-Native tools&quot;</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 执行模板并输出到标准输出</span></span>
<span class="line">	err <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> data<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error executing template:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，我们能够在 Go 语言中实现与 Python 相似的模板功能，使模板增加可阅读性，还便于调整字段。</p><h2 id="openapi-文档解析" tabindex="-1"><a class="header-anchor" href="#openapi-文档解析"><span>OpenAPI 文档解析</span></a></h2><h3 id="配置导入" tabindex="-1"><a class="header-anchor" href="#配置导入"><span>配置导入</span></a></h3><p>在 Dify 中，是通过在 UI 上填写工具信息的方式来完成工具创建的。在我们的代码中，没有前端，就使用本地 YAML 配置文件解析的方式来大概模拟一下。</p><p>YAML 配置文件，用来存放 OpenAPI 文档，API Key 等信息。先定义字段描述如下：</p><p><img src="https://static001.geekbang.org/resource/image/8b/cc/8bece259d819bdeea91b0ca414e12bcc.png?wh=1920x479" alt="图片"></p><p>apis 的配置字段说明如下：</p><p><img src="https://static001.geekbang.org/resource/image/f8/3b/f83943e01e4208f9a183d446fcde083b.png?wh=1920x459" alt="图片"></p><p>apiProvider 的配置字段说明如下：</p><p><img src="https://static001.geekbang.org/resource/image/e7/3a/e7c348a2yyc0cbf98526176a4975713a.png?wh=1920x389" alt="图片"></p><p>apiKey 的配置字段说明如下：</p><p><img src="https://static001.geekbang.org/resource/image/a8/85/a880c9cc3b0c20b616c76a852d3c5e85.png?wh=1920x719" alt="图片"></p><p>最后形成的样式如下所示：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">instruction</span><span class="token punctuation">:</span> xxxx</span>
<span class="line"><span class="token key atrule">apis</span><span class="token punctuation">:</span></span>
<span class="line"><span class="token punctuation">-</span> apiProvider：</span>
<span class="line">    <span class="token key atrule">apikey</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">name</span><span class="token punctuation">:</span> key</span>
<span class="line">      <span class="token key atrule">value</span><span class="token punctuation">:</span> xxx</span>
<span class="line">      <span class="token key atrule">in</span><span class="token punctuation">:</span> header</span>
<span class="line">  <span class="token key atrule">api</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">    openapi: 3.1.0</span>
<span class="line">    info: xxx</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设计好具体的格式后，代码就很简单了。定义结构体如下：</p><p><img src="https://static001.geekbang.org/resource/image/92/74/92da391211b7444f937d2e49ed4fc474.png?wh=574x541" alt="图片"></p><p>之后初始化一下结构体，将 YAML 文件从本地加载进来，反序列化到结构体即可，代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">InitConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>models<span class="token punctuation">.</span>Config <span class="token punctuation">{</span></span>
<span class="line">    config <span class="token operator">:=</span> <span class="token function">newSysConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> b <span class="token operator">:=</span> <span class="token function">LoadConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">//读取 system.yaml文件内容</span></span>
<span class="line">        err <span class="token operator">:=</span> yaml<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token comment">//将byte反序列化成结构体</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> config</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="openapi-解析" tabindex="-1"><a class="header-anchor" href="#openapi-解析"><span>OpenAPI 解析</span></a></h3><p>在完成配置文件的导入后，我们就拿到了 OpenAPI 文档。在这里，我就不做 Swagger 到 OpenAPI 的转换了。我们规定用户只能使用 OpenAPI 3.0 及以上版本的格式，低版本的 Swagger 格式不支持。</p><h3 id="结构体定义" tabindex="-1"><a class="header-anchor" href="#结构体定义"><span>结构体定义</span></a></h3><p>OpenAPI 解析的过程，是将 OpenAPI 文档转化成 APIToolBundle 的过程，我们首先需要定义好结构体。根据上节讲过的 OpenAPI 文档的格式，其主要包含 OpenAPI、Info、Servers、Paths、Components 等五个部分。因此我们可以定义结构体如下：</p><p><img src="https://static001.geekbang.org/resource/image/b3/c3/b3ca8524c93e1c9c3bf30973e7aa8ec3.png?wh=801x202" alt="图片"></p><p>Info、Servers 下都是 k-v 形式的参数，使用 map 最合适。Paths 和 Components 稍微复杂一点，是 map 嵌套的形式。在配置导入环节，我们已经得到了字符串格式的 OpenAPI 文档，在这里同样可以利用 YAML 反序列化，将文档的各段注入到结构体中。、</p><p>我们再来看一下 APIToolBundle 的结构体定义。</p><p><img src="https://static001.geekbang.org/resource/image/53/c1/53074aa1fbefc66bab0eeebd4edecec1.png?wh=451x490" alt="图片"></p><p>APIToolBundle 参考 Dify 的设计，需要将 URL、Method、Summary、OperationID、Parameters 拆解出来，一方面需要拼接 ReAct 模板的工具部分，另一方面在后面调用通用 HTTP 方法时也会使用。除此之外，还设计了 OpenAPI 参数，这个参数在上节课讲过，存储的是每一条路由的 Method 所对应的值，目的是在后续做参数解析拼装时，判断参数是 query 参数还是 requestBody 参数。</p><h3 id="解析函数" tabindex="-1"><a class="header-anchor" href="#解析函数"><span>解析函数</span></a></h3><p>清楚结构体功能后，我们来看解析函数。在解析这一部分，其他的常规 k-v 映射都比较简单，在上一节课的原理篇讲过，麻烦的是参数的处理。参数首先分为 parameters 和 requestBody 两种类型，分别针对的是参数在 url 中以及参数在请求体中情况。除此之外，参数还会涉及到公共参数被放置到 Components 的 schema 中，之后用 $ref 去寻址的过程。</p><p>首先看一下 parameters 的处理，我将 parameters 的示例文档和代码都放上，我们对比着看会更加清晰。</p><p>文档：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">parameters:</span>
<span class="line">- name: keywords</span>
<span class="line">  in: query</span>
<span class="line">  description: POI名称，必须是中文</span>
<span class="line">  required: true</span>
<span class="line">  schema:</span>
<span class="line">    type: string</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">if</span> params<span class="token punctuation">,</span> ok <span class="token operator">:=</span> operation<span class="token punctuation">[</span><span class="token string">&quot;parameters&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> param <span class="token operator">:=</span> <span class="token keyword">range</span> params <span class="token punctuation">{</span></span>
<span class="line">        paramMap <span class="token operator">:=</span> param<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        toolParam <span class="token operator">:=</span> models<span class="token punctuation">.</span>ToolParameter<span class="token punctuation">{</span></span>
<span class="line">            Name<span class="token punctuation">:</span>           paramMap<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            Type<span class="token punctuation">:</span>           <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 默认类型</span></span>
<span class="line">            Required<span class="token punctuation">:</span>       paramMap<span class="token punctuation">[</span><span class="token string">&quot;required&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            LLMDescription<span class="token punctuation">:</span> paramMap<span class="token punctuation">[</span><span class="token string">&quot;description&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            Default<span class="token punctuation">:</span>        <span class="token function">getDefault</span><span class="token punctuation">(</span>paramMap<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 类型处理</span></span>
<span class="line">        <span class="token keyword">if</span> typ <span class="token operator">:=</span> <span class="token function">getParameterType</span><span class="token punctuation">(</span>paramMap<span class="token punctuation">)</span><span class="token punctuation">;</span> typ <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">            toolParam<span class="token punctuation">.</span>Type <span class="token operator">=</span> typ</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        parameters <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> toolParam<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码逻辑还是很简单的，就是从 map 中取值，赋值到 ToolParameter 实例的过程，这其中涉及到了比较多的强制类型转换，我是直接就用了，没有做是否存在的验证。但实际上都应该用像第一行代码一样的 if xx,ok 的方式做一下判断，避免因访问一个不存在的地址而出现 panic。</p><p>下面我们再来看一下 requestBody 以及 ref 引用的处理逻辑。</p><p>文档：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">requestBody:</span>
<span class="line">  required: true</span>
<span class="line">  content:</span>
<span class="line">    application/json:</span>
<span class="line">      schema:</span>
<span class="line">        type: object</span>
<span class="line">        required:</span>
<span class="line">          - text</span>
<span class="line">          - target_lang</span>
<span class="line">        properties:</span>
<span class="line">          text:</span>
<span class="line">            $ref: &#39;#/components/schemas/TranslationText&#39;</span>
<span class="line">...</span>
<span class="line">components:</span>
<span class="line">  schemas:</span>
<span class="line">    TranslationText:</span>
<span class="line">      description: |</span>
<span class="line">        Text to be translated. Only UTF-8-encoded plain text is supported. The parameter may be specified</span>
<span class="line">        up to 50 times in a single request. Translations are returned in the same order as they are requested.</span>
<span class="line">      type: array</span>
<span class="line">      maxItems: 50</span>
<span class="line">      items:</span>
<span class="line">        type: string</span>
<span class="line">        example: Hello, World!</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">if</span> requestBody<span class="token punctuation">,</span> ok <span class="token operator">:=</span> operation<span class="token punctuation">[</span><span class="token string">&quot;requestBody&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> content<span class="token punctuation">,</span> ok <span class="token operator">:=</span> requestBody<span class="token punctuation">[</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> contentType <span class="token operator">:=</span> <span class="token keyword">range</span> content <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> bodySchema<span class="token punctuation">,</span> ok <span class="token operator">:=</span> contentType<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;schema&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">                required <span class="token operator">:=</span> bodySchema<span class="token punctuation">[</span><span class="token string">&quot;required&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                properties <span class="token operator">:=</span> bodySchema<span class="token punctuation">[</span><span class="token string">&quot;properties&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">for</span> name<span class="token punctuation">,</span> prop <span class="token operator">:=</span> <span class="token keyword">range</span> properties <span class="token punctuation">{</span></span>
<span class="line">                    propMap <span class="token operator">:=</span> prop<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token comment">// 处理引用，如果有</span></span>
<span class="line">                    <span class="token keyword">if</span> ref<span class="token punctuation">,</span> ok <span class="token operator">:=</span> propMap<span class="token punctuation">[</span><span class="token string">&quot;$ref&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">                        root <span class="token operator">:=</span> openAPI<span class="token punctuation">.</span>Components<span class="token punctuation">[</span><span class="token string">&quot;schemas&quot;</span><span class="token punctuation">]</span></span>
<span class="line">                        segments <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">                        lastSegment <span class="token operator">:=</span> segments<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>segments<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">                        propMap <span class="token operator">=</span> root<span class="token punctuation">[</span>lastSegment<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                    toolParam <span class="token operator">:=</span> models<span class="token punctuation">.</span>ToolParameter<span class="token punctuation">{</span></span>
<span class="line">                        Name<span class="token punctuation">:</span>           name<span class="token punctuation">,</span></span>
<span class="line">                        Type<span class="token punctuation">:</span>           <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 默认类型</span></span>
<span class="line">                        Required<span class="token punctuation">:</span>       <span class="token function">contains</span><span class="token punctuation">(</span>required<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        LLMDescription<span class="token punctuation">:</span> propMap<span class="token punctuation">[</span><span class="token string">&quot;description&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        Default<span class="token punctuation">:</span>        propMap<span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                    <span class="token comment">// 如果参数包含 enum，则添加枚举值</span></span>
<span class="line">                    <span class="token keyword">if</span> enum<span class="token punctuation">,</span> ok <span class="token operator">:=</span> propMap<span class="token punctuation">[</span><span class="token string">&quot;enum&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">var</span> enumValues <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line">                        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> enum <span class="token punctuation">{</span></span>
<span class="line">                            enumValues <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>enumValues<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">}</span></span>
<span class="line">                        toolParam<span class="token punctuation">.</span>Enum <span class="token operator">=</span> enumValues</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                    <span class="token comment">// 类型处理</span></span>
<span class="line">                    <span class="token keyword">if</span> typ <span class="token operator">:=</span> <span class="token function">getParameterType</span><span class="token punctuation">(</span>propMap<span class="token punctuation">)</span><span class="token punctuation">;</span> typ <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">                        toolParam<span class="token punctuation">.</span>Type <span class="token operator">=</span> typ</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                    parameters <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> toolParam<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码首先通过 map 进行一层层地拆解，得到 schema，并进一步得到 properties。之后便开始遍历 properties，如果包含 $ref 字段，则首先通过 strings.Split(ref, &quot;/&quot;)[1:] 将 #/components/schemas/TranslationText 切分成数组，即[componentes schemas TranslationText]，这样便可以取数组的最后一个元素的方式拿到参数的名字。之后再通过 openAPI.Components[&quot;schemas&quot;][lastSegment] 得到参数的文档，将其替换掉 $ref。最终文档会变成如下形式：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">...</span>
<span class="line">properties:</span>
<span class="line">  text:</span>
<span class="line">    TranslationText:</span>
<span class="line">      description: |</span>
<span class="line">        Text to be translated. Only UTF-8-encoded plain text is supported. The parameter may be specified</span>
<span class="line">        up to 50 times in a single request. Translations are returned in the same order as they are requested.</span>
<span class="line">      type: array</span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的部分就很简单了，代码类似上面的 parameters 的处理，也是通过从 map 中取值并赋值 ToolParameter 的方式完成拆解。</p><h2 id="组装工具" tabindex="-1"><a class="header-anchor" href="#组装工具"><span>组装工具</span></a></h2><p>在得到 APIToolBundle 后，便可以组装 tools 描述，并测试一下填充到 ReAct 模板。在之前的课程中，我们组装 tools 时会用到三件套，即 name、description、param，其中 param 会用 json 格式进行描述。Dify 也差不多，只不过比我们课程中的还要再丰富一点，我们就借鉴一下 Dify 的格式。定义结构体如下：</p><p><img src="https://static001.geekbang.org/resource/image/57/55/574561aef8abd9f86a9612a98026f155.png?wh=384x518" alt="图片"></p><p>三件套是一样的，区别在于 Dify 增加了 Required 字段，用来告诉大模型哪个参数是必填的。参数描述中也增加了 Enum 枚举字段，便于处理带可选值的参数的情况。</p><p>代码非常简单，就是从 APIToolBundle 取相关值并复制到上述结构体中即可。在这就不再贴代码演示了，你可在我的 Github 上查看完整代码。最后，将结构体进行 JSON 序列化，转成 JSON 字符串。使用配置导入小节讲解的 template 赋值语法填充到 ReAct 模板即可。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><p>我找了一个 DeepL 翻译的 OpenAPI 例子来测试一下效果。YAML 配置文件如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">instruction: 你是一个精通多国语言的翻译专家，可以翻译任何文本。</span>
<span class="line">apis:</span>
<span class="line">- apiProvider:</span>
<span class="line">    apiKey:</span>
<span class="line">      name: DeepL-Auth-Key</span>
<span class="line">      value: xxxxxxxxxxxxxxxxxxx</span>
<span class="line">      in: header</span>
<span class="line">  api: |</span>
<span class="line">    openapi: 3.1.0</span>
<span class="line">    info:</span>
<span class="line">      title: DeepL API Documentation</span>
<span class="line">      description: The DeepL API provides programmatic access to DeepL’s machine translation technology.</span>
<span class="line">      version: v1.0.0</span>
<span class="line">    servers:</span>
<span class="line">      - url: https://api-free.deepl.com/v2</span>
<span class="line">    paths:</span>
<span class="line">      /translate:</span>
<span class="line">        post:</span>
<span class="line">          description: Request Translation</span>
<span class="line">          operationId: translateText</span>
<span class="line">          requestBody:</span>
<span class="line">            required: true</span>
<span class="line">            content:</span>
<span class="line">              application/json:</span>
<span class="line">                schema:</span>
<span class="line">                  type: object</span>
<span class="line">                  required:</span>
<span class="line">                    - text</span>
<span class="line">                    - target_lang</span>
<span class="line">                  properties:</span>
<span class="line">                    text:</span>
<span class="line">                      $ref: &#39;#/components/schemas/TranslationText&#39;</span>
<span class="line">                    target_lang:</span>
<span class="line">                      $ref: &#39;#/components/schemas/LanguageCode&#39;</span>
<span class="line">          responses:</span>
<span class="line">            &#39;200&#39;:</span>
<span class="line">              description: Successful response</span>
<span class="line">    components:</span>
<span class="line">      schemas:</span>
<span class="line">        TranslationText:</span>
<span class="line">          description: |</span>
<span class="line">            Text to be translated. Only UTF-8-encoded plain text is supported. The parameter may be specified</span>
<span class="line">            up to 50 times in a single request. Translations are returned in the same order as they are requested.</span>
<span class="line">          type: array</span>
<span class="line">          maxItems: 50</span>
<span class="line">          items:</span>
<span class="line">            type: string</span>
<span class="line">            example: Hello, World!</span>
<span class="line">        LanguageCode:</span>
<span class="line">          description: The language into which the text should be translated.</span>
<span class="line">          type: string</span>
<span class="line">          enum:</span>
<span class="line">            - BG</span>
<span class="line">            ...</span>
<span class="line">            - ZH-HANS</span>
<span class="line">          example: DE</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析并注入 ReAct 模板后的效果是这样的：</p><p><img src="https://static001.geekbang.org/resource/image/b4/f5/b49f4c09c7c57025b5a2561cf5c40ff5.png?wh=1291x529" alt="图片"></p><p>可以看到解析得没有问题。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本节课，我们开始用 Go 语言仿照 Dify Agent 的思路手撸可定制 API Agent。由于代码量以及细节比较多，因此我拆分成了两个课时。</p><p>本课时我讲解了如何设计本地 YAML 配置文件的方式来模仿 Dify 前端配置工具参数的过程，以及用 Go 模板语法实现 python 模板的同款效果，从而让 ReAct 模板变得直观，易扩展。此外我还讲解了 OpenAPI 文档的解析，这一部分在 Python 中由于有字段数据类型，因此非常容易实现，但在 Go 语言中只能使用大量的 map[string]interface{} 来进行模拟。最后，我们组装了工具并映射到 ReAct 模板中做了测试。本节课的代码，我已经上传到了我的 <a href="https://github.com/xingyunyang01/Geek/tree/main/agent" target="_blank" rel="noopener noreferrer">Github</a> 上，你可下载我的源码了解更多的实现细节并做测试。</p><p>在下一节课，我会继续带你完成 output_parser，通用 HTTP 方法，以及 Agent 多轮对话逻辑的代码编写，最后我们用 gin 进行封装，模拟一下 Dify 通过 API 访问 Agent 的方式。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>你可以思考一下 output_parser 部分的代码该如何写，用非流式模式实现即可。在下一节课，我会放出代码并做讲解。</p>`,65))])}const r=p(c,[["render",o]]),d=JSON.parse('{"path":"/3.tech/84.AIAgent/16.%E7%94%A8Go%E8%AF%AD%E8%A8%80%E6%89%8B%E5%86%99%E5%8F%AF%E5%AE%9A%E5%88%B6API%20Agent%EF%BC%88%E4%B8%8A%EF%BC%89.html","title":"用 Go 语言手写可定制 API Agent（上）","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"ReAct 模板","slug":"react-模板","link":"#react-模板","children":[]},{"level":2,"title":"OpenAPI 文档解析","slug":"openapi-文档解析","link":"#openapi-文档解析","children":[{"level":3,"title":"配置导入","slug":"配置导入","link":"#配置导入","children":[]},{"level":3,"title":"OpenAPI 解析","slug":"openapi-解析","link":"#openapi-解析","children":[]},{"level":3,"title":"结构体定义","slug":"结构体定义","link":"#结构体定义","children":[]},{"level":3,"title":"解析函数","slug":"解析函数","link":"#解析函数","children":[]}]},{"level":2,"title":"组装工具","slug":"组装工具","link":"#组装工具","children":[]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/16.用Go语言手写可定制API Agent（上）.md"}');export{r as comp,d as data};
