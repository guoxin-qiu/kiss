import{_ as l,c as e,b as a,o as t}from"./app-C01vnHKY.js";const n={};function s(o,i){return t(),e("div",null,i[0]||(i[0]=[a('<h1 id="信息安全" tabindex="-1"><a class="header-anchor" href="#信息安全"><span>信息安全</span></a></h1><h3 id="加强信息安全管理的一些建议" tabindex="-1"><a class="header-anchor" href="#加强信息安全管理的一些建议"><span>加强信息安全管理的一些建议</span></a></h3><ul><li>制定贴合项目的《信息安全管理制度》，以公文形式通知到每位项目组成员</li><li>制定《信息安全事件问责机制》，项目组成员及相关负责人签字</li><li>强化制度的学习与贯彻，对项目组成员进行专项信息安全培训，内部考试通过方可上岗</li><li>每季度组织针对业界新出现的信息安全问题的学习</li><li>成立信息安全审查小组，制定《信息安全审查方案》，按季度对项目组进行全面信息安全审查，正式方案包括但不限于以下：</li><li>组织项目成员访谈，协助排查信息泄露隐患</li><li>登记项目成员 GitHub，码云个人账号，定期巡检</li><li>审查项目文档是否存在密钥泄密风险</li><li>审查保存在电脑上的密钥是否用加密软件进行二次加密</li><li>确保所有的密钥或敏感信息都只能经过公司邮件发送，不允许经过即时通讯软件发送敏感信息</li><li>审查是否有违规使用公网网盘服务存储文件的情况</li></ul><h2 id="安全编码练习" tabindex="-1"><a class="header-anchor" href="#安全编码练习"><span>安全编码练习</span></a></h2><h3 id="认证安全设计" tabindex="-1"><a class="header-anchor" href="#认证安全设计"><span>认证安全设计</span></a></h3><ul><li>应用程序应锁定 90 天内没有登录的账号</li><li>对于面向内部用户的应用系统，应尽量使用安全的身份认证服务，如： <ul><li>使用 LDAP 企业目录或微软 AD</li><li>使用基于 Keberos 的 windows 身份认证机制</li><li>使用 SAP 单点登录</li><li>对于外部托管的应用系统，可以使用统一鉴权</li></ul></li><li>针对面向互联网的应用，在关键页面包括用户登录、用户注册、忘记密码、短信验证码发送等必须设置图形验证码，防止暴力破解攻击。验证码应符合以下安全设计要求： <ul><li>要求有背景干扰，背景干扰元素的颜色、位置、数量要求随机变化</li><li>验证码字符串要求是随机生成，生成的随机数必须是安全的</li><li>验证码模块生成的随机数不能出现在客户端的静态页面</li><li>验证码在一次使用后要求立即失效，新的请求需要重新生成验证码</li></ul></li><li>用户更改密码的功能应禁止自动填充用户账号功能</li><li>应用程序登录功能应尽量实施多因素认证的方式，如使用短信验证、PingID、Token 令牌验证等。 根据应用中存储的数据类型属于以下情况则需要多因素认证： <ul><li>存有 Public 数据的应用系统: 应至少对应用管理员及特权账号实施双因素认证方式</li><li>存有 Highly Restricted 数据的应用系统: 应对所有类型的账号实施双因素认证方式</li><li>存有 Highly Sensitive PII 数据的应用系统: 应对所有类型的账号实施双因素认证方式</li><li>另外所有管理员（包括 server、database、application 层面）都需要通过多因素认证</li></ul></li><li>应合理设计用户注册功能、忘记密码功能、修改密码功能以及登录功能的回显内容，防止系统遭受用户枚 举攻击。例如，在用户登录功能中，在用户输入了正确或错误的账户时，应显示一致的提示，例如“用户 名或密码不正确”</li></ul><h3 id="密码安全设计" tabindex="-1"><a class="header-anchor" href="#密码安全设计"><span>密码安全设计</span></a></h3><ul><li>所有系统账号、业务账号、用户账号的密码，都应加密存储，加密方法应采用加盐哈希（Salted Hash）法增加密码破解的难度，例如采用 BCrypt 或者 PBKDF2 加密函数，同时密码信息应和系统数据分 开存储。 推荐的不可逆加密算法： SHA256、SHA384、SHA512，HMAC-SHA256、HMAC-SHA384、HMACSHA512</li><li>应用系统用户密码至少包含大写字母、小写字母、阿拉伯数字、特殊字符；密码长度至少 8 位；普通用 户的密码应至少每 100 天修改一次；系统管理员账号、特权账号号应至少每 45 天修改一次；应提前 5 到 10 天提醒用户密码即将过期; 禁止用户设置与账号相同的密码。</li><li>应用系统应该设置密码修改功能，并满足： <ul><li>在修改自己口令时必须验证旧口令</li><li>新密码必须输入两次</li><li>新密码修改必须要满足密码强度策略</li><li>应记录 8 次密码历史，并不允许用户设置 8 次以内的重复密码</li><li>不允许修改除自身账号以外的账号和口令（管理员除外）</li></ul></li><li>应用系统用户登录须有登录失败限制： <ul><li>针对面向消费者的应用，当用户登录失败 10 次后锁定其账号；一小时内登录失败超过 5 次后锁定其账号</li><li>针对其他应用，建议 5 次登录失败后锁定其账号 如果不设置登录失败锁定，可选择：在登录失败的前提下，设置下次允许输入口令的间隔时间加倍，采用这种方式，用户可以不设置自动锁定</li></ul></li><li>User ID、账号等信息不能在屏幕中明文打印，除非业务或终端用户交互需要； 密码、PII 等敏感信息不能在屏幕中明文打印（操作界面中的输入口令可不显示或用*代替），包括在终 端上打印或存储在日志中时也不能明文显示</li><li>新账号生成时，系统应生成一个随机的并且符合密码策略的密码，并在客户第一次登录时提醒并强制用户 修改</li></ul><h3 id="会话管理安全设计" tabindex="-1"><a class="header-anchor" href="#会话管理安全设计"><span>会话管理安全设计</span></a></h3><ul><li>应用程序的用户会话非活动超时时间应该设置为 60 分钟，会话最长存活时间应该设置为 12 小时；面向消 费者且涉及敏感交易或 PII 的互联网应用，用户会话非活动超时时间时间应为 30 分钟。 针对其它系统也必须设置最大会话超时时间，并且重新建立连接时，需要运维用户重新输入登录凭据。以 下为需要满足的项目: <ul><li>Server: twenty (20) Minutes</li><li>Workstation: ten (10) Minutes</li><li>Mobile Device: thirty (30) Minutes</li><li>Dynamic Host Configuration Protocol (DHCP): seven (7)days</li><li>Virtual Private Network (VPN): thirty (30) minutes</li><li>For terminals or workstations in high-risk locations (e.g., public areas) or sensitive systems (i.e. contains cardholder information), the time-out delay must be set to a maximum of ten (10) minutes</li></ul></li><li>认证通过后，必须重写 session，以防止会话固定（session fixation）漏洞。同时，应保证 cookie 的随机性，防止攻击者预测 cookie 值。用户点击注销功能时，系统 必须使会话 session 失效</li><li>应用系统应保证所有 cookie 不存在敏感信息，例如用户账号密码信息、PII 信息、交易信息等</li><li>应用系统应只允许同一个用户只能保持一个活动的会话</li><li>针对 Cookie 中的 Session ID，应设置 httponly 及 secure 标记</li></ul><h3 id="访问控制安全设计" tabindex="-1"><a class="header-anchor" href="#访问控制安全设计"><span>访问控制安全设计</span></a></h3><ul><li><strong>防止强制访问</strong>：除公有资源外，默认情况下拒绝访问。同时应对用户请求的内容进行合法性校验，防止安 全校验和控制被绕过。例如，非法用户可能通过直接输入 URL 强制页面访问(forceful browsing)的方式，绕过应用程序的鉴权机制，例如低权限用户直接访问高权限用户的功能页面</li><li><strong>防止绕过业务流程节点</strong>：在服务器端对业务流程进行必要的流程安全控制，保证流程衔接正确，防止关键鉴别步骤被绕过、重复、乱序。例如，如未对业务流程进行安全控制，可能会导致的任意用户重置密码的漏洞</li><li><strong>防止越权查询</strong>：应对已登录用户的请求数据进行确认，校验请求是否合法，避免其他用户通过提交或修改 参数的方式绕过权限限制，获取其他用户的敏感信息，出现越权操作</li><li>对于敏感的操作，如新增、修改、删除用户，商品交易等，必须校验请求来源（通过验证 http 请求的 referer 或者通过页面 token 等方式），防止 CSRF（跨站请求伪造）等漏洞的产生</li></ul><h3 id="隐私保护安全设计" tabindex="-1"><a class="header-anchor" href="#隐私保护安全设计"><span>隐私保护安全设计</span></a></h3><ul><li>在客户端或浏览器展示数据之前(包括在屏幕上显示以及打印)，在非业务强制需要的情况下，使用特殊字 符取代部分或全部高度敏感数据（包括借记卡信息、身份证、手机号等），尤其对于信用卡系统，最多只 允许显示前 6 个数字和后 4 个数字，其余数字应使用 * 或其他字符代替</li><li>涉及个人资料或者敏感个人资料的应用，应对敏感个人资料（如生日、手机号、地址、指纹等）进行加密 存储，并至少使用 AES256 以上的加密算法进行加密存储</li><li>涉及个人资料或者敏感个人资料的应用，须有隐私与安全政策声明</li><li>在展现给用户的隐私条款中，明确说明“收集、使用用户个人信息的使用的目的、方式和范围，经用户同 意，并遵循合法、正当、必要的原则”</li></ul><h3 id="通信安全设计" tabindex="-1"><a class="header-anchor" href="#通信安全设计"><span>通信安全设计</span></a></h3><ul><li>涉及到以下场景的数据传输必须采用 https 方式进行保护： <ul><li>应用系统需要在互联网上通过接口的方式与其他系统进行数据交互</li><li>用户在注册、登录、信息修改、密码修改、交易等环节的敏感数据传输</li></ul></li><li>使用 https 的应用原则如下： <ul><li>对基于云计算解决方案的应用，TLS 必须使用 v1.2 及后期版本标准</li><li>对于其他类型的应用，TLS 必须使用 v1.1 及后期版本标准；</li><li>不得使用已被证实不安全的 SSL v3 协议</li></ul></li><li>所有的 SSL/TLS 证书，都应统一使用合法机构颁发的数字证书</li><li>敏感个人信息或敏感数据传送出公司前，包括电子传送（电子消息，例如 FTP、API 等方式）应对数据采用 AES-256 或以上的加密强度进行加密处理，如 FTP 站点需要使用 SFTP 进行加密传输，API 接口、网页使用 TLS1. 2 版本以上的协议进行加密传输</li><li>涉及敏感个人资料或其他敏感数据的数据传递，禁止使用 GET 进行传递，应在 POST 请求中的消息主体进行传递。如果是使用 servlet 处理提交的表单数据，那么不在 doGet 方法中处理，只在 doPost 方法处理</li></ul><h3 id="监控、设计安全设计" tabindex="-1"><a class="header-anchor" href="#监控、设计安全设计"><span>监控、设计安全设计</span></a></h3><ul><li>对应用系统的安全日志应有日志记录，安全日志包括： <ul><li>用户登录、注销的操作</li><li>添加、删除、修改用户信息的操作</li><li>对用户进行授权、取消权限、修改用户口令等</li></ul></li><li>对应用系统的操作日志应有日志记录，操作日志包括： <ul><li>对业务系统配置参数的修改</li><li>对重要业务数据的创建、删除、修改、查询等</li></ul></li><li>严格限制日志文件及其存放目录的访问权限，禁止删除和修改日志信息： <ul><li>只有 Web 应用程序的管理员才能查询数据库表形式或文件形式的安全日志；除数据库超级管理员外， 只有应用程序连接数据库的帐号可以查询（select）及插入（insert）安全日志表</li><li>除操作系统超级管理员外，只有应用程序的运行帐户才能读、写文件形式的安全日志（但不允许删除 ）</li></ul></li><li>应用系统的日志记录应至少包含以下字段：事件发生的时间、事件类型、客户端 IP、客户端机器名、当前 用户的标识、受影响的个体（数据、资源）、成功或失败标识、启动该事件的进程标识以及对该事件的详 细描述等</li></ul><h3 id="密钥管理" tabindex="-1"><a class="header-anchor" href="#密钥管理"><span>密钥管理</span></a></h3><ul><li>为保护加密秘钥，加密秘钥应该设置过期时间，或周期性重置，参考标准如下： <ul><li>传输通道使用的加密秘钥，应当在每次新会话建立时都应该重置（最长的会话时间不应该超过 24 小时）</li><li>其他与会话无关的加密秘钥，应每年都重置一次</li></ul></li><li>对 API 接口的调用必须进行认证和鉴权</li><li>对于安全性要求不高、只向同一信任域内其他主机开放的 API 接口，可以通过简单的 IP 认证来实现接口的认证（只有服务器端指定 IP 地址的客户端才允许调用，IP 地址可配置）</li><li>针对其他 API 接口，可以通过在消息头中增加用户名和口令，作为认证凭据</li><li>对 API 和控制器的访问进行速率限制，以最大限度地降低自动化攻击工具的危害</li></ul><h3 id="输入-输出合法性" tabindex="-1"><a class="header-anchor" href="#输入-输出合法性"><span>输入 / 输出合法性</span></a></h3><ul><li>应用程序出现异常时（例如错误 500 的页面），禁止将数据库版本、数据库结构、操作系统版本、堆栈跟 踪、文件名和路径信息、SQL 查询字符串等对攻击者有用的信息返回给客户端。应重定向到一个统一、默认的错误提示页面，进行信息过滤</li><li>执行完整性检查，如：任何序列化对象的数字签名，以防止恶意对象创建或数据篡改</li><li>在创建对象之前强制执行严格的类型约束，因为代码通常被期望成一组可定义的类。绕过这种技术的方法已经被证明，所以完全依赖于它是不可取的</li><li>如果可能，隔离运行那些在低特权环境中反序列化的代码</li><li>记录反序列化的例外情况和失败信息，如：传入的类型不是预期的类型，或者反序列处理引发的例外情况</li><li>限制或监视来自于容器或服务器传入和传出的反序列化网络连接</li><li>监控反序列化，当用户持续进行反序列化时，对用户进行警告</li><li>当应用系统使用使用 XML 处理器时，应使用如下设置，以防止 XXE（XML 实体调用攻击）： <ul><li>尽可能使用简单的数据格式（如：JSON），避免对敏感数据进行序列化</li><li>及时修复或更新应用程序或底层操作系统使用的所有 XML 处理器和库。同时，通过依赖项检测，将 SOAP 更新到 1.2 版本或更高版本</li><li>参考《OWASP Cheat Sheet &#39;XXE Prevention&#39;》，在应用程序的所有 XML 解析器中禁用 XML 外部实体和 DTD 进程</li><li>在服务器端实施积极的（“白名单”）输入验证、过滤和清理，以防止在 XML 文档、标题或节点中出现恶意数据</li><li>验证 XML 或 XSL 文件上传功能是否使用 XSD 验证或其他类似验证方法来验证上传的 XML 文件</li><li>尽管在许多集成环境中，手动代码审查是大型、复杂应用程序的最佳选择，但是 SAST 工具可以检测源代码中的 XXE 漏洞</li></ul></li><li>用户的所有输入都必须在服务端进行校验，具体的校验条件可参考如下： <ul><li>对于只允许某些特定字符输入，必须使用白名单进行输入校验</li><li>对于不能限制输入范围的，应过滤特殊字符，包括&lt;、&gt;、=、* 等，以及回车符、换行符等（CR = %0d = \\r ，LF = %0a = \\n）</li><li>限制输入数据的长度</li><li>使用预编译的语句类型化 SQL 参数防止 SQL 注入</li></ul></li><li>对所有不可信的 HTTP 请求数据进行恰当的转义，特别是对特殊字符包括 &amp; &lt; &gt; ” ’ ( )%+- 进行转义</li><li>数据在输出到客户端前必须进行 HTML 编码，特别是对特殊字符包括 &amp; &lt; &gt; ” ’ ( )%+- 进行编码，防止跨站脚本攻击</li><li>应对所有重要资产信息进行合理管理，防止出现源代码泄露、系统路径泄露、内网 IP 泄露、内部邮箱泄露 等情况</li><li>当涉及文件上传功能时，应实现以下安全需求： <ul><li>文件上传后须随机改名</li><li>文件上传的目录权限设置为不可执行</li><li>白名单限制文件上传和文件下载类型</li><li>对文件上传的大小进行限制</li></ul></li></ul><h3 id="应用部署-基础架构安全" tabindex="-1"><a class="header-anchor" href="#应用部署-基础架构安全"><span>应用部署 / 基础架构安全</span></a></h3><ul><li>针对需要对互联网开放访问权限的应用系统，应通过防火墙使用白名单的方式，只允许必须的端口开放互 联网访问</li><li>在条件允许的情况下，应尽可能地保证 Web 服务器的独立性，Web 服务与应用服务器、数据库服务器应部署在不同的主机上，并确保 Web 服务器、应用服务器以及数据库服务器之间的网络访问限制到 IP 与端口级别</li><li>Web 应用根目录部署在非系统目录</li><li>应避免在应用程序的 Web 目录存储应用配置文件，以防止可能出现的服务器配置漏洞导致配置文件被下载</li><li>应用系统的中间件在部署过程中应禁止使用默认的账号密码</li><li>应使用专用的服务账户启动 Web 进程，禁止使用特权账户（例如 root，administrator），并限制 Web 系统启动用户的权限</li><li>新的应用程序上线，针对新的应用程序所涉及到要连接的数据库，必须创建相应的数据库帐号，并授予必 需的数据库权限。不能使用 “sa”、“root” 等管理帐号或高级别权限帐号</li></ul>',24)]))}const u=l(n,[["render",s]]),h=JSON.parse('{"path":"/3.tech/01.tech-arch/information-security.html","title":"信息安全","lang":"zh-cn","frontmatter":{},"headers":[{"level":3,"title":"加强信息安全管理的一些建议","slug":"加强信息安全管理的一些建议","link":"#加强信息安全管理的一些建议","children":[]},{"level":2,"title":"安全编码练习","slug":"安全编码练习","link":"#安全编码练习","children":[{"level":3,"title":"认证安全设计","slug":"认证安全设计","link":"#认证安全设计","children":[]},{"level":3,"title":"密码安全设计","slug":"密码安全设计","link":"#密码安全设计","children":[]},{"level":3,"title":"会话管理安全设计","slug":"会话管理安全设计","link":"#会话管理安全设计","children":[]},{"level":3,"title":"访问控制安全设计","slug":"访问控制安全设计","link":"#访问控制安全设计","children":[]},{"level":3,"title":"隐私保护安全设计","slug":"隐私保护安全设计","link":"#隐私保护安全设计","children":[]},{"level":3,"title":"通信安全设计","slug":"通信安全设计","link":"#通信安全设计","children":[]},{"level":3,"title":"监控、设计安全设计","slug":"监控、设计安全设计","link":"#监控、设计安全设计","children":[]},{"level":3,"title":"密钥管理","slug":"密钥管理","link":"#密钥管理","children":[]},{"level":3,"title":"输入 / 输出合法性","slug":"输入-输出合法性","link":"#输入-输出合法性","children":[]},{"level":3,"title":"应用部署 / 基础架构安全","slug":"应用部署-基础架构安全","link":"#应用部署-基础架构安全","children":[]}]}],"git":{"updatedTime":1745032055000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":5,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"a2b6e78156eb7f1fed6ecb0952cc98c6b90aa9d3","time":1745032055000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"change hierarchy"},{"hash":"cf1a535ce24165a7f8da8bf85c1c9f2de88d6068","time":1692634731000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: change the groups"},{"hash":"24795fa27668d9eb86a60f67b09182b15314e9bc","time":1682330132000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"chore: structure adjust big big"},{"hash":"6c5b730e5acb1ab8dee133ad8856957269916d1d","time":1653878999000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"chore: change hierarchical structure"},{"hash":"f84a641ec709f6a3483190ecad67b877d5c64fb7","time":1651105335000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"chore: init"}]},"filePathRelative":"3.tech/01.tech-arch/information-security.md"}');export{u as comp,h as data};
