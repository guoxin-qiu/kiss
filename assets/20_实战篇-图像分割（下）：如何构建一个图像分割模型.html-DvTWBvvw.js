import{_ as s,c as a,b as p,o as e}from"./app-C01vnHKY.js";const t={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="实战篇-图像分割-下-如何构建一个图像分割模型" tabindex="-1"><a class="header-anchor" href="#实战篇-图像分割-下-如何构建一个图像分割模型"><span>实战篇-图像分割（下）：如何构建一个图像分割模型</span></a></h1><p>在上一节课中，我们掌握了图像分割的理论知识，你是不是已经迫不及待要上手体验一下，找找手感了呢？</p><p>今天我们就从头开始，来完成一个图像分割项目。项目的内容是，对图片中的小猫进行语义分割。为了实现这个项目，我会引入一个简单但实用的网络结构：UNet。通过这节课的学习，你不但能再次体验一下完整机器学习的模型实现过程，还能实际训练一个语义分割模型。</p><p>课程代码你可以从<a href="https://github.com/syuu1987/geekTime-semantic-segmentation/tree/main" target="_blank" rel="noopener noreferrer">这里</a>下载。</p><h2 id="数据部分" tabindex="-1"><a class="header-anchor" href="#数据部分"><span>数据部分</span></a></h2><p>我们还是从机器学习开发三件套：数据、训练、评估说起。首先是数据准备部分，我们先对训练数据进行标记，然后完成数据读取工作。</p><h3 id="分割图像的标记" tabindex="-1"><a class="header-anchor" href="#分割图像的标记"><span>分割图像的标记</span></a></h3><p>之前也提到过，图像分割的准备相比图像分类的准备更加复杂。那我们如何标记语义分割所需要的图片呢？在图像分割中，我们使用的每张图片都要有一张与之对应的 Mask，如下所示：</p><p><img src="https://static001.geekbang.org/resource/image/c2/db/c258c4f2ffd1f819c662aa1e9f6a8cdb.jpg?wh=1024x640" alt="图片"><img src="https://static001.geekbang.org/resource/image/1a/a0/1a35623ceccb0750cd8058568d847fa0.png?wh=1024x640" alt="图片"></p><p>上节课我们说过，Mask 就是含有像素类别的特征图。结合这里的示例图片，我们可以看到，Mask 就是原图所对应的一张图片，它的每个位置都记录着原图每个位置对应的像素类别。对于 Mask 的标记，我们需要使用到 Labelme 工具。</p><p>标记的方法一共包括七步，我们挨个看一下。</p><p>第一步，下载安装<a href="https://github.com/wkentaro/labelme" target="_blank" rel="noopener noreferrer">Labelme</a>。我们按照 Github 中的安装方式进行安装即可。如果安装比较慢的话，你可以使用国内的镜像（例如清华的）进行安装。</p><p>第二步，我们要将需要标记的图⽚放到⼀个⽂件夹中。这里我是将所有猫的图片放入到 cats 文件夹中了。</p><p><img src="https://static001.geekbang.org/resource/image/f3/04/f3c8cc99959c74f363ec290558a51d04.png?wh=1722x882" alt="图片"></p><p>第三步，我们事先准备好⼀个 label.txt 的⽂件，⾥⾯每⼀⾏写好的需要标记的类别。我的 label.txt 如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">__ignore__</span>
<span class="line">_background_</span>
<span class="line">cat</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我要提醒你的是，前两行最好这么写。不这样写的话，使用 label2voc.py 转换就会报错，但 label2voc.py 不是唯一的数据转换方式（还可以使用 labelme_json_to_dataset，但推荐你使用 label2voc.py）。从第三行开始，表示要标记的类别。</p><p>第四步，执行后面的这条命令，就会自动启动 Labelme。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">labelme <span class="token operator">-</span><span class="token operator">-</span>labels labels<span class="token punctuation">.</span>txt <span class="token operator">-</span><span class="token operator">-</span>nodata</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第五步，点我们击左侧的 Open Dir，选择第二步中的文件夹，就会自动导入需要标记的图片。在右下角选择需要标记的文件后，会自动显示出来，如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/0d/81/0d37591417e44d51a21bac11f409c381.png?wh=1780x1470" alt="图片"></p><p>第六步：点击左侧的 Create Polygons。就可以开始标注了。标记的方式就是将小猫沿着它的边界给圈出来，当形成一个闭环的时候，Labelme 会自动提示你输入类别，我们选择 cat 类即可。</p><p>标记成功后，结果如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/88/y6/888dc5b576ccc9629cd1f3fd2d9cbyy6.png?wh=1676x1438" alt="图片"></p><p>当标记完成后，我们需要保存一下，保存之后会生成标记好的 json 文件。如下所示：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">fangyuan@geektime data $ ls cats</span>
<span class="line"><span class="token number">1</span><span class="token punctuation">.</span>jpeg  <span class="token number">1</span><span class="token punctuation">.</span>json  <span class="token number">10</span><span class="token punctuation">.</span>jpeg <span class="token number">10</span><span class="token punctuation">.</span>json <span class="token number">2</span><span class="token punctuation">.</span>jpeg  <span class="token number">3</span><span class="token punctuation">.</span>jpeg  <span class="token number">4</span><span class="token punctuation">.</span>jpeg  <span class="token number">4</span><span class="token punctuation">.</span>json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>第七步，执行下面的代码，将标记好的数据转换成 Mask。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">python label2voc<span class="token punctuation">.</span>py cats cats_output <span class="token operator">-</span><span class="token operator">-</span>label label<span class="token punctuation">.</span>txt </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码里用到的 label2voc.py，你可以通过后面这个链接获取它：<a href="https://github.com/wkentaro/labelme/blob/main/examples/semantic_segmentation/labelme2voc.py" target="_blank" rel="noopener noreferrer">https://github.com/wkentaro/labelme/blob/main/examples/semantic_segmentation/labelme2voc.py</a>。</p><p>其中，cats 为标记好的数据，cats_output 为输出文件夹。在 cats_output 下会自动生成 4 个文件夹，我们只需要两个文件夹，分别是 JPEGImages（训练原图）与 SegmentationClassPNG（转换后的 Mask）。</p><p>到此为止，我们的数据就准备好了。我一共标记了 8 张图片，如下所示。当然了，在实际的项目中需要大量标记好的图片，这里主要是为了方便演示。</p><p><img src="https://static001.geekbang.org/resource/image/7c/1d/7ca1ecafd3ce893610c5eb89yy7ca51d.png?wh=686x285" alt="图片"></p><p><img src="https://static001.geekbang.org/resource/image/53/67/53e088956a41de56ea1010af8a2a6d67.png?wh=703x324" alt="图片"></p><p>到此为止，标记工作宣告完成。</p><h3 id="数据读取" tabindex="-1"><a class="header-anchor" href="#数据读取"><span>数据读取</span></a></h3><p>完成了标记工作之后，我们就要用 PyTorch 把这些数据给读入进来了，我们把数据相关的写在 dataset.py 中。具体还是和之前讲的一样，要继承 Dataset 类，然后实现<strong>init</strong>、<strong>len</strong>和<strong>getitem</strong>方法。</p><p>dataset.py 的代码如下所示，我已经在代码中写好注释了，相信结合注释你很容易就能领会意思。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset</span>
<span class="line"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">CatSegmentationDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 模型输入是3通道数据</span></span>
<span class="line">    in_channels <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line">    <span class="token comment"># 模型输出是1通道数据</span></span>
<span class="line">    out_channels <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span></span>
<span class="line">        self<span class="token punctuation">,</span></span>
<span class="line">        images_dir<span class="token punctuation">,</span></span>
<span class="line">        image_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Reading images...&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 原图所在的位置</span></span>
<span class="line">        image_root_path <span class="token operator">=</span> images_dir <span class="token operator">+</span> os<span class="token punctuation">.</span>sep <span class="token operator">+</span> <span class="token string">&#39;JPEGImages&#39;</span></span>
<span class="line">        <span class="token comment"># Mask所在的位置</span></span>
<span class="line">        mask_root_path <span class="token operator">=</span> images_dir <span class="token operator">+</span> os<span class="token punctuation">.</span>sep <span class="token operator">+</span> <span class="token string">&#39;SegmentationClassPNG&#39;</span></span>
<span class="line">        <span class="token comment"># 将图片与Mask读入后，分别存在image_slices与mask_slices中</span></span>
<span class="line">        self<span class="token punctuation">.</span>image_slices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        self<span class="token punctuation">.</span>mask_slices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">for</span> im_name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>image_root_path<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment"># 原图与mask的名字是相同的，只不过是后缀不一样</span></span>
<span class="line">            mask_name <span class="token operator">=</span> im_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;.png&#39;</span></span>
<span class="line"></span>
<span class="line">            image_path <span class="token operator">=</span> image_root_path <span class="token operator">+</span> os<span class="token punctuation">.</span>sep <span class="token operator">+</span> im_name</span>
<span class="line">            mask_path <span class="token operator">=</span> mask_root_path <span class="token operator">+</span> os<span class="token punctuation">.</span>sep <span class="token operator">+</span> mask_name</span>
<span class="line"></span>
<span class="line">            im <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>image_size<span class="token punctuation">,</span> image_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            mask <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>mask_path<span class="token punctuation">)</span><span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>image_size<span class="token punctuation">,</span> image_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            self<span class="token punctuation">.</span>image_slices<span class="token punctuation">.</span>append<span class="token punctuation">(</span>im <span class="token operator">/</span> <span class="token number">255.</span><span class="token punctuation">)</span></span>
<span class="line">            self<span class="token punctuation">.</span>mask_slices<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mask<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>image_slices<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">        image <span class="token operator">=</span> self<span class="token punctuation">.</span>image_slices<span class="token punctuation">[</span>idx<span class="token punctuation">]</span></span>
<span class="line">        mask <span class="token operator">=</span> self<span class="token punctuation">.</span>mask_slices<span class="token punctuation">[</span>idx<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># tensor的顺序是（Batch_size, 通道，高，宽）而numpy读入后的顺序是(高，宽，通道)</span></span>
<span class="line">        image <span class="token operator">=</span> image<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># Mask是单通道数据，所以要再加一个维度</span></span>
<span class="line">        mask <span class="token operator">=</span> mask<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">        image <span class="token operator">=</span> image<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span></span>
<span class="line">        mask <span class="token operator">=</span> mask<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> image<span class="token punctuation">,</span> mask</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们的训练代码写在 train.py 中，train.py 中的 main 函数为主函数，在 main 中，我们会调用 data_loaders 来加载数据。代码如下所示：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader</span>
<span class="line"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader</span>
<span class="line"><span class="token keyword">from</span> dataset <span class="token keyword">import</span> CatSegmentationDataset <span class="token keyword">as</span> Dataset</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">data_loaders</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    dataset_train <span class="token operator">=</span> Dataset<span class="token punctuation">(</span></span>
<span class="line">        images_dir<span class="token operator">=</span>args<span class="token punctuation">.</span>images<span class="token punctuation">,</span></span>
<span class="line">        image_size<span class="token operator">=</span>args<span class="token punctuation">.</span>image_size<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    loader_train <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span></span>
<span class="line">        dataset_train<span class="token punctuation">,</span></span>
<span class="line">        batch_size<span class="token operator">=</span>args<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span></span>
<span class="line">        shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">        num_workers<span class="token operator">=</span>args<span class="token punctuation">.</span>workers<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> loader_train</span>
<span class="line"></span>
<span class="line"><span class="token comment"># args是传入的参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    loader_train <span class="token operator">=</span> data_loaders<span class="token punctuation">(</span>args<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是数据处理的全部内容了。接下来，我们再来看看模型训练部分的内容。</p><h2 id="模型训练" tabindex="-1"><a class="header-anchor" href="#模型训练"><span>模型训练</span></a></h2><p>我们先来回忆一下，模型训练的老三样，分别是网络结构、损失函数和优化方法。</p><p>先从网络结构说起，今天我要为你介绍一个叫做 UNet 的语义分割网络。</p><h3 id="网络结构-unet" tabindex="-1"><a class="header-anchor" href="#网络结构-unet"><span>网络结构：UNet</span></a></h3><p><a href="https://arxiv.org/pdf/1505.04597.pdf" target="_blank" rel="noopener noreferrer">UNet</a>是一个非常实用的网络。它是一个典型的 Encoder-Decoder 类型的分割网络，网络结构非常简单，如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/11/b9/1196c6fcff2fe8c601f608b01bf82ab9.jpg?wh=1920x1130" alt="图片" title="图片来自论文：https://arxiv.org/pdf/1505.04597.pdf"></p><p>它的网络结构虽然简单，但是效果并不“简单”，我在很多项目中都用它与一些主流的语义分割做对比，而 UNet 都取得了非常好的效果。</p><p>整体网络结构跟论文中给出的示意图一样，我们重点去关注几个实现细节。</p><p>第一点，图中横向蓝色的箭头，它们都是重复的相同结构，都是由两个 3x3 的卷积层组合而成的，在每层卷积之后会跟随一个 BN 层与 ReLU 的激活层。按照[第 14 节课]讲的，这一部分重复的组织是可以单独提取出来的。我们先来创建一个 unet.py 文件，用来定义网络结构。</p><p>现在 unet.py 中创建 Block 类，它是用来定义刚才所说的重复的卷积块：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Block</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> features<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token builtin">super</span><span class="token punctuation">(</span>Block<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>features <span class="token operator">=</span> features</span>
<span class="line">        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span></span>
<span class="line">                            in_channels<span class="token operator">=</span>in_channels<span class="token punctuation">,</span></span>
<span class="line">                            out_channels<span class="token operator">=</span>features<span class="token punctuation">,</span></span>
<span class="line">                            kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">                            padding<span class="token operator">=</span><span class="token string">&#39;same&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span></span>
<span class="line">                            in_channels<span class="token operator">=</span>features<span class="token punctuation">,</span></span>
<span class="line">                            out_channels<span class="token operator">=</span>features<span class="token punctuation">,</span></span>
<span class="line">                            kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">                            padding<span class="token operator">=</span><span class="token string">&#39;same&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span></span>
<span class="line">        x <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>num_features<span class="token operator">=</span>self<span class="token punctuation">.</span>features<span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">        x <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">        x <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>num_features<span class="token operator">=</span>self<span class="token punctuation">.</span>features<span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">        x <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> x</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是，同一个块内，特征图的尺寸是不变的，所以 padding 为 same。</p><p>第二点，就是绿色向上的箭头，也就是上采样的过程。这块的实现就是采用上一节课所讲的转置卷积来实现的。</p><p>最后一点，我们现在是要对小猫进行分割，也就是说一共有两个类别——猫与背景。对于二分类的问题，我们可以直接输出一张特征图，然后通过概率来进行判断是正例（猫）还是负例（背景），也就是下面代码中的第 71 行。同时，下述代码也补全了 unet.py 中的所有代码。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Block</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> init_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token builtin">super</span><span class="token punctuation">(</span>UNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        features <span class="token operator">=</span> init_features</span>
<span class="line">        self<span class="token punctuation">.</span>conv_encoder_1 <span class="token operator">=</span> Block<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> features<span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>conv_encoder_2 <span class="token operator">=</span> Block<span class="token punctuation">(</span>features<span class="token punctuation">,</span> features <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>conv_encoder_3 <span class="token operator">=</span> Block<span class="token punctuation">(</span>features <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> features <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>conv_encoder_4 <span class="token operator">=</span> Block<span class="token punctuation">(</span>features <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> features <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>bottleneck <span class="token operator">=</span> Block<span class="token punctuation">(</span>features <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span> features <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>upconv4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span></span>
<span class="line">            features <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> features <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>conv_decoder_4 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token punctuation">(</span>features <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> features <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>upconv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span></span>
<span class="line">            features <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span> features <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>conv_decoder_3 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token punctuation">(</span>features <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> features <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>upconv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span></span>
<span class="line">            features <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> features <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>conv_decoder_2 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token punctuation">(</span>features <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> features <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>upconv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span></span>
<span class="line">            features <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> features<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>decoder1 <span class="token operator">=</span> Block<span class="token punctuation">(</span>features <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> features<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span></span>
<span class="line">            in_channels<span class="token operator">=</span>features<span class="token punctuation">,</span> out_channels<span class="token operator">=</span>out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        conv_encoder_1_1 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_encoder_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">        conv_encoder_1_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv_encoder_1_1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        conv_encoder_2_1 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_encoder_2<span class="token punctuation">(</span>conv_encoder_1_2<span class="token punctuation">)</span></span>
<span class="line">        conv_encoder_2_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv_encoder_2_1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        conv_encoder_3_1 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_encoder_3<span class="token punctuation">(</span>conv_encoder_2_2<span class="token punctuation">)</span></span>
<span class="line">        conv_encoder_3_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv_encoder_3_1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        conv_encoder_4_1 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_encoder_4<span class="token punctuation">(</span>conv_encoder_3_2<span class="token punctuation">)</span></span>
<span class="line">        conv_encoder_4_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv_encoder_4_1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        bottleneck <span class="token operator">=</span> self<span class="token punctuation">.</span>bottleneck<span class="token punctuation">(</span>conv_encoder_4_2<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        conv_decoder_4_1 <span class="token operator">=</span> self<span class="token punctuation">.</span>upconv4<span class="token punctuation">(</span>bottleneck<span class="token punctuation">)</span></span>
<span class="line">        conv_decoder_4_2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>conv_decoder_4_1<span class="token punctuation">,</span> conv_encoder_4_1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        conv_decoder_4_3 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_decoder_4<span class="token punctuation">(</span>conv_decoder_4_2<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        conv_decoder_3_1 <span class="token operator">=</span> self<span class="token punctuation">.</span>upconv3<span class="token punctuation">(</span>conv_decoder_4_3<span class="token punctuation">)</span></span>
<span class="line">        conv_decoder_3_2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>conv_decoder_3_1<span class="token punctuation">,</span> conv_encoder_3_1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        conv_decoder_3_3 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_decoder_3<span class="token punctuation">(</span>conv_decoder_3_2<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        conv_decoder_2_1 <span class="token operator">=</span> self<span class="token punctuation">.</span>upconv2<span class="token punctuation">(</span>conv_decoder_3_3<span class="token punctuation">)</span></span>
<span class="line">        conv_decoder_2_2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>conv_decoder_2_1<span class="token punctuation">,</span> conv_encoder_2_1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        conv_decoder_2_3 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_decoder_2<span class="token punctuation">(</span>conv_decoder_2_2<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        conv_decoder_1_1 <span class="token operator">=</span> self<span class="token punctuation">.</span>upconv1<span class="token punctuation">(</span>conv_decoder_2_3<span class="token punctuation">)</span></span>
<span class="line">        conv_decoder_1_2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>conv_decoder_1_1<span class="token punctuation">,</span> conv_encoder_1_1<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        conv_decoder_1_3 <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder1<span class="token punctuation">(</span>conv_decoder_1_2<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>conv_decoder_1_3<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，网络结构我们就搭建好了，然后我们来我看看损失函数。</p><h3 id="损失函数-dice-loss" tabindex="-1"><a class="header-anchor" href="#损失函数-dice-loss"><span>损失函数：Dice Loss</span></a></h3><p>这里我们来看一下语义分割中常用的损失函数，Dice Loss。</p><p>想要知道这个损失函数如何生成，你需要先了解一个语义分割的评价指标（但更常用的还是后面要讲的的 mIoU），它就是 Dice 系数，常用于计算两个集合的相似度，取值范围在 0-1 之间。</p><p>Dice 系数的公式如下。</p><p>$$Dice=\\frac{2|P\\cap G|}{|P|+|G|}$$</p><p>其中，$|P\\cap G|$是集合 P 与集合 G 之间交集元素的个数，$|P|$和$|G|$分别表示集合 P 和 G 的元素个数。分子的系数 2，这是为了抵消分母中 P 和 G 之间的共同元素。对语义分割任务而言，集合 P 就是预测值的 Mask，集合 G 就是真实值的 Mask。</p><p>根据 Dice 系数我们就能设计出一种损失函数，也就是 Dice Loss。它的计算公式非常简单，如下所示。</p><p>$$Dice Loss=1-\\frac{2|P\\cap G|}{|P|+|G|}$$</p><p>从公式中可以看出，当预测值的 Mask 与 GT 越相似，损失就越小；当预测值的 Mask 与 GT 差异度越大，损失就越大。</p><p>对于二分类问题，GT 只有 0 和 1 两个值。当我们直接使用模型输出的预测概率而不是使用阈值将它们转换为二值 Mask 时，这种损失函数就被称为 Soft Dice Loss。此时，$|P\\cap G|$的值近似为 GT 与预测概率矩阵的点乘。</p><p>定义损失函数的代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">DiceLoss</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token builtin">super</span><span class="token punctuation">(</span>DiceLoss<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>smooth <span class="token operator">=</span> <span class="token number">1.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> y_true<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">assert</span> y_pred<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> y_true<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        y_pred <span class="token operator">=</span> y_pred<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        y_true <span class="token operator">=</span> y_true<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        intersection <span class="token operator">=</span> <span class="token punctuation">(</span>y_pred <span class="token operator">*</span> y_true<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        dsc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.</span> <span class="token operator">*</span> intersection <span class="token operator">+</span> self<span class="token punctuation">.</span>smooth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span></span>
<span class="line">            y_pred<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> y_true<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>smooth</span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1.</span> <span class="token operator">-</span> dsc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，self.smooth 是一个平滑值，这是为了防止分子和分母为 0 的情况。</p><h3 id="训练流程" tabindex="-1"><a class="header-anchor" href="#训练流程"><span>训练流程</span></a></h3><p>最后，我们将模型、损失函数和优化方法串起来，看下整体的训练流程，训练的代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    makedirs<span class="token punctuation">(</span>args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 根据cuda可用情况选择使用cpu或gpu</span></span>
<span class="line">    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">&quot;cpu&quot;</span> <span class="token keyword">if</span> <span class="token keyword">not</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> args<span class="token punctuation">.</span>device<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 加载训练数据</span></span>
<span class="line">    loader_train <span class="token operator">=</span> data_loaders<span class="token punctuation">(</span>args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 实例化UNet网络模型</span></span>
<span class="line">    unet <span class="token operator">=</span> UNet<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>Dataset<span class="token punctuation">.</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token operator">=</span>Dataset<span class="token punctuation">.</span>out_channels<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 将模型送入gpu或cpu中</span></span>
<span class="line">    unet<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 损失函数</span></span>
<span class="line">    dsc_loss <span class="token operator">=</span> DiceLoss<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 优化方法</span></span>
<span class="line">    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>unet<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>args<span class="token punctuation">.</span>lr<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    loss_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    step <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token comment"># 训练n个Epoch</span></span>
<span class="line">    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> total<span class="token operator">=</span>args<span class="token punctuation">.</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        unet<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>loader_train<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            step <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">            x<span class="token punctuation">,</span> y_true <span class="token operator">=</span> data</span>
<span class="line">            x<span class="token punctuation">,</span> y_true <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> y_true<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span></span>
<span class="line">            y_pred <span class="token operator">=</span> unet<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            loss <span class="token operator">=</span> dsc_loss<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_true<span class="token punctuation">)</span></span>
<span class="line">            loss_train<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Step &#39;</span><span class="token punctuation">,</span> step<span class="token punctuation">,</span> <span class="token string">&#39;Loss&#39;</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>loss_train<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                loss_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>unet<span class="token punctuation">,</span> args<span class="token punctuation">.</span>weights <span class="token operator">+</span> <span class="token string">&#39;/unet_epoch_{}.pth&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的点，我都在注释中进行了说明，你可以自己看一看。其实就是我们一直说的模型训练的那几件事情：数据加载、构建网络以及迭代更新网络参数。</p><p>我用训练数据训练了若干个 Epoch，同时也保存了若干个模型，保存为 pth 格式。到这里就完成了模型训练的整个环节，我们可以使用保存好的模型进行预测，来看看分割效果如何。</p><h2 id="模型预测" tabindex="-1"><a class="header-anchor" href="#模型预测"><span>模型预测</span></a></h2><p>现在我们要用训练生成的模型来进行语义分割，看看结果是什么样子的。</p><p>模型预测的代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image</span>
<span class="line"></span>
<span class="line">img_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 加载模型</span></span>
<span class="line">unet <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">&#39;./weights/unet_epoch_51.pth&#39;</span><span class="token punctuation">)</span></span>
<span class="line">unet<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 加载并处理输入图片</span></span>
<span class="line">ori_image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;data/JPEGImages/6.jpg&#39;</span><span class="token punctuation">)</span></span>
<span class="line">im <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>ori_image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img_size<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">im <span class="token operator">=</span> im <span class="token operator">/</span> <span class="token number">255.</span></span>
<span class="line">im <span class="token operator">=</span> im<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">im <span class="token operator">=</span> im<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span></span>
<span class="line">im <span class="token operator">=</span> im<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&#39;float32&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 模型预测</span></span>
<span class="line">output <span class="token operator">=</span> unet<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 模型输出转化为Mask图片</span></span>
<span class="line">output <span class="token operator">=</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>output<span class="token punctuation">)</span></span>
<span class="line">output <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>output<span class="token operator">&gt;</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span></span>
<span class="line">mask <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>output<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;P&#39;</span><span class="token punctuation">)</span></span>
<span class="line">mask<span class="token punctuation">.</span>putpalette<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">mask <span class="token operator">=</span> mask<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>ori_image<span class="token punctuation">.</span>size<span class="token punctuation">)</span></span>
<span class="line">mask<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&#39;output.png&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码也很好理解。首先，用 torch.load 函数加载模型。接着加载一张待分割的图片，并进行数据预处理。然后将处理好的数据送入模型中，得到预测值 output。最后将预测值转化为可视化的 Mask 图片进行保存。</p><p>输入图片也就是待分割的图片，如下左图所示。最终的输出，即可视化的 Mask 图片如下右图所示。</p><table><thead><tr><th style="text-align:left;"><img src="https://static001.geekbang.org/resource/image/c2/db/c258c4f2ffd1f819c662aa1e9f6a8cdb.jpeg?wh=1024x640" alt="图片"></th><th style="text-align:left;"><img src="https://static001.geekbang.org/resource/image/fb/61/fbfecd56d8c31589890fcd05c7995461.png?wh=1024x640" alt="图片"></th></tr></thead></table><p>在将预测值转化为 Mask 图片的过程中，最终预测值的概率卡了 0.5 的阈值，超过阈值的像素点，在 output 矩阵中的值为 1，表示猫的区域，没有超过阈值的像素点，在 output 矩阵中的值为 0，表示背景区域。</p><p>为了将 output 矩阵输出为可视化的图像，我们使用 Image.fromarray 函数，将 Numpy 的 array 转化为 Image 格式，并将模式设置为“P”，即调色板模式。然后用 putpalette 函数来给 Image 对象上色。</p><p>其中，putpalette 函数的参数是一个列表：[0, 0, 0, 0, 128, 0]，列表前三个数表示值为 0 的像素的 RGB（[0, 0, 0]表示黑色），列表后三个数表示值为 1 的像素的 RGB（[0, 128, 0]表示绿色）。这样，我们保存的 Mask 图片，黑色部分即为背景区域，绿色部分即为猫的区域。</p><p>不过，这样分开的轮廓图，可能无法让我们很直观地看出语义分割的效果。所以我们将原图和 Mask 合成一张图片来看看效果。具体的代码如下。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">image <span class="token operator">=</span> ori_image<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">&#39;RGBA&#39;</span><span class="token punctuation">)</span></span>
<span class="line">mask <span class="token operator">=</span> mask<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">&#39;RGBA&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 合成</span></span>
<span class="line">image_mask <span class="token operator">=</span> Image<span class="token punctuation">.</span>blend<span class="token punctuation">(</span>image<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span></span>
<span class="line">image_mask<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&quot;output_mask.png&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们将原图 image 和 Mask 图片都转换为&#39;RGBA&#39;带透明度的模式。然后使用 Image.blend 函数将两张图片合成一张图片，最后一个参数 0.3 表示 Mask 图片透明度为 30%，原图的透明度为 70%。 最终的结果如下图所示。</p><p><img src="https://static001.geekbang.org/resource/image/4d/7b/4d804527a87cc92aab8173da85f0ff7b.png?wh=1024x640" alt="图片"></p><p>这样我们就可以直观地看出哪些地方预测得不准确了。</p><h2 id="模型评估" tabindex="-1"><a class="header-anchor" href="#模型评估"><span>模型评估</span></a></h2><p>在语义分割中，常用的评价指标是 mIoU。mIoU 全称为 mean Intersection over Union，即平均交并比。交并比是真实值和预测值的交集和并集之比。</p><p>真实值就是我们刚刚用 labelme 标注的 Mask，也是 Ground Truth（GT）。如下左图所示。</p><p>预测值就是模型预测出的 Mask，用 Prediction 表示。如后面右图所示。</p><table><thead><tr><th style="text-align:left;"><img src="https://static001.geekbang.org/resource/image/61/0b/61afb79172dfa0bd652f237fd1c5bd0b.png?wh=1024x640" alt="图片"></th><th style="text-align:left;"><img src="https://static001.geekbang.org/resource/image/c3/9d/c31ec50a2a67262728a9fd8e84a1729d.png?wh=1024x640" alt="图片"></th></tr></thead></table><p>交集是指真实值与预测值的交集，如下图黄色区域所示。并集是指真实值与预测值的并集，如下图蓝色区域所示。</p><p><img src="https://static001.geekbang.org/resource/image/53/29/53e81fae1ceb5f21a269c3a461c6b129.png?wh=1024x640" alt="图片"></p><p>通过上面几个图，我们很容易就能理解 mIoU 了。mIoU 的公式如下所示。</p><p>$$mIoU=\\frac{1}{k}\\sum_{i=1}^{k}{\\frac{P\\cap G}{P\\cup G}}$$</p><p>其中，k 为所有类别数，在我们的例子中，只有“cat”一类，因此 k 为 1，我们通常不将背景计算到 mIoU 中；P 为预测值；G 是真实值。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>恭喜你，完成了今天的学习任务。这节课我们一起完成了一个图像分割项目的实践。</p><p>首先，我带你了解了图像分割的数据准备，需要使用 Labelme 工具为图像做标记。数据质量的好坏决定了最终模型的质量，所以你要对数据的标注好好把握。在使用 Labelme 标记完成之后，我们可以使用 label2voc.py 将 json 转换为 Mask。</p><p>之后我们学习了一种非常高效且实用的模型--UNet，并使用 PyTorch 实现了其网络结构。</p><p>然后，我为你讲解了图像分割的评估指标 mIoU 和损失函数 Dice Loss。</p><p>mIoU 的公式如下：</p><p>$$mIoU=\\frac{1}{k}\\sum_{i=1}^{k}{\\frac{P\\cap G}{P\\cup G}}$$</p><p>mIoU 主要是从预测结果与 GT 的重合度这一角度，来衡量分割模型的好与坏的，它是图像分割中经常使用的评价指标。</p><p>最后，我们使用训练好的模型进行预测，并对分割结果进行了可视化绘制。相信通过之前学习的图像分类项目与今天学习的图像分割项目，对于图像处理，你会获得更深层次的理解。</p><h2 id="每课一练" tabindex="-1"><a class="header-anchor" href="#每课一练"><span>每课一练</span></a></h2><p>你可以根据今天的内容，自己动手试试建立一个图像分割模型，然后用一张图片来测一下效果如何。</p><p>欢迎你在留言区跟我交流讨论，也推荐你把今天的内容分享给更多同事、朋友，我们下节课见。</p>`,112)]))}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/3.tech/83.PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/20_%E5%AE%9E%E6%88%98%E7%AF%87-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E6%A8%A1%E5%9E%8B.html","title":"实战篇-图像分割（下）：如何构建一个图像分割模型","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"数据部分","slug":"数据部分","link":"#数据部分","children":[{"level":3,"title":"分割图像的标记","slug":"分割图像的标记","link":"#分割图像的标记","children":[]},{"level":3,"title":"数据读取","slug":"数据读取","link":"#数据读取","children":[]}]},{"level":2,"title":"模型训练","slug":"模型训练","link":"#模型训练","children":[{"level":3,"title":"网络结构：UNet","slug":"网络结构-unet","link":"#网络结构-unet","children":[]},{"level":3,"title":"损失函数：Dice Loss","slug":"损失函数-dice-loss","link":"#损失函数-dice-loss","children":[]},{"level":3,"title":"训练流程","slug":"训练流程","link":"#训练流程","children":[]}]},{"level":2,"title":"模型预测","slug":"模型预测","link":"#模型预测","children":[]},{"level":2,"title":"模型评估","slug":"模型评估","link":"#模型评估","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"每课一练","slug":"每课一练","link":"#每课一练","children":[]}],"git":{"updatedTime":1746672966000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":2,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"873191059aa4709eddd6184a409223b5054edb2a","time":1746672966000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: pytorch fixed"},{"hash":"b44b80ec6b8c2ebffa55c7b2b54259609c76baed","time":1745668690000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add pytorch course"}]},"filePathRelative":"3.tech/83.PyTorch深度学习实战/20_实战篇-图像分割（下）：如何构建一个图像分割模型.md"}');export{i as comp,u as data};
