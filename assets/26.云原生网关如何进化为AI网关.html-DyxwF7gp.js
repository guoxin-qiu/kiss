import{_ as s,c as n,b as a,o as i}from"./app-C01vnHKY.js";const p={};function l(t,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="云原生网关如何进化为-ai-网关" tabindex="-1"><a class="header-anchor" href="#云原生网关如何进化为-ai-网关"><span>云原生网关如何进化为 AI 网关</span></a></h1><p>时代的车轮滚滚向前，技术的浪潮一波接一波。几年前，我还专注于容器化大数据平台的构建，思考如何在云原生架构下优化资源调度、提升计算效率。而彼时的 AI，虽然已有深度学习的浪潮，但更多还停留在实验室和少数企业的探索阶段。没想到，短短一两年间，随着生成式 AI 崛起，大模型席卷全球，重塑了软件开发、云计算，甚至整个技术生态。曾经遥不可及的智能助手，如今已能与人流畅对话，甚至辅助编写代码、优化系统架构。</p><p>但真正让我深刻感受到全民 AI 时代即将到来的，是 DeepSeek 这一波的强势崛起。以往，AI 虽然为人所知，但大多停留在技术圈内，远未达到全民热议的程度。而这次，DeepSeek 尤其是 DeepSeek-R1 的出现却像一场 AI 版的大牛市，引发了前所未有的关注——不仅技术社区在讨论，连圈外人士也争相探讨其潜力，丝毫不亚于上证指数涨到 5000 点，全民都在讨论买什么股票的热度。各大云厂商纷纷行动，我们公司也不例外，迅速跟进，在自家服务器上部署 DeepSeek-R1，并开放租赁给云用户，力图在这一波热点中，抢占先机。</p><p>我周围有朋友一直在用大模型做股票的量化选股，之前用的是 OpenAI 的模型，每天都要消耗十几美金，但切换到 DeepSeek 后，充了 100 元，竟然用了接近一个月，且效果丝毫不逊色，让朋友大呼真爽。</p><p>所以，在本节课我想蹭一波热点，跟你聊一下如何利用 Higress 的灰度 + 观测的方案实现从 OpenAI 平滑迁移到 DeepSeek。</p><h2 id="从-openai-迁移到-deepseek" tabindex="-1"><a class="header-anchor" href="#从-openai-迁移到-deepseek"><span>从 OpenAI 迁移到 DeepSeek</span></a></h2><h3 id="配置灰度路由" tabindex="-1"><a class="header-anchor" href="#配置灰度路由"><span>配置灰度路由</span></a></h3><p>灰度路由是 Higress 的重要功能之一，它允许开发者将请求流量按照一定比例分配到不同的模型。通过这种方式，开发者可以确保在迁移过程中不发生突发的服务中断或性能下降。以 DeepSeek 的迁移为例，开发者可以如下图配置所示，将 90% 的请求流量继续路由到 OpenAI，而将 10% 的流量切换到 DeepSeek，逐步验证新模型的效果，并根据实际情况调整流量比例，最终完成平滑过渡。</p><p><img src="https://static001.geekbang.org/resource/image/11/dd/11ee7dc05e0dc69aa516e9a9575401dd.png?wh=1907x891" alt="图片"></p><p>Higress 的灰度路由功能不仅限于流量分配，还能够根据模型的实时表现自动调整流量的比例。这种灵活性使得开发者可以根据实际情况动态调整模型切换的节奏，从而确保新旧模型的平稳过渡。这对于大规模、复杂的生产环境尤其重要，可以有效避免因技术过渡带来的潜在风险。</p><h3 id="api-key-二次分租" tabindex="-1"><a class="header-anchor" href="#api-key-二次分租"><span>API Key 二次分租</span></a></h3><p>在 AI 服务的调用过程中，API Key 的管理是一项至关重要的任务。Higress 通过 API 网关的消费者鉴权功能，支持 API Key 的二次分租。通过这一功能，开发者可以为每个用户分配独立的 API Key，而不暴露底层模型提供商的 API Key。这不仅增强了系统的安全性，还能够帮助开发者更好地管理消费者的调用权限和使用额度。</p><p>例如，在从 OpenAI 迁移到 DeepSeek 的过程中，开发者可以如下图配置所示，使用 Higress 的 API Key 二次分租功能，兼容历史调用方的 API Key，同时控制新的 API Key 的分配和调用额度。这一功能不仅支持灵活的权限管理，还能够配合 Higress 的可观测能力，实时监控每个消费者的 token 使用情况，及时发现潜在的性能瓶颈。</p><p><img src="https://static001.geekbang.org/resource/image/64/b9/6473272854c9de8e5cdc8dee0dde9db9.png?wh=1910x894" alt="图片"></p><p><img src="https://static001.geekbang.org/resource/image/e5/e5/e5cb96dcd4dabcb929e005004e4ae1e5.png?wh=1898x888" alt="图片"></p><h3 id="观测灰度过程" tabindex="-1"><a class="header-anchor" href="#观测灰度过程"><span>观测灰度过程</span></a></h3><p>在灰度迁移过程中，持续的监控和评估至关重要。Higress 提供了丰富的监控功能，帮助开发者在迁移过程中及时了解每个模型的表现，包括 token 消耗、响应延迟等关键指标。通过这些数据，开发者可以实时评估模型迁移的效果，并在必要时进行调整。</p><p>例如，在 DeepSeek 的迁移过程中，开发者可以通过 Higress 的监控系统，实时查看 OpenAI 和 DeepSeek 的 token 消耗和响应时间，帮助开发者评估迁移是否达到预期目标。如果 DeepSeek 的表现符合预期，开发者可以进一步增加 DeepSeek 的流量比例，逐步完成整个迁移过程。</p><p><img src="https://static001.geekbang.org/resource/image/78/bc/787a2f1d1e00457c0c2f20e3328504bc.png?wh=1080x539" alt="图片"></p><p>通过以上的操作，我们就完成了从 OpenAI 到 DeepSeek 的平滑迁移。接下来，我们再来聊聊 AI 安全访问的问题。</p><h2 id="ai-api-的安全调用" tabindex="-1"><a class="header-anchor" href="#ai-api-的安全调用"><span>AI API 的安全调用</span></a></h2><p>在 AI 技术快速发展的今天，如何保证 AI 服务的安全性已成为一个不可忽视的问题。尤其是在面对用户敏感信息时，如何确保数据的安全性和合规性至关重要。DeepSeek 的用户协议中明确指出，其服务虽然经过了严格的过滤审查，但仍然不能完全排除输入和输出中存在违规内容的风险。</p><p>为了应对这一挑战，Higress 接入了阿里云的内容安全服务。阿里云内容安全服务提供了实时处理和内容封禁功能，能够对大模型请求和响应的内容进行实时监控和过滤。这项功能在 Higress 中得到了完美集成，确保了 AI 服务的安全性。开发者可以通过 Higress 实时监控每个请求的内容，如果请求内容存在违规或不合规的情况，Higress 会立即封禁这些内容，防止不合规内容对用户产生不良影响。</p><p>此外，阿里云的内容安全服务通过了信通院的认证，能够为 AI 服务提供强有力的内容安全保障。这一功能在保护用户隐私和合规性方面具有重要意义，尤其在 AI 模型生成内容的场景下，能够有效避免潜在的法律风险。</p><p><img src="https://static001.geekbang.org/resource/image/6f/01/6f1122d98e7be024350773ea272f7901.png?wh=1888x892" alt="图片"></p><p><img src="https://static001.geekbang.org/resource/image/f6/19/f68c1a5f1bde024f4270b4414da76419.png?wh=1909x902" alt="图片"></p><p>开启内容安全后，此时如果发送违规内容，将会得到如下响应：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">{</span>
<span class="line">    &quot;id&quot;: &quot;chatcmpl-E45zRLc5hUCxhsda4ODEhjvkEycC9&quot;,</span>
<span class="line">    &quot;object&quot;: &quot;chat.completion&quot;,</span>
<span class="line">    &quot;model&quot;: &quot;from-security-guard&quot;,</span>
<span class="line">    &quot;choices&quot;: [</span>
<span class="line">        {</span>
<span class="line">            &quot;index&quot;: 0,</span>
<span class="line">            &quot;message&quot;: {</span>
<span class="line">                &quot;role&quot;: &quot;assistant&quot;,</span>
<span class="line">                &quot;content&quot;: &quot;我不能处理隐私信息&quot;</span>
<span class="line">            },</span>
<span class="line">            &quot;logprobs&quot;: null,</span>
<span class="line">            &quot;finish_reason&quot;: &quot;stop&quot;</span>
<span class="line">        }</span>
<span class="line">    ],</span>
<span class="line">    &quot;usage&quot;: {</span>
<span class="line">        &quot;prompt_tokens&quot;: 0,</span>
<span class="line">        &quot;completion_tokens&quot;: 0,</span>
<span class="line">        &quot;total_tokens&quot;: 0</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以我们上节课的例子来说，企业可以通过该安全插件，控制员工对于大模型的违规使用，减少安全事件带来的风险。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本节课是 AI 微服务章节的最后一课了，我们来简单回顾一下本章节的内容。</p><p>在本章中，我围绕 Higress 开源项目展开讲解，深入探讨了 Higress 如何应对 AI 时代所面临的长连接、大带宽和高延时等挑战。同时，通过讲解 Wasm 编程，我为你详细介绍了如何为网关编写 AI 插件，从而进一步增强网关在 AI 场景下的能力。</p><p>基于网关在 AI 场景下的新应用范式，我提出了 AI 微服务的概念。即网关不再仅仅是一个单纯的流量转发器，它通过结合 Agent 能力，具备了自主选择后端 API 并执行任务的能力。通过这种方式，网关能够根据自然语言输入的指令自动选择并调用相应的 API，与此同时整个用户与网关的交互过程也都转变为自然语言化的交互。，这是云原生网关进化为 AI 网关的一个重大意义。</p><p>回到本节课，我们追踪了 DeepSeek 这个热点，并利用 Higress 网关的灰度+观测的方案完成了从 OpenAI 到 DeepSeek 的平滑迁移。灰度的迁移方案，使得用户在大模型的迁移过程中，不会遭遇服务中断、性能下降等问题。丰富的观测手段，能帮助我们从 token 消耗、响应时间等关键指标进行实时跟踪，随时了解模型迁移的过程。</p><p>DeepSeek 只是起点，随着大模型能力的不断增强，AI 应用场景会不断拓宽，在这种背景下，像 Higress 这样的网关工具将扮演着更加重要的角色。最后，如果你有兴趣，欢迎参与到社区的建设中来，我们一起将 AI 网关做的越来越好。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>感兴趣的同学，可以自己动手测试一下任意模型的灰度迁移过程。如果你目前还没有搭建好可用的 Higress 环境，可以使用 docker 构建 all-in-one 环境，命令如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line">curl -sS  https<span class="token operator">:</span><span class="token comment">//higress.cn/ai-gateway/install.sh | bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该环境会自带 Prometheus 和 Grafana，方便观测。</p>`,39)]))}const r=s(p,[["render",l]]),d=JSON.parse('{"path":"/3.tech/84.AIAgent/26.%E4%BA%91%E5%8E%9F%E7%94%9F%E7%BD%91%E5%85%B3%E5%A6%82%E4%BD%95%E8%BF%9B%E5%8C%96%E4%B8%BAAI%E7%BD%91%E5%85%B3.html","title":"云原生网关如何进化为 AI 网关","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"从 OpenAI 迁移到 DeepSeek","slug":"从-openai-迁移到-deepseek","link":"#从-openai-迁移到-deepseek","children":[{"level":3,"title":"配置灰度路由","slug":"配置灰度路由","link":"#配置灰度路由","children":[]},{"level":3,"title":"API Key 二次分租","slug":"api-key-二次分租","link":"#api-key-二次分租","children":[]},{"level":3,"title":"观测灰度过程","slug":"观测灰度过程","link":"#观测灰度过程","children":[]}]},{"level":2,"title":"AI API 的安全调用","slug":"ai-api-的安全调用","link":"#ai-api-的安全调用","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/26.云原生网关如何进化为AI网关.md"}');export{r as comp,d as data};
