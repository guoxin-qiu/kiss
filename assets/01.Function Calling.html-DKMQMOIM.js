import{_ as s,c as a,b as p,o as e}from"./app-C01vnHKY.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="function-calling" tabindex="-1"><a class="header-anchor" href="#function-calling"><span>Function Calling</span></a></h1><p>作为大模型，训练数据是有限的，特别是对于一些垂直领域以及实时性的问题，例如附近哪有加油站？今天的茅台股票多少钱一股？大模型是无法给出正确的回答的。那大模型为什么也处理不了小学数学题呢？这是因为大模型的训练方法是通过学习语言的结构和模式，使得其能够生成与人类语言相似的文本，而不是针对数学问题这种精确逻辑做的训练，因此它的数学能力很弱。</p><p>我们应如何解决这类问题呢？OpenAI 公司为了能让大模型与外界进行交互，发明了 Function Calling 机制，即可以在向大模型提问时，给大模型提供一些工具（函数），由大模型根据需要，自行选择合适的工具，从而解决问题。</p><p>接下来，我将使用 Go 语言，为你演示一下 Function Calling 功能，我们就以加法减法工具为例，让大模型通过工具来进行数学运算。</p><h2 id="代码实战前置工作" tabindex="-1"><a class="header-anchor" href="#代码实战前置工作"><span>代码实战前置工作</span></a></h2><h3 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h3><ul><li>运行环境：Windows/Linux</li><li>Go 版本：1.19</li><li>LLM：阿里云 qwen-turbo</li><li>SDK：go-openai v1.32.0</li></ul><h3 id="通义千问大模型开通" tabindex="-1"><a class="header-anchor" href="#通义千问大模型开通"><span>通义千问大模型开通</span></a></h3><p>阿里云通义千问提供了比较丰富的大模型产品供用户使用，且其请求方式是兼容 OpenAI SDK 的。本小节实战所使用的模型是通义千问中最便宜的 qwen-turbo 模型。如何开通服务，可参考官网教程<a href="https://help.aliyun.com/zh/dashscope/opening-service?spm=a2c22.12281978.0.0.4d59588ebiflN0" target="_blank" rel="noopener noreferrer">开通 DashScope 并创建 API-KEY_模型服务灵积(DashScope)-阿里云帮助中心 (aliyun.com)</a> 。</p><h2 id="代码实战演示" tabindex="-1"><a class="header-anchor" href="#代码实战演示"><span>代码实战演示</span></a></h2><h3 id="模型环境变量配置" tabindex="-1"><a class="header-anchor" href="#模型环境变量配置"><span>模型环境变量配置</span></a></h3><p>当我们获取了通义千问大模型的 api_key 之后，为了保密和调用方便，可以将其配置到环境变量。</p><p>以 Windows 系统为例，我的电脑-&gt;右键属性-&gt;高级系统设置-&gt;环境变量，在系统变量中点击新建。</p><p><img src="https://static001.geekbang.org/resource/image/94/89/94c2859904708be8205faba30011bc89.png?wh=1030x472" alt="图片"></p><p>输入变量名和 api_key 的值即可。</p><p>接下来我们开始写初始化 OpenAI 客户端的代码。</p><p>首先将 go-openai sdk 下载下来。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">go get github.com/sashabaranov/go-openai</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>之后，开始初始化一个 OpenAI 客户端，需要填充 token 和 baseurl 两项，用于客户端与大模型服务器的连接。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">NewOpenAiClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>openai<span class="token punctuation">.</span>Client <span class="token punctuation">{</span></span>
<span class="line">    token <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">&quot;DashScope&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    dashscope_url <span class="token operator">:=</span> <span class="token string">&quot;https://dashscope.aliyuncs.com/compatible-mode/v1&quot;</span></span>
<span class="line">    config <span class="token operator">:=</span> openai<span class="token punctuation">.</span><span class="token function">DefaultConfig</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></span>
<span class="line">    config<span class="token punctuation">.</span>BaseURL <span class="token operator">=</span> dashscope_url</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> openai<span class="token punctuation">.</span><span class="token function">NewClientWithConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于通义千问大模型是兼容 OpenAI 的，因此可以使用 OpenAI SDK 初始化大模型客户端。使用 os 包从环境变量中获取 api_key。</p><h3 id="chat-completions" tabindex="-1"><a class="header-anchor" href="#chat-completions"><span>Chat Completions</span></a></h3><p>我们在演示工具选择之前，首先需要把和大模型对话的基础代码写好。这就要用到 Chat Completions。Chat Completions 是 OpenAI SDK 提供的一次性对话的方法，我们使用它可以完成和大模型的对话。</p><p>在与大模型的对话过程中，会有三种基础角色，用来让大模型清楚某句话是谁说的。</p><ul><li><p>system：系统角色，可以理解为全局变量或前置条件，设置上这个角色之后，就会规定大模型的聊天范围，业界通常称之为“人设”。</p></li><li><p>user：人类角色，代表这句话是人类说的。在包括 LangChain 在内的很多框架和场景下，user 角色也会被写成 human。</p></li><li><p>assistant：AI 角色，代表这句话是大模型给我们的返回。在包括 LangChain 在内的很多框架和场景下，assistant 角色也会被写成 AI。</p></li></ul><p>我举一个例子，演示一下使用以上三种角色完成一次 Chat Completions。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">system: 你是一个足球领域的专家，请尽可能地帮我回答与足球相关的问题。</span>
<span class="line">user: C罗是哪个国家的足球运动员？</span>
<span class="line">assistant: 葡萄牙</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要实现多轮对话效果，则需要每一次都带着历史对话提问，例如：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">system: 你是一个足球领域的专家，请尽可能地帮我回答与足球相关的问题。</span>
<span class="line">user: C罗是哪个国家的足球运动员？</span>
<span class="line">assistant: 葡萄牙</span>
<span class="line">user: 内马尔呢？</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然最后一次人类的提问“内马尔呢”是一个模糊提问，但由于存在历史对话，因此大模型可以理解用户的提问的意思是“内马尔是哪个国家的足球运动员？”</p><p>理解了三种角色后，我们开始写代码。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">Chat</span><span class="token punctuation">(</span>message <span class="token punctuation">[</span><span class="token punctuation">]</span>openai<span class="token punctuation">.</span>ChatCompletionMessage<span class="token punctuation">)</span> openai<span class="token punctuation">.</span>ChatCompletionMessage <span class="token punctuation">{</span></span>
<span class="line">    c <span class="token operator">:=</span> <span class="token function">NewOpenAiClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    rsp<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">CreateChatCompletion</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> openai<span class="token punctuation">.</span>ChatCompletionRequest<span class="token punctuation">{</span></span>
<span class="line">        Model<span class="token punctuation">:</span>    <span class="token string">&quot;qwen-plus&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Messages<span class="token punctuation">:</span> message<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> openai<span class="token punctuation">.</span>ChatCompletionMessage<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> rsp<span class="token punctuation">.</span>Choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Message</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个函数中，首先我获取了 OpenAI 客户端，之后通过客户端调用了 CreateChatCompletion 方法。该方式是完成一次与大模型的 Chat。该方法的返回值 rsp，便是大模型的回复。</p><p>在这次 Chat Compleetion 中，我使用的模型是 qwen-plus，message 即向大模型发送的消息。message 的类型是一个 openai.ChatCompletionMessage 切片。</p><p>openai.ChatCompletionMessage 包含了多个字段，其中有两个基础字段为：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">Role         <span class="token builtin">string</span> <span class="token string">\`json:&quot;role&quot;\`</span></span>
<span class="line">Content      <span class="token builtin">string</span> <span class="token string">\`json:&quot;content&quot;\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>role 代表角色，content 代表对话内容。</p><p>openai.ChatCompletionMessage 为切片类型，是因为考虑到会有历史消息，因此我们需要构建一个历史消息存储器来存储历史对话。核心代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">var</span> MessageStore ChatMessages</span>
<span class="line"><span class="token keyword">type</span> ChatMessages <span class="token punctuation">[</span><span class="token punctuation">]</span>openai<span class="token punctuation">.</span>ChatCompletionMessage</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>cm <span class="token operator">*</span>ChatMessages<span class="token punctuation">)</span> <span class="token function">AddFor</span><span class="token punctuation">(</span>role <span class="token builtin">string</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">*</span>cm <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>cm<span class="token punctuation">,</span> openai<span class="token punctuation">.</span>ChatCompletionMessage<span class="token punctuation">{</span></span>
<span class="line">        Role<span class="token punctuation">:</span>    role<span class="token punctuation">,</span></span>
<span class="line">        Content<span class="token punctuation">:</span> msg<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>cm <span class="token operator">*</span>ChatMessages<span class="token punctuation">)</span> <span class="token function">ToMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>openai<span class="token punctuation">.</span>ChatCompletionMessage <span class="token punctuation">{</span></span>
<span class="line">    ret <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>openai<span class="token punctuation">.</span>ChatCompletionMessage<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>cm<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> index<span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>cm <span class="token punctuation">{</span></span>
<span class="line">        ret<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> c</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> ret</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们定义了历史消息存储器 MessageStore，其本质是一个用于存放各类角色对话内容的 openai.ChatCompletionMessage 切片。并编写了 AddFor 方法，用于添加各类角色的对话内容，最后编写了 ToMessage 方法，用于取出存储器中的所有消息。</p><p>完成了以上编码后，我们可以测试一下和大模型对话的效果了。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    ai<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">AddFor</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>RoleSystem<span class="token punctuation">,</span> <span class="token string">&quot;你是一个足球领域的专家，请尽可能地帮我回答与足球相关的问题。&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    ai<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">AddFor</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>RoleUser<span class="token punctuation">,</span> <span class="token string">&quot;C罗是哪个国家的足球运动员？&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    ai<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">AddFor</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>RoleAssistant<span class="token punctuation">,</span> <span class="token string">&quot;C罗是葡萄牙足球运动员。&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    ai<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">AddFor</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>RoleUser<span class="token punctuation">,</span> <span class="token string">&quot;内马尔呢？&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    response <span class="token operator">:=</span> ai<span class="token punctuation">.</span><span class="token function">Chat</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">ToMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">内马尔是巴西足球运动员。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在上面的例子中，大模型成功的根据对话历史，理解了“内马尔呢？”表达的真正含义。</p><h3 id="function-calling-1" tabindex="-1"><a class="header-anchor" href="#function-calling-1"><span>Function Calling</span></a></h3><p>由于 Function Calling 功能是 OpenAI 公司发明的，因此我们定义工具需要遵循 OpenAI SDK 的规范。规范如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">    ToolTypeFunction ToolType <span class="token operator">=</span> <span class="token string">&quot;function&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Tool <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Type     ToolType            <span class="token string">\`json:&quot;type&quot;\`</span></span>
<span class="line">    Function <span class="token operator">*</span>FunctionDefinition <span class="token string">\`json:&quot;function,omitempty&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> FunctionDefinition <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Name        <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span></span>
<span class="line">    Description <span class="token builtin">string</span> <span class="token string">\`json:&quot;description,omitempty&quot;\`</span></span>
<span class="line">    Parameters any <span class="token string">\`json:&quot;parameters&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>规范还是很简单的，包含了工具类型 Type 和工具定义 Function 两个部分，其实工具类型是写死的 &quot;fuction&quot;。工具定义包含名称 Name、描述 Description 以及参数 Parameters 三个部分。</p><p>接下来我来定义一个加法工具，给你做一下演示。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">var</span> AddToolDefine <span class="token operator">=</span> openai<span class="token punctuation">.</span>Tool<span class="token punctuation">{</span></span>
<span class="line">    Type<span class="token punctuation">:</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    Function<span class="token punctuation">:</span> <span class="token operator">&amp;</span>openai<span class="token punctuation">.</span>FunctionDefinition<span class="token punctuation">{</span></span>
<span class="line">        Name<span class="token punctuation">:</span> <span class="token string">&quot;AddTool&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Description<span class="token punctuation">:</span> <span class="token string">\`</span>
<span class="line">        Use this tool for addition calculations.</span>
<span class="line">            example:</span>
<span class="line">                1+2 =?</span>
<span class="line">            then Action Input is: 1,2</span>
<span class="line">        \`</span><span class="token punctuation">,</span></span>
<span class="line">        Parameters<span class="token punctuation">:</span> <span class="token string">\`{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;numbers&quot;:{&quot;type&quot;:&quot;array&quot;,&quot;items&quot;:{&quot;type&quot;:&quot;integer&quot;}}}}\`</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我的工具定义的 Description 部分，我不仅写清楚了 AddTool 工具的作用，还举了一个例子，这样可以让大模型更好地理解。在 Parameters 部分，我使用了标准的 json schema 方式编写了参数名称、类型等，这样也有助于大模型准确理解。</p><p>在定义好工具后，我们需要在向大模型提问时，带上工具，因此 Chat Completions 增加了两个参数，一个是 Tools，用于接收 []openai.tool 列表；另一个参数是 ToolChoice，用于设置让大模型使用工具还是不使用工具，一般设置为 &quot;auto&quot;，意思是让大模型自己根据实际情况选择是否调用工具。修改后的 chat 函数代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">ToolsChat</span><span class="token punctuation">(</span>message <span class="token punctuation">[</span><span class="token punctuation">]</span>openai<span class="token punctuation">.</span>ChatCompletionMessage<span class="token punctuation">,</span> tools <span class="token punctuation">[</span><span class="token punctuation">]</span>openai<span class="token punctuation">.</span>Tool<span class="token punctuation">)</span> openai<span class="token punctuation">.</span>ChatCompletionMessage <span class="token punctuation">{</span></span>
<span class="line">    c <span class="token operator">:=</span> <span class="token function">NewOpenAiClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    rsp<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">CreateChatCompletion</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> openai<span class="token punctuation">.</span>ChatCompletionRequest<span class="token punctuation">{</span></span>
<span class="line">        Model<span class="token punctuation">:</span>      <span class="token string">&quot;qwen-turbo&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Messages<span class="token punctuation">:</span>   message<span class="token punctuation">,</span></span>
<span class="line">        Tools<span class="token punctuation">:</span>      tools<span class="token punctuation">,</span></span>
<span class="line">        ToolChoice<span class="token punctuation">:</span> <span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> openai<span class="token punctuation">.</span>ChatCompletionMessage<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> rsp<span class="token punctuation">.</span>Choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Message</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这些基础，我们就可以向大模型提问，测试工具选择了。我们让大模型计算一下&quot;1+2=?&quot;</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    toolsList <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>openai<span class="token punctuation">.</span>Tool<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    toolsList <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>toolsList<span class="token punctuation">,</span> tools<span class="token punctuation">.</span>AddToolDefine<span class="token punctuation">,</span> tools<span class="token punctuation">.</span>SubToolDefine</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    prompt <span class="token operator">:=</span> <span class="token string">&quot;1+2=? Just give me a number result&quot;</span></span>
<span class="line">    ai<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">AddFor</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>RoleUser<span class="token punctuation">,</span> prompt<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    response <span class="token operator">:=</span> ai<span class="token punctuation">.</span><span class="token function">ToolsChat</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">ToMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toolsList<span class="token punctuation">)</span></span>
<span class="line">    toolCall <span class="token operator">:=</span> response<span class="token punctuation">.</span>ToolCalls</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;大模型的回复是: &quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;大模型选择的工具是: &quot;</span><span class="token punctuation">,</span> toolCalls<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">大模型的回复是<span class="token punctuation">:</span>  </span>
<span class="line">大模型选择的工具是<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token number">0xc000284520</span> call_f31f9091de504216a3a84d function <span class="token punctuation">{</span>AddTool <span class="token punctuation">{</span><span class="token string">&quot;numbers&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到大模型选择了工具 AddTool，并将参数按照我们的要求拆解成了 [1, 2] 这样一个切片。只要大模型选择了工具，则其回复就会是空字符串。</p><p>测试到这里，我们可以初步理解所谓大模型“调用”工具的机制。其实就是将工具用文字描述清楚，并和问题一起发送给大模型，由大模型判断选择哪个工具能解决问题。因此其实 Function Calling 这个表述我个人感觉并不准确，或许叫 Function Selecting 会更加没有歧义。</p><p><strong>这里我们可以得出两个结论：</strong></p><ol><li><p><strong>工具的定义也是 prompt，也就是要消耗</strong> <strong>token</strong> <strong>的。</strong></p></li><li><p><strong>大模型只能选择使用工具！而不能调用工具！真正调用工具的仍然是人类！</strong></p></li></ol><p>最后我们看一下，人类如何调用工具，并将结果反馈给大模型，从而辅助大模型完成任务。</p><p>OpenAI 的 SDK 文档给出了说明，经过我简化后，方法如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line">#<span class="token number">1</span>. 将提问存储到MessageStore</span>
<span class="line"><span class="token punctuation">{</span><span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1+2=? Just give me a number result&quot;</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">#开始进行第一轮提问....</span>
<span class="line">#得到大模型返回</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">#<span class="token number">2</span>. 将大模型的返回，存储到MessageStore</span>
<span class="line"><span class="token punctuation">{</span><span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assistant&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;tool_calls&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>0xc000284520 call_f31f9091de504216a3a84d function <span class="token punctuation">{</span>AddTool <span class="token punctuation">{</span><span class="token property">&quot;numbers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">#<span class="token number">3</span>. 将工具调用信息，存储到MessageStore</span>
<span class="line"><span class="token punctuation">{</span><span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tool&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;AddTool&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;tool_call_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;call_f31f9091de504216a3a84d&quot;</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">#<span class="token number">4</span>. 开始进行第二轮提问，将上述所有Mesage，发送给大模型</span>
<span class="line">#得到大模型返回</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，相比正常的 user assistant 的多轮对话模式，Function Calling 的对话模式，只是略有不同，不同点在于第一要将大模型选择的工具添加到 assistant 对话中，第二是要在 assistant 之后添加 tool 角色的消息，用于存储工具调用结果、工具名称以及 id。</p><p>理解了原理后，我们来看代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">if</span> toolCalls <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> result <span class="token builtin">int</span></span>
<span class="line">    <span class="token keyword">var</span> args tools<span class="token punctuation">.</span>InputArgs</span>
<span class="line">    err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>toolCalls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Function<span class="token punctuation">.</span>Arguments<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span><span class="token string">&quot;json unmarshal err: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> toolCalls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Function<span class="token punctuation">.</span>Name <span class="token operator">==</span> tools<span class="token punctuation">.</span>AddToolDefine<span class="token punctuation">.</span>Function<span class="token punctuation">.</span>Name <span class="token punctuation">{</span></span>
<span class="line">        result <span class="token operator">=</span> tools<span class="token punctuation">.</span><span class="token function">AddTool</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Numbers<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> toolCalls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Function<span class="token punctuation">.</span>Name <span class="token operator">==</span> tools<span class="token punctuation">.</span>SubToolDefine<span class="token punctuation">.</span>Function<span class="token punctuation">.</span>Name <span class="token punctuation">{</span></span>
<span class="line">        result <span class="token operator">=</span> tools<span class="token punctuation">.</span><span class="token function">SubTool</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Numbers<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;函数计算结果: &quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span></span>
<span class="line">    ai<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">AddFor</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>RoleAssistant<span class="token punctuation">,</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">,</span> toolCalls<span class="token punctuation">)</span></span>
<span class="line">    ai<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">AddForTool</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span> toolCalls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Function<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> toolCalls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    response <span class="token operator">:=</span> ai<span class="token punctuation">.</span><span class="token function">ToolsChat</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span>MessageStore<span class="token punctuation">.</span><span class="token function">ToMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toolsList<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;大模型的最终回复: &quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先判断一下大模型有没有调用工具，如果调用了，则从 toolCalls[0].Function.Arguments 中解析出函数入参。之后根据工具名称，调用相应的工具函数。最后按照上文中 OpenAI 规定的格式，将对应的 assistant 以及 tool 消息填好，反馈给大模型。</p><p>输出：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line">函数计算结果<span class="token operator">:</span>  <span class="token number">3</span></span>
<span class="line">大模型的最终回复<span class="token operator">:</span>  <span class="token number">1</span> + <span class="token number">2</span> = <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>大模型不是万能的，大模型也有自身的弱点以及无法解决的问题，让你体验了一下什么是业界常说的“幻觉”。</p><p>OpenAI 公司为了解决这些问题，想到了让大模型与外界环境交互的破解之法，因此提出了 Function Calling 机制，并在 SDK 中进行了支持，在迅速成为了行业标杆做法后，其他公司包括国内公司的大模型，也对该机制进行了兼容，因此我们可以使用 OpenAI SDK 配合阿里云的通义千问大模型体验该机制。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>计算 “1+2+3+4-5-6=?” ，代码该如何编写？大模型能否给出正确的回答？</p>`,76)]))}const c=s(t,[["render",o]]),u=JSON.parse('{"path":"/3.tech/84.AIAgent/01.Function%20Calling.html","title":"Function Calling","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"代码实战前置工作","slug":"代码实战前置工作","link":"#代码实战前置工作","children":[{"level":3,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[]},{"level":3,"title":"通义千问大模型开通","slug":"通义千问大模型开通","link":"#通义千问大模型开通","children":[]}]},{"level":2,"title":"代码实战演示","slug":"代码实战演示","link":"#代码实战演示","children":[{"level":3,"title":"模型环境变量配置","slug":"模型环境变量配置","link":"#模型环境变量配置","children":[]},{"level":3,"title":"Chat Completions","slug":"chat-completions","link":"#chat-completions","children":[]},{"level":3,"title":"Function Calling","slug":"function-calling-1","link":"#function-calling-1","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/01.Function Calling.md"}');export{c as comp,u as data};
