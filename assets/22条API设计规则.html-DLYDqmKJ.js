import{_ as a,c as s,b as i,o}from"./app-C01vnHKY.js";const l={};function n(t,e){return o(),s("div",null,e[0]||(e[0]=[i(`<h1 id="_22-条-api-设计规则" tabindex="-1"><a class="header-anchor" href="#_22-条-api-设计规则"><span>22 条 API 设计规则</span></a></h1><ol><li>对 URL 使用 kebab-case（短横线小写隔开） <code>/system-orders</code></li><li>参数使用 camelCase <code>/system-orders/{orderId}</code></li><li>指向集合的复数名称 <code>GET /users</code></li><li>URL 以集合开始，以标识符结束，保持概念的单一性和一致性 <code>GET /shops/{shopId}</code></li><li>让动词远离你的资源 URL <code>PUT /users/{userId}</code></li><li>对非资源 URL 使用动词，如果你有一个端点，它只返回一个操作。在这种情况下，你可以使用动词,这些不是我们的 CRUD 操作。相反，它们被认为是在我们的系统中执行特定工作的函数。 <code>POST /alarm/{alarmId}/resend</code></li><li>JSON 属性使用 camelCase</li></ol><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;userName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Denis&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;userId&quot;</span><span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>监控。RESTful HTTP 服务必须实现/health 和/version 和/metricsAPI 端点。他们将提供以下信息。 /health 用 200 OK 状态码响应对/health 的请求。 /version 用版本号响应对/version 的请求。 /metrics 这个端点将提供各种指标，如平均响应时间。 也强烈推荐使用/debug 和/status 端点。</li><li>不要使用 tableName 作为资源名</li><li>使用 API 设计工具，例如 Swagger。</li><li>使用简单序数作为版本。</li><li>在响应体中包括总资源数</li><li>接收 limit 和 offset 参数 <code>GET /shops?offset=5&amp;limit=5</code></li><li>获取字段查询参数，返回的数据量也应该考虑在内。添加一个 fields 参数，只公开 API 中必需的字段。 <code>GET /shops?fields=id,name,address,contact</code></li><li>不要在 URL 中通过认证令牌，通过头部传递它们。</li><li>始终验证内容类型 <code>content-type: application/json</code></li><li>对 CRUD 函数使用 HTTP 动词方法</li><li>在嵌套资源的 URL 中使用关系 <code>GET /shops/2/products/33</code></li><li>CORS(跨源资源共享)，一定要为所有面向公共的 API 支持 CORS（跨源资源共享）头部。考虑支持 CORS 允许的“*”来源，并通过有效的 OAuth 令牌强制授权。避免将用户凭证与原始验证相结合。</li><li>安全，在所有端点、资源和服务上实施 HTTPS（tls 加密）。强制并要求所有回调 url、推送通知端点和 webhooks 使用 HTTPS。</li><li>错误，当客户端向服务发出无效或不正确的请求，或向服务传递无效或不正确的数据，而服务拒绝该请求时，就会出现错误，或者更具体地说，出现服务错误。</li><li>黄金法则</li></ol><ul><li>扁平比嵌套好</li><li>简单胜于复杂</li><li>字符串比数字好</li><li>一致性比定制更好</li></ul>`,5)]))}const r=a(l,[["render",n]]),u=JSON.parse('{"path":"/3.tech/01.tech-arch/22%E6%9D%A1API%E8%AE%BE%E8%AE%A1%E8%A7%84%E5%88%99.html","title":"22 条 API 设计规则","lang":"zh-cn","frontmatter":{},"headers":[],"git":{"updatedTime":1745032055000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":5,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"a2b6e78156eb7f1fed6ecb0952cc98c6b90aa9d3","time":1745032055000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"change hierarchy"},{"hash":"cf1a535ce24165a7f8da8bf85c1c9f2de88d6068","time":1692634731000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"update: change the groups"},{"hash":"24795fa27668d9eb86a60f67b09182b15314e9bc","time":1682330132000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"chore: structure adjust big big"},{"hash":"6c5b730e5acb1ab8dee133ad8856957269916d1d","time":1653878999000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"chore: change hierarchical structure"},{"hash":"34bb09246d6d058cb98150827aad32750fa8e5a0","time":1651840322000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"docs: add some treasure"}]},"filePathRelative":"3.tech/01.tech-arch/22条API设计规则.md"}');export{r as comp,u as data};
