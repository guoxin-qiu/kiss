import{_ as s,c as a,b as p,o as e}from"./app-C01vnHKY.js";const t={};function l(i,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="用-go-语言手写可定制-api-agent-下" tabindex="-1"><a class="header-anchor" href="#用-go-语言手写可定制-api-agent-下"><span>用 Go 语言手写可定制 API Agent（下）</span></a></h1><p>上节课，我们搞定了 OpenAPI 的配置、解析以及 ReAct 模板的填充，相当于初始化的工作都已经完成了。那今天这节课，我们就来完成剩余的部分。</p><h2 id="output-parser" tabindex="-1"><a class="header-anchor" href="#output-parser"><span>Output_parser</span></a></h2><p>如何与 Agent 进行多轮对话，在之前的课程中，我们曾反复练习过，相信你已经比较熟悉了。在每一轮对话结束时，Agent 都会按照 ReAct 模板规定的格式给出回答。本章节的 ReAct 模板，是采用的 Dify 的模板，其使用的是 JSON 模式。 输出格式如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">Action:</span>
<span class="line">\`\`\`</span>
<span class="line">$JSON_BLOB</span>
<span class="line">\`\`\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，JSON 输出会被夹在三个反引号（\`\`\`）代码块之间。而根据 Agent 是选择工具还是得到了 Final Answer，上述格式会产生两种输出。</p><p>如果是选择工具，就会输出以下示例中的格式：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">Action:</span>
<span class="line">\`\`\`</span>
<span class="line">{</span>
<span class="line">  &quot;action&quot;: &quot;search_nearby_pois&quot;,</span>
<span class="line">  &quot;action_input&quot;: {</span>
<span class="line">    &quot;keywords&quot;: &quot;游泳馆&quot;,</span>
<span class="line">    &quot;location&quot;: &quot;117.120308,36.656973&quot;</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line">\`\`\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即 action_input 对应的值也是一个 JSON。如果是得到了 Final Answer，则是如下格式：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">Action:</span>
<span class="line">\`\`\`</span>
<span class="line">{</span>
<span class="line">  &quot;action&quot;: &quot;Final Answer&quot;,</span>
<span class="line">  &quot;action_input&quot;: &quot;Final response to human&quot;</span>
<span class="line">}</span>
<span class="line">\`\`\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即 action_input 对应的值是一个字符串。</p><p>格式特点搞清楚后，就是写代码来进行解析了。在第 15 节课，我们分析过 Dify 解析 output_parser 的代码，由于其与大模型的对话采用的是流式模式，因此需要先进行流式解析，然后才是解析 Action。在这里，我偷个懒，就不用流式模式了，我们把重点放在 Action 的解析工作上。</p><p>解析的第一步，我们应通过正则表达式，从三个反引号 \`\`\` 中把 JSON_BLOB 拿出来。之后直接通过 JSON 反序列化的方法将其注入到一个 map[string]interace{} 结构中。这样就可以得到 action 与 action_input 了。但需要区分的是 action_input 输出的是工具参数时，其类型是 map[string]interface{}，如果是 Final Answer 则是 string。我为了在后面组装 HTTP 请求参数时，方便解析，就把 action_input 统一为 map[string]interface{} 类型。完整代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token comment">// 提取 action 和 action_input</span></span>
<span class="line">action<span class="token punctuation">,</span> ok <span class="token operator">:=</span> actionData<span class="token punctuation">[</span><span class="token string">&quot;action&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;JSON 中缺少 &#39;action&#39; 字段，或类型不匹配&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查 action 是否是 &quot;Final Answer&quot;</span></span>
<span class="line"><span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token string">&quot;Final Answer&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">    actionInput<span class="token punctuation">,</span> ok <span class="token operator">:=</span> actionData<span class="token punctuation">[</span><span class="token string">&quot;action_input&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span></span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;JSON 中缺少 &#39;action_input&#39; 字段，或类型不匹配&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    actionInputMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;finalAnswer&quot;</span><span class="token punctuation">:</span> actionInput<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> action<span class="token punctuation">,</span> actionInputMap<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">actionInput<span class="token punctuation">,</span> ok <span class="token operator">:=</span> actionData<span class="token punctuation">[</span><span class="token string">&quot;action_input&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;JSON 中缺少 &#39;action_input&#39; 字段，或类型不匹配&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> action<span class="token punctuation">,</span> actionInput<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通用-http-方法" tabindex="-1"><a class="header-anchor" href="#通用-http-方法"><span>通用 HTTP 方法</span></a></h2><p>需要调用什么工具以及工具参数获取到之后，接下来就是执行 HTTP 请求了。这个过程分三个步骤，第一是要处理 header 和 apiKey；第二是处理参数，包括 query 参数、path 参数以及 requestBody；第三才是进行 HTTP 请求。首先来看第一步，先上代码：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">assembingRequest</span><span class="token punctuation">(</span>apiKey models<span class="token punctuation">.</span>APIKey<span class="token punctuation">,</span> url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> apiKey<span class="token punctuation">.</span>In <span class="token operator">==</span> <span class="token string">&quot;header&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        headers <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        headers<span class="token punctuation">[</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;application/json&quot;</span></span>
<span class="line">        headers<span class="token punctuation">[</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> apiKey<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> apiKey<span class="token punctuation">.</span>Value</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> headers<span class="token punctuation">,</span> url</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> apiKey<span class="token punctuation">.</span>In <span class="token operator">==</span> <span class="token string">&quot;query&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        url <span class="token operator">+=</span> <span class="token string">&quot;?&quot;</span> <span class="token operator">+</span> apiKey<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> apiKey<span class="token punctuation">.</span>Value</span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> url</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> url</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道 apiKey 分成三种情况，第一种是存于 header 中，第二种是放在 url query 中，第三种则是不需要 apiKey。因此在代码中需要做一个判断，如果是存于 header 中，就将其拼接到 Authorization 后面。如果是 query 形式，就当作 url 的第一个 query 参数，拼接到 url 后面。如果不需要 apiKey，则不处理 url，直接返回。</p><p>接下来看一下第二步。首先需要处理 path 参数，也就是类似如下格式的路由花括号里的参数。</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">https://api-free.deepl.com/v2/document/{document_id}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我是这么做的，代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token comment">// 解析URL模板以查找路径参数</span></span>
<span class="line">urlParts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> i<span class="token punctuation">,</span> part <span class="token operator">:=</span> <span class="token keyword">range</span> urlParts <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>part<span class="token punctuation">,</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>part<span class="token punctuation">,</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> param <span class="token operator">:=</span> <span class="token keyword">range</span> toolBundle<span class="token punctuation">.</span>Parameters <span class="token punctuation">{</span></span>
<span class="line">            paramNameInPath <span class="token operator">:=</span> part<span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token function">len</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">            <span class="token keyword">if</span> paramNameInPath <span class="token operator">==</span> param<span class="token punctuation">.</span>Name <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> actionInput<span class="token punctuation">[</span>param<span class="token punctuation">.</span>Name<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 删除已经使用过的</span></span>
<span class="line">                    <span class="token function">delete</span><span class="token punctuation">(</span>actionInput<span class="token punctuation">,</span> param<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token comment">// 替换模板中的占位符</span></span>
<span class="line">                    urlParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">urlStr <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>urlParts<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先把路由按照 / 打散，放到数组 urlParts 中。例如将 document/{document_id} 变为 {&quot;document&quot;, &quot;{document_id}&quot;}。之后开始遍历数组，如果遇到带花括号的元素，就把花括号中的元素拿出来，也就是 document_id，之后就从参数中开始匹配，如果能匹配到，则从 actionInput 中把对应的值取出来替换掉 {document_id}。例如替换完成后该路由变成了 /document/1。这些参数在 path 中使用过后，需要在 action_input 中删掉，以免在 query 或 requestBody 中重复使用。</p><p>接下来处理 query 和 requestBody 的参数。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">if</span> toolBundle<span class="token punctuation">.</span>OpenAPI<span class="token punctuation">[</span><span class="token string">&quot;requestBody&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    reqBody<span class="token punctuation">,</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>actionInput<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    reqBody <span class="token operator">=</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> param <span class="token operator">:=</span> <span class="token keyword">range</span> toolBundle<span class="token punctuation">.</span>Parameters <span class="token punctuation">{</span></span>
<span class="line">        urlStr <span class="token operator">+=</span> <span class="token string">&quot;&amp;&quot;</span> <span class="token operator">+</span> param<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> actionInput<span class="token punctuation">[</span>param<span class="token punctuation">.</span>Name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先通过 OpenAPI[&quot;requestBody&quot;]，来判断 OpenAPI 文档是否有 requestBody，如果有则直接把 action_input JSON 序列化就得到了 requestBody。如果没有，则把参数拼接到 query 中。这样，参数部分就处理完毕了。</p><p>最后是执行 HTTP 请求的部分。使用的是 Go 语言自带的 HTTP 包完成的。代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">call</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url <span class="token builtin">string</span><span class="token punctuation">,</span> headers <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> reqBody <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    method <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 创建请求体</span></span>
<span class="line">    <span class="token keyword">var</span> body <span class="token operator">*</span>bytes<span class="token punctuation">.</span>Reader</span>
<span class="line">    <span class="token keyword">if</span> reqBody <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        body <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>reqBody<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        body <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建 HTTP 请求</span></span>
<span class="line">    req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> body<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;创建请求失败: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置请求头</span></span>
<span class="line">    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> headers <span class="token punctuation">{</span></span>
<span class="line">        req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 创建 HTTP 客户端，并设置超时时间</span></span>
<span class="line">    client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span></span>
<span class="line">        Timeout<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 发送请求</span></span>
<span class="line">    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;发送请求失败: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 读取响应体</span></span>
<span class="line">    respBody<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>StatusCode<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;读取响应体失败: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> respBody<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>StatusCode<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码整体不复杂，唯一要说的几个点是，http 包中执行 HTTP 请求时，Method 要求大写，因此使用了一个 strings.ToUpper(method) 转了一下。第二，入参 headers 和 reqBody 可以是空的，取决于之前的两个步骤是怎么处理的。其他的就很简单了。</p><h2 id="轮次限制" tabindex="-1"><a class="header-anchor" href="#轮次限制"><span>轮次限制</span></a></h2><p>接下来我们看一下轮次限制。在上节课的代码中，我们已经在本地 YAML 配置文件中设置了轮次限制 max_iteration_steps。我们只需要设置一个 iteration_steps，之后每进行完一轮对话后，都让它和 max_iteration_steps 的值比较一下，如果大于等于 max_iteration_steps，就退出，不再进行下一轮对话，否则就 iteration_steps++。这样就完成了轮次限制，避免陷入死循环。</p><h2 id="gin-封装-api" tabindex="-1"><a class="header-anchor" href="#gin-封装-api"><span>Gin 封装 API</span></a></h2><p>Dify 的 Agent 提供了 API 的访问方式，在前面的课程中我分析过其优点是什么。因此，这节课，我也用 Gin 封装一个 API，让用户也可以通过 API 来访问 Agent。</p><p>设计的 API 如下：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">POST http://&lt;host&gt;:&lt;port&gt;/v1/chat-messages</span>
<span class="line">Body: json格式</span>
<span class="line">数据结构: message string类型 表示用户query</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们看代码设计。service 层负责调用 agent，开启多轮对话的过程，直到得到答案。因此 service 层“类”的定义如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">type</span> ChatCompletionService <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    sc    <span class="token operator">*</span>models<span class="token punctuation">.</span>Config</span>
<span class="line">    tools <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>ApiToolBundle</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要在 service 初始化时注入 YAML 反序列化后的结构 sc 以及通过 OpenAPI 解析出来的 APIToolBundle。Agent 对话还需要用户的 query，这个参数是用户调用 API 时在 Body 中传入的，因此会在控制器中解析，然后传给 service 层。控制器的代码如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>chat <span class="token operator">*</span>ChatCompletionCtl<span class="token punctuation">)</span> <span class="token function">ChatCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> message models<span class="token punctuation">.</span>ChatMeessage</span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;解析请求体失败: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        response<span class="token punctuation">,</span> err <span class="token operator">:=</span> chat<span class="token punctuation">.</span>chatCompletionService<span class="token punctuation">.</span><span class="token function">ChatCompletion</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Message<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;询问失败: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> response<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><p>代码到这基本上就写完了，我用一个 DeepL 的 OpenAPI 文档来测试一下。DeepL 是一款在线翻译软件，其翻译效果十分不错，号称全世界最准确的翻译。如果你想要开通其 API 试用，可以访问<a href="https://support.deepl.com/hc/zh-cn/articles/360020695820-DeepL-API-%E7%9A%84-API-%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">链接</a>获取密钥。</p><p>下面是配置了 DeepL 工具的本地 YAML 配置文件。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code><span class="line">instruction<span class="token punctuation">:</span> 你是一个精通多国语言的翻译专家，可以翻译任何文本。</span>
<span class="line">max_iteration_steps<span class="token punctuation">:</span> <span class="token number">5</span></span>
<span class="line">apis<span class="token punctuation">:</span></span>
<span class="line">  apiProvider<span class="token punctuation">:</span></span>
<span class="line">    apiKey<span class="token punctuation">:</span></span>
<span class="line">      name<span class="token punctuation">:</span> DeepL<span class="token operator">-</span>Auth<span class="token operator">-</span>Key</span>
<span class="line">      value<span class="token punctuation">:</span> 7xxxxxxxxxxxxxxxxxxx</span>
<span class="line">      in<span class="token punctuation">:</span> header</span>
<span class="line">  api<span class="token punctuation">:</span> <span class="token operator">|</span></span>
<span class="line">    openapi<span class="token punctuation">:</span> <span class="token number">3.1</span><span class="token number">.0</span></span>
<span class="line">    info<span class="token punctuation">:</span></span>
<span class="line">      title<span class="token punctuation">:</span> DeepL API Documentation</span>
<span class="line">      description<span class="token punctuation">:</span> The DeepL API provides programmatic access to DeepL’s machine translation technology<span class="token punctuation">.</span></span>
<span class="line">      version<span class="token punctuation">:</span> v1<span class="token punctuation">.</span><span class="token number">0.0</span></span>
<span class="line">    servers<span class="token punctuation">:</span></span>
<span class="line">      <span class="token operator">-</span> url<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token operator">-</span>free<span class="token punctuation">.</span>deepl<span class="token punctuation">.</span>com<span class="token operator">/</span>v2</span>
<span class="line">    paths<span class="token punctuation">:</span></span>
<span class="line">      <span class="token operator">/</span>translate<span class="token punctuation">:</span></span>
<span class="line">        post<span class="token punctuation">:</span></span>
<span class="line">          description<span class="token punctuation">:</span> Request Translation</span>
<span class="line">          operationId<span class="token punctuation">:</span> translateText</span>
<span class="line">          requestBody<span class="token punctuation">:</span></span>
<span class="line">            required<span class="token punctuation">:</span> <span class="token boolean">true</span></span>
<span class="line">            content<span class="token punctuation">:</span></span>
<span class="line">              application<span class="token operator">/</span>json<span class="token punctuation">:</span></span>
<span class="line">                schema<span class="token punctuation">:</span></span>
<span class="line">                  <span class="token keyword">type</span><span class="token punctuation">:</span> object</span>
<span class="line">                  required<span class="token punctuation">:</span></span>
<span class="line">                    <span class="token operator">-</span> text</span>
<span class="line">                    <span class="token operator">-</span> target_lang</span>
<span class="line">                  properties<span class="token punctuation">:</span></span>
<span class="line">                    text<span class="token punctuation">:</span></span>
<span class="line">                      $ref<span class="token punctuation">:</span> &#39;#<span class="token operator">/</span>components<span class="token operator">/</span>schemas<span class="token operator">/</span>TranslationText&#39;</span>
<span class="line">                    target_lang<span class="token punctuation">:</span></span>
<span class="line">                      $ref<span class="token punctuation">:</span> &#39;#<span class="token operator">/</span>components<span class="token operator">/</span>schemas<span class="token operator">/</span>LanguageCode&#39;</span>
<span class="line">          responses<span class="token punctuation">:</span></span>
<span class="line">            <span class="token char">&#39;200&#39;</span><span class="token punctuation">:</span></span>
<span class="line">              description<span class="token punctuation">:</span> Successful response</span>
<span class="line">    components<span class="token punctuation">:</span></span>
<span class="line">      schemas<span class="token punctuation">:</span></span>
<span class="line">        TranslationText<span class="token punctuation">:</span></span>
<span class="line">          description<span class="token punctuation">:</span> <span class="token operator">|</span></span>
<span class="line">            Text to be translated<span class="token punctuation">.</span> Only UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>encoded plain text is supported<span class="token punctuation">.</span> The parameter may be specified</span>
<span class="line">            up to <span class="token number">50</span> times in a single request<span class="token punctuation">.</span> Translations are returned in the same order as they are requested<span class="token punctuation">.</span></span>
<span class="line">          <span class="token keyword">type</span><span class="token punctuation">:</span> array</span>
<span class="line">          maxItems<span class="token punctuation">:</span> <span class="token number">50</span></span>
<span class="line">          items<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token builtin">string</span></span>
<span class="line">            example<span class="token punctuation">:</span> Hello<span class="token punctuation">,</span> World<span class="token operator">!</span></span>
<span class="line">        LanguageCode<span class="token punctuation">:</span></span>
<span class="line">          description<span class="token punctuation">:</span> The language into which the text should be translated<span class="token punctuation">.</span></span>
<span class="line">          <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token builtin">string</span></span>
<span class="line">          enum<span class="token punctuation">:</span></span>
<span class="line">            <span class="token operator">-</span> BG</span>
<span class="line">            <span class="token operator">-</span> CS</span>
<span class="line">            <span class="token operator">-</span> DA</span>
<span class="line">            <span class="token operator">-</span> DE</span>
<span class="line">            <span class="token operator">-</span> EL</span>
<span class="line">            <span class="token operator">-</span> EN<span class="token operator">-</span>GB</span>
<span class="line">            <span class="token operator">-</span> EN<span class="token operator">-</span>US</span>
<span class="line">            <span class="token operator">-</span> ES</span>
<span class="line">            <span class="token operator">-</span> ET</span>
<span class="line">            <span class="token operator">-</span> FI</span>
<span class="line">            <span class="token operator">-</span> FR</span>
<span class="line">            <span class="token operator">-</span> HU</span>
<span class="line">            <span class="token operator">-</span> ID</span>
<span class="line">            <span class="token operator">-</span> IT</span>
<span class="line">            <span class="token operator">-</span> JA</span>
<span class="line">            <span class="token operator">-</span> KO</span>
<span class="line">            <span class="token operator">-</span> LT</span>
<span class="line">            <span class="token operator">-</span> LV</span>
<span class="line">            <span class="token operator">-</span> NB</span>
<span class="line">            <span class="token operator">-</span> NL</span>
<span class="line">            <span class="token operator">-</span> PL</span>
<span class="line">            <span class="token operator">-</span> PT<span class="token operator">-</span>BR</span>
<span class="line">            <span class="token operator">-</span> PT<span class="token operator">-</span>PT</span>
<span class="line">            <span class="token operator">-</span> RO</span>
<span class="line">            <span class="token operator">-</span> RU</span>
<span class="line">            <span class="token operator">-</span> SK</span>
<span class="line">            <span class="token operator">-</span> SL</span>
<span class="line">            <span class="token operator">-</span> SV</span>
<span class="line">            <span class="token operator">-</span> TR</span>
<span class="line">            <span class="token operator">-</span> UK</span>
<span class="line">            <span class="token operator">-</span> ZH</span>
<span class="line">            <span class="token operator">-</span> ZH<span class="token operator">-</span>HANS</span>
<span class="line">          example<span class="token punctuation">:</span> DE</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先设置了人设，并设置了轮次限制为 5 轮。之后配置了 DeepL 工具。该工具相比之前的高德地图的 OpenAPI 文档是要复杂一点的，其参数是定义在 requestBody 中，且使用了 components，并且参数中还包含了枚举。</p><p>程序运行起来后，我使用 apifox 工具进行 POST 请求，让 Agent 帮我翻译一句话：</p><p><img src="https://static001.geekbang.org/resource/image/09/b2/09f60aca074c0d0da3d6c79439d111b2.png?wh=742x380" alt="图片"></p><p>第一轮回答：</p><p><img src="https://static001.geekbang.org/resource/image/f0/27/f01e24ca677b059d997d8c85b14d6227.png?wh=626x263" alt="图片"></p><p>组装工具并进行 HTTP 请求：</p><p><img src="https://static001.geekbang.org/resource/image/7b/4a/7b7d191556f8f234c32380027db5a44a.png?wh=1252x193" alt="图片"></p><p>从回复中可以看到，第一次请求出错了，原因是 text 参数的类型是一个字符串数组。</p><p>第二轮回复：</p><p><img src="https://static001.geekbang.org/resource/image/a1/82/a12563a41a7e4b29dfeb269a73f61282.png?wh=808x259" alt="图片"></p><p>可以看到 Agent 进行了自我纠错。</p><p><img src="https://static001.geekbang.org/resource/image/81/67/819ef4cdce8090f78d958aa15c18f167.png?wh=1284x214" alt="图片"></p><p>并且得到了正确的回复。</p><p>第三轮：</p><p><img src="https://static001.geekbang.org/resource/image/89/b8/8968863a578b704c0b7082e5c72c0ab8.png?wh=1278x208" alt="图片"></p><p>得到了最终答案。同时我们在 apifox 工具上也得到了最终答案。</p><p><img src="https://static001.geekbang.org/resource/image/67/84/67ab08a344a02b21452650c6e00e3684.png?wh=1022x225" alt="图片"></p><p>如果，将轮次限制设置为 1，则会得到“已超出允许的最大迭代次数”的回复。</p><p><img src="https://static001.geekbang.org/resource/image/53/fd/5330441972742ebe7aaa860303ec25fd.png?wh=1043x207" alt="图片"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>今天这节课，我们沿着上节课的思路，完成了剩余模块的代码编写以及测试。本节课的模块包括 output_parser，即对大模型的返回内容的解析模块；以及通用 HTTP 方法模块，即在不知道本次 HTTP 请求是 POST 还是 GET、有无 header、参数是 query 还是 requestBody 的情况下，如何通用化地处理这些内容的模块。之后还介绍了轮次限制功能的代码编写思路。最后将整个 Agent 应用用 Gin 封装成了 API。本节课的代码已经上传到了 <a href="https://github.com/xingyunyang01/Geek/tree/main/agent" target="_blank" rel="noopener noreferrer">GitHub</a>，你可以点击链接查看代码。</p><p>最后我用一张图总结一下可定制 API Agent 的模块架构图以及控制流，你可对照着这张图以及代码再理一下思路。</p><p><img src="https://static001.geekbang.org/resource/image/yy/42/yy77d6cf84e761d40de8e405b51a9d42.jpg?wh=1503x834" alt="图片"></p><p>本章节不管是 GPTs 还是 Dify Agent，其重要意义都在于提供了一种 Agent 的范式标准。即所有的工具都是用统一的 OpenAPI 规范来进行配置与管理。代码基于 OpenAPI 实现了标准的从文档解析到 HTTP 工具调用的全流程，因此也就实现了用户可以零代码快速创建一个 Agent 应用的效果。</p><p>而 Dify 提供的这种 API 访问的方式，更是间接地有了 AI 微服务的雏形。即网关具备 Agent 能力，管理着后端的各个 API，用户通过 API 以自然语言的方式访问网关（Agent），网关（Agent）给出自然语言化的回答。这种思想既是对传统 API 网关的变革，也将会是未来 AI 应用实现方式的重要组成部分。关于这些内容，我将在下一章节进行详细讲解。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>本节课，我们与大模型对话采用的是非流式模式，你可以去尝试实现一下流式模式。</p>`,70)]))}const c=s(t,[["render",l]]),u=JSON.parse('{"path":"/3.tech/84.AIAgent/17.%E7%94%A8Go%E8%AF%AD%E8%A8%80%E6%89%8B%E5%86%99%E5%8F%AF%E5%AE%9A%E5%88%B6API%20Agent%EF%BC%88%E4%B8%8B%EF%BC%89.html","title":"用 Go 语言手写可定制 API Agent（下）","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"Output_parser","slug":"output-parser","link":"#output-parser","children":[]},{"level":2,"title":"通用 HTTP 方法","slug":"通用-http-方法","link":"#通用-http-方法","children":[]},{"level":2,"title":"轮次限制","slug":"轮次限制","link":"#轮次限制","children":[]},{"level":2,"title":"Gin 封装 API","slug":"gin-封装-api","link":"#gin-封装-api","children":[]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"updatedTime":1749262836000,"contributors":[{"name":"guoxin-qiu","username":"guoxin-qiu","email":"guoxin.qiu@outlook.com","commits":1,"url":"https://github.com/guoxin-qiu"}],"changelog":[{"hash":"0e82c49946907ddefcb6ccb279dc6debbb8ca726","time":1749262836000,"email":"guoxin.qiu@outlook.com","author":"guoxin-qiu","message":"add 20250607"}]},"filePathRelative":"3.tech/84.AIAgent/17.用Go语言手写可定制API Agent（下）.md"}');export{c as comp,u as data};
